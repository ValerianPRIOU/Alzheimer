
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08007f30  08007f30  00017f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008464  08008464  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800846c  0800846c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008474  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001f0  08008664  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  08008664  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009663  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a58  00000000  00000000  00029883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014697  00000000  00000000  0002c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a023  00000000  00000000  0004087f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000783c2  00000000  00000000  0004a8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2c64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d4  00000000  00000000  000c2cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f18 	.word	0x08007f18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08007f18 	.word	0x08007f18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <Perimetre>:
//lat  49.039566040039062
//long 2.0719516277313232



void Perimetre(void){
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af02      	add	r7, sp, #8

	DistanceMilesCarre = (((latENSEA - latitude)*(latENSEA - latitude)) + ((longiENSEA - longitude)*(longiENSEA - longitude)));
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <Perimetre+0x110>)
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <Perimetre+0x114>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f93c 	bl	80002c8 <__aeabi_dsub>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4614      	mov	r4, r2
 8001056:	461d      	mov	r5, r3
 8001058:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <Perimetre+0x110>)
 800105a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <Perimetre+0x114>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff f930 	bl	80002c8 <__aeabi_dsub>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4620      	mov	r0, r4
 800106e:	4629      	mov	r1, r5
 8001070:	f7ff fae2 	bl	8000638 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4614      	mov	r4, r2
 800107a:	461d      	mov	r5, r3
 800107c:	4b34      	ldr	r3, [pc, #208]	; (8001150 <Perimetre+0x118>)
 800107e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <Perimetre+0x11c>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f91e 	bl	80002c8 <__aeabi_dsub>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4690      	mov	r8, r2
 8001092:	4699      	mov	r9, r3
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <Perimetre+0x118>)
 8001096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <Perimetre+0x11c>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff f912 	bl	80002c8 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4640      	mov	r0, r8
 80010aa:	4649      	mov	r1, r9
 80010ac:	f7ff fac4 	bl	8000638 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff f908 	bl	80002cc <__adddf3>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4925      	ldr	r1, [pc, #148]	; (8001158 <Perimetre+0x120>)
 80010c2:	e9c1 2300 	strd	r2, r3, [r1]
	DistanceCarre = (DistanceMilesCarre/3.429904);
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <Perimetre+0x120>)
 80010c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010cc:	a31a      	add	r3, pc, #104	; (adr r3, 8001138 <Perimetre+0x100>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fbdb 	bl	800088c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4920      	ldr	r1, [pc, #128]	; (800115c <Perimetre+0x124>)
 80010dc:	e9c1 2300 	strd	r2, r3, [r1]

	if(DistanceCarre >= 0.0000012){ //Perdu environ à partir de l'arrêt de bus.
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <Perimetre+0x124>)
 80010e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e6:	a316      	add	r3, pc, #88	; (adr r3, 8001140 <Perimetre+0x108>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fd2a 	bl	8000b44 <__aeabi_dcmpge>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d100      	bne.n	80010f8 <Perimetre+0xc0>
		HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
		sprintf(uart_tx_buffer,"Je suis perdu, venez me chercher. Je suis en lat : %lf, long : %lf \r\n", latitude, longitude);
	}
}
 80010f6:	e018      	b.n	800112a <Perimetre+0xf2>
		HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
 80010f8:	4819      	ldr	r0, [pc, #100]	; (8001160 <Perimetre+0x128>)
 80010fa:	f7ff f889 	bl	8000210 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	4916      	ldr	r1, [pc, #88]	; (8001160 <Perimetre+0x128>)
 8001108:	4816      	ldr	r0, [pc, #88]	; (8001164 <Perimetre+0x12c>)
 800110a:	f001 fcc4 	bl	8002a96 <HAL_UART_Transmit>
		sprintf(uart_tx_buffer,"Je suis perdu, venez me chercher. Je suis en lat : %lf, long : %lf \r\n", latitude, longitude);
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <Perimetre+0x114>)
 8001110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <Perimetre+0x11c>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	e9cd 2300 	strd	r2, r3, [sp]
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4911      	ldr	r1, [pc, #68]	; (8001168 <Perimetre+0x130>)
 8001124:	480e      	ldr	r0, [pc, #56]	; (8001160 <Perimetre+0x128>)
 8001126:	f003 f981 	bl	800442c <siprintf>
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	82235b4f 	.word	0x82235b4f
 800113c:	400b7071 	.word	0x400b7071
 8001140:	f40d8376 	.word	0xf40d8376
 8001144:	3eb421f5 	.word	0x3eb421f5
 8001148:	20000000 	.word	0x20000000
 800114c:	200006d0 	.word	0x200006d0
 8001150:	20000008 	.word	0x20000008
 8001154:	200006d8 	.word	0x200006d8
 8001158:	20000768 	.word	0x20000768
 800115c:	20000770 	.word	0x20000770
 8001160:	200006e8 	.word	0x200006e8
 8001164:	20000250 	.word	0x20000250
 8001168:	08007f30 	.word	0x08007f30

0800116c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001172:	f000 fc55 	bl	8001a20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001176:	f000 f977 	bl	8001468 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800117a:	f000 fa27 	bl	80015cc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800117e:	f000 f9fb 	bl	8001578 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001182:	f000 f9cf 	bl	8001524 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, uart_gps_rx, 1);
 8001186:	2201      	movs	r2, #1
 8001188:	49a0      	ldr	r1, [pc, #640]	; (800140c <main+0x2a0>)
 800118a:	48a1      	ldr	r0, [pc, #644]	; (8001410 <main+0x2a4>)
 800118c:	f001 fd15 	bl	8002bba <HAL_UART_Receive_IT>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if(it_rx_gps){
 8001190:	4ba0      	ldr	r3, [pc, #640]	; (8001414 <main+0x2a8>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0fb      	beq.n	8001190 <main+0x24>
			if(data_rdy == 1){
 8001198:	4b9f      	ldr	r3, [pc, #636]	; (8001418 <main+0x2ac>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	f040 80de 	bne.w	800135e <main+0x1f2>
				for(int j = 0; j<=23;j++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
 80011a6:	e00b      	b.n	80011c0 <main+0x54>
					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	3312      	adds	r3, #18
 80011ac:	4a9b      	ldr	r2, [pc, #620]	; (800141c <main+0x2b0>)
 80011ae:	5cd1      	ldrb	r1, [r2, r3]
 80011b0:	4a9b      	ldr	r2, [pc, #620]	; (8001420 <main+0x2b4>)
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	4413      	add	r3, r2
 80011b6:	460a      	mov	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j<=23;j++){
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	3301      	adds	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	2b17      	cmp	r3, #23
 80011c4:	ddf0      	ble.n	80011a8 <main+0x3c>
				}

				for(int k = 0; k<=9;k++){
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	e00b      	b.n	80011e4 <main+0x78>
					latitude_data[k] = position[k]; //latitude non convertie
 80011cc:	4a94      	ldr	r2, [pc, #592]	; (8001420 <main+0x2b4>)
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	4413      	add	r3, r2
 80011d2:	7819      	ldrb	r1, [r3, #0]
 80011d4:	4a93      	ldr	r2, [pc, #588]	; (8001424 <main+0x2b8>)
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
				for(int k = 0; k<=9;k++){
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	3301      	adds	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	ddf0      	ble.n	80011cc <main+0x60>
				}
				for(int l = 0; l<=10;l++){
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e00b      	b.n	8001208 <main+0x9c>
					longitude_data[l] = position[l+13]; //longitude non convertie
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	330d      	adds	r3, #13
 80011f4:	4a8a      	ldr	r2, [pc, #552]	; (8001420 <main+0x2b4>)
 80011f6:	5cd1      	ldrb	r1, [r2, r3]
 80011f8:	4a8b      	ldr	r2, [pc, #556]	; (8001428 <main+0x2bc>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	4413      	add	r3, r2
 80011fe:	460a      	mov	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
				for(int l = 0; l<=10;l++){
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0a      	cmp	r3, #10
 800120c:	ddf0      	ble.n	80011f0 <main+0x84>
				}

				lat2[0] = latitude_data[0];
 800120e:	4b85      	ldr	r3, [pc, #532]	; (8001424 <main+0x2b8>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b86      	ldr	r3, [pc, #536]	; (800142c <main+0x2c0>)
 8001214:	701a      	strb	r2, [r3, #0]
				lat2[1] = latitude_data[1]; //lat2 -> les deux digits du degré de la lat.
 8001216:	4b83      	ldr	r3, [pc, #524]	; (8001424 <main+0x2b8>)
 8001218:	785a      	ldrb	r2, [r3, #1]
 800121a:	4b84      	ldr	r3, [pc, #528]	; (800142c <main+0x2c0>)
 800121c:	705a      	strb	r2, [r3, #1]

				for(int m = 0; m<=6;m++){
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	e00b      	b.n	800123c <main+0xd0>
					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste de la lat.
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	3302      	adds	r3, #2
 8001228:	4a7e      	ldr	r2, [pc, #504]	; (8001424 <main+0x2b8>)
 800122a:	5cd1      	ldrb	r1, [r2, r3]
 800122c:	4a80      	ldr	r2, [pc, #512]	; (8001430 <main+0x2c4>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4413      	add	r3, r2
 8001232:	460a      	mov	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
				for(int m = 0; m<=6;m++){
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	3301      	adds	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b06      	cmp	r3, #6
 8001240:	ddf0      	ble.n	8001224 <main+0xb8>
				}

				long3[0] = longitude_data[0];
 8001242:	4b79      	ldr	r3, [pc, #484]	; (8001428 <main+0x2bc>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b7b      	ldr	r3, [pc, #492]	; (8001434 <main+0x2c8>)
 8001248:	701a      	strb	r2, [r3, #0]
				long3[1] = longitude_data[1];
 800124a:	4b77      	ldr	r3, [pc, #476]	; (8001428 <main+0x2bc>)
 800124c:	785a      	ldrb	r2, [r3, #1]
 800124e:	4b79      	ldr	r3, [pc, #484]	; (8001434 <main+0x2c8>)
 8001250:	705a      	strb	r2, [r3, #1]
				long3[2] = longitude_data[2]; //long3 -> les trois digits du degré de la long.
 8001252:	4b75      	ldr	r3, [pc, #468]	; (8001428 <main+0x2bc>)
 8001254:	789a      	ldrb	r2, [r3, #2]
 8001256:	4b77      	ldr	r3, [pc, #476]	; (8001434 <main+0x2c8>)
 8001258:	709a      	strb	r2, [r3, #2]

				for(int n = 0; n<=6;n++){
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e00b      	b.n	8001278 <main+0x10c>
					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste de la long.
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3303      	adds	r3, #3
 8001264:	4a70      	ldr	r2, [pc, #448]	; (8001428 <main+0x2bc>)
 8001266:	5cd1      	ldrb	r1, [r2, r3]
 8001268:	4a73      	ldr	r2, [pc, #460]	; (8001438 <main+0x2cc>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	460a      	mov	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
				for(int n = 0; n<=6;n++){
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b06      	cmp	r3, #6
 800127c:	ddf0      	ble.n	8001260 <main+0xf4>
				}

				float deg_lat = atof(lat2);
 800127e:	486b      	ldr	r0, [pc, #428]	; (800142c <main+0x2c0>)
 8001280:	f002 fc34 	bl	8003aec <atof>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fccc 	bl	8000c28 <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	613b      	str	r3, [r7, #16]
				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001294:	4866      	ldr	r0, [pc, #408]	; (8001430 <main+0x2c4>)
 8001296:	f002 fc29 	bl	8003aec <atof>
 800129a:	ec53 2b10 	vmov	r2, r3, d0
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff fcc1 	bl	8000c28 <__aeabi_d2f>
 80012a6:	4603      	mov	r3, r0
 80012a8:	60fb      	str	r3, [r7, #12]

				float deg_long = atof(long3);
 80012aa:	4862      	ldr	r0, [pc, #392]	; (8001434 <main+0x2c8>)
 80012ac:	f002 fc1e 	bl	8003aec <atof>
 80012b0:	ec53 2b10 	vmov	r2, r3, d0
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fcb6 	bl	8000c28 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	60bb      	str	r3, [r7, #8]
				float reste_long = atof(long7); //conversion du char[long] en float[long]
 80012c0:	485d      	ldr	r0, [pc, #372]	; (8001438 <main+0x2cc>)
 80012c2:	f002 fc13 	bl	8003aec <atof>
 80012c6:	ec53 2b10 	vmov	r2, r3, d0
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fcab 	bl	8000c28 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	607b      	str	r3, [r7, #4]

				latitude = deg_lat + (reste_lat/60); //latitude convertie
 80012d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800143c <main+0x2d0>
 80012de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ea:	ee17 0a90 	vmov	r0, s15
 80012ee:	f7ff f94b 	bl	8000588 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4952      	ldr	r1, [pc, #328]	; (8001440 <main+0x2d4>)
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]
				longitude = deg_long + (reste_long/60); //longitude convertie
 80012fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001300:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800143c <main+0x2d0>
 8001304:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001310:	ee17 0a90 	vmov	r0, s15
 8001314:	f7ff f938 	bl	8000588 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4949      	ldr	r1, [pc, #292]	; (8001444 <main+0x2d8>)
 800131e:	e9c1 2300 	strd	r2, r3, [r1]


				HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen(uart_tx_buffer), HAL_MAX_DELAY);
 8001322:	4849      	ldr	r0, [pc, #292]	; (8001448 <main+0x2dc>)
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
 8001330:	4945      	ldr	r1, [pc, #276]	; (8001448 <main+0x2dc>)
 8001332:	4846      	ldr	r0, [pc, #280]	; (800144c <main+0x2e0>)
 8001334:	f001 fbaf 	bl	8002a96 <HAL_UART_Transmit>
				sprintf(uart_tx_buffer,"latitude : %lf,\r\n longitude : %lf \r\n", latitude, longitude);
 8001338:	4b41      	ldr	r3, [pc, #260]	; (8001440 <main+0x2d4>)
 800133a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <main+0x2d8>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	e9cd 2300 	strd	r2, r3, [sp]
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4940      	ldr	r1, [pc, #256]	; (8001450 <main+0x2e4>)
 800134e:	483e      	ldr	r0, [pc, #248]	; (8001448 <main+0x2dc>)
 8001350:	f003 f86c 	bl	800442c <siprintf>




				Perimetre();
 8001354:	f7ff fe70 	bl	8001038 <Perimetre>

				data_rdy = 0;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <main+0x2ac>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]

			}
			if(uart_gps_rx[0]==10){
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <main+0x2a0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b0a      	cmp	r3, #10
 8001364:	d107      	bne.n	8001376 <main+0x20a>
				HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	2202      	movs	r2, #2
 800136c:	4939      	ldr	r1, [pc, #228]	; (8001454 <main+0x2e8>)
 800136e:	4837      	ldr	r0, [pc, #220]	; (800144c <main+0x2e0>)
 8001370:	f001 fb91 	bl	8002a96 <HAL_UART_Transmit>
 8001374:	e045      	b.n	8001402 <main+0x296>
			}
			else{
				uart_pc_tx[0]=uart_gps_rx[0];
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <main+0x2a0>)
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <main+0x2ec>)
 800137c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, uart_pc_tx, 1, HAL_MAX_DELAY);
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	2201      	movs	r2, #1
 8001384:	4934      	ldr	r1, [pc, #208]	; (8001458 <main+0x2ec>)
 8001386:	4831      	ldr	r0, [pc, #196]	; (800144c <main+0x2e0>)
 8001388:	f001 fb85 	bl	8002a96 <HAL_UART_Transmit>
				coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <main+0x2f0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a31      	ldr	r2, [pc, #196]	; (8001458 <main+0x2ec>)
 8001392:	7811      	ldrb	r1, [r2, #0]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <main+0x2b0>)
 8001396:	54d1      	strb	r1, [r2, r3]
				if(i >= 4){
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <main+0x2f0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b03      	cmp	r3, #3
 800139e:	dd2b      	ble.n	80013f8 <main+0x28c>
					if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <main+0x2f0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3b04      	subs	r3, #4
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <main+0x2b0>)
 80013a8:	4413      	add	r3, r2
 80013aa:	2205      	movs	r2, #5
 80013ac:	4619      	mov	r1, r3
 80013ae:	482c      	ldr	r0, [pc, #176]	; (8001460 <main+0x2f4>)
 80013b0:	f003 f85c 	bl	800446c <strncmp>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10e      	bne.n	80013d8 <main+0x26c>
						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <main+0x2f0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
						if(first_data == 1){
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <main+0x2f8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d103      	bne.n	80013d0 <main+0x264>
							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <main+0x2ac>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e018      	b.n	8001402 <main+0x296>
						}
						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <main+0x2f8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e014      	b.n	8001402 <main+0x296>
					}
					else{
						if(i == GPS_TRAME_SIZE-1){
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <main+0x2f0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d103      	bne.n	80013ec <main+0x280>
							i = 0;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <main+0x2f0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e00a      	b.n	8001402 <main+0x296>
						}
						else{
							i++;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <main+0x2f0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a1a      	ldr	r2, [pc, #104]	; (800145c <main+0x2f0>)
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e004      	b.n	8001402 <main+0x296>
						}

					}

				}
				else i++;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <main+0x2f0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <main+0x2f0>)
 8001400:	6013      	str	r3, [r2, #0]
			}

			it_rx_gps = 0;
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <main+0x2a8>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
		if(it_rx_gps){
 8001408:	e6c2      	b.n	8001190 <main+0x24>
 800140a:	bf00      	nop
 800140c:	20000294 	.word	0x20000294
 8001410:	2000020c 	.word	0x2000020c
 8001414:	20000299 	.word	0x20000299
 8001418:	200006e4 	.word	0x200006e4
 800141c:	200002a0 	.word	0x200002a0
 8001420:	200006a0 	.word	0x200006a0
 8001424:	20000694 	.word	0x20000694
 8001428:	20000688 	.word	0x20000688
 800142c:	200006b8 	.word	0x200006b8
 8001430:	200006bc 	.word	0x200006bc
 8001434:	200006c4 	.word	0x200006c4
 8001438:	200006c8 	.word	0x200006c8
 800143c:	42700000 	.word	0x42700000
 8001440:	200006d0 	.word	0x200006d0
 8001444:	200006d8 	.word	0x200006d8
 8001448:	200006e8 	.word	0x200006e8
 800144c:	20000250 	.word	0x20000250
 8001450:	08007f78 	.word	0x08007f78
 8001454:	08007fa0 	.word	0x08007fa0
 8001458:	20000298 	.word	0x20000298
 800145c:	2000029c 	.word	0x2000029c
 8001460:	08007fa4 	.word	0x08007fa4
 8001464:	200006e0 	.word	0x200006e0

08001468 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	; 0x50
 800146c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2234      	movs	r2, #52	; 0x34
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fb66 	bl	8003b48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <SystemClock_Config+0xb4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <SystemClock_Config+0xb4>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <SystemClock_Config+0xb4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <SystemClock_Config+0xb8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <SystemClock_Config+0xb8>)
 80014b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <SystemClock_Config+0xb8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014cc:	2310      	movs	r3, #16
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 f80b 	bl	80024f4 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x80>
	{
		Error_Handler();
 80014e4:	f000 f8a2 	bl	800162c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fe16 	bl	8002134 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 800150e:	f000 f88d 	bl	800162c <Error_Handler>
	}
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	; 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART1_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001530:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001534:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800155c:	f001 fa4e 	bl	80029fc <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001566:	f000 f861 	bl	800162c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000020c 	.word	0x2000020c
 8001574:	40011000 	.word	0x40011000

08001578 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015b0:	f001 fa24 	bl	80029fc <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80015ba:	f000 f837 	bl	800162c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000250 	.word	0x20000250
 80015c8:	40004400 	.word	0x40004400

080015cc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_GPIO_Init+0x30>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <MX_GPIO_Init+0x30>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_GPIO_Init+0x30>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	it_rx_gps = 1;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_UART_RxCpltCallback+0x20>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_gps_rx, 1);
 800160e:	2201      	movs	r2, #1
 8001610:	4904      	ldr	r1, [pc, #16]	; (8001624 <HAL_UART_RxCpltCallback+0x24>)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <HAL_UART_RxCpltCallback+0x28>)
 8001614:	f001 fad1 	bl	8002bba <HAL_UART_Receive_IT>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000299 	.word	0x20000299
 8001624:	20000294 	.word	0x20000294
 8001628:	2000020c 	.word	0x2000020c

0800162c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_MspInit+0x4c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a3a      	ldr	r2, [pc, #232]	; (8001790 <HAL_UART_MspInit+0x108>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d135      	bne.n	8001716 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_UART_MspInit+0x10c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a38      	ldr	r2, [pc, #224]	; (8001794 <HAL_UART_MspInit+0x10c>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_UART_MspInit+0x10c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_UART_MspInit+0x10c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a31      	ldr	r2, [pc, #196]	; (8001794 <HAL_UART_MspInit+0x10c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_UART_MspInit+0x10c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f4:	2307      	movs	r3, #7
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4826      	ldr	r0, [pc, #152]	; (8001798 <HAL_UART_MspInit+0x110>)
 8001700:	f000 fba4 	bl	8001e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2025      	movs	r0, #37	; 0x25
 800170a:	f000 fad6 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800170e:	2025      	movs	r0, #37	; 0x25
 8001710:	f000 faef 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001714:	e038      	b.n	8001788 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a20      	ldr	r2, [pc, #128]	; (800179c <HAL_UART_MspInit+0x114>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d133      	bne.n	8001788 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_UART_MspInit+0x10c>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <HAL_UART_MspInit+0x10c>)
 800172a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_UART_MspInit+0x10c>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_UART_MspInit+0x10c>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	4a13      	ldr	r2, [pc, #76]	; (8001794 <HAL_UART_MspInit+0x10c>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6313      	str	r3, [r2, #48]	; 0x30
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_UART_MspInit+0x10c>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001758:	230c      	movs	r3, #12
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001768:	2307      	movs	r3, #7
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4809      	ldr	r0, [pc, #36]	; (8001798 <HAL_UART_MspInit+0x110>)
 8001774:	f000 fb6a 	bl	8001e4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	2026      	movs	r0, #38	; 0x26
 800177e:	f000 fa9c 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001782:	2026      	movs	r0, #38	; 0x26
 8001784:	f000 fab5 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
}
 8001788:	bf00      	nop
 800178a:	3730      	adds	r7, #48	; 0x30
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40011000 	.word	0x40011000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40004400 	.word	0x40004400

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 f96a 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <USART1_IRQHandler+0x10>)
 80017fa:	f001 fa0f 	bl	8002c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000020c 	.word	0x2000020c

08001808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART2_IRQHandler+0x10>)
 800180e:	f001 fa05 	bl	8002c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000250 	.word	0x20000250

0800181c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_kill>:

int _kill(int pid, int sig)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001836:	f002 f95d 	bl	8003af4 <__errno>
 800183a:	4603      	mov	r3, r0
 800183c:	2216      	movs	r2, #22
 800183e:	601a      	str	r2, [r3, #0]
	return -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_exit>:

void _exit (int status)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffe7 	bl	800182c <_kill>
	while (1) {}		/* Make sure we hang here */
 800185e:	e7fe      	b.n	800185e <_exit+0x12>

08001860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e00a      	b.n	8001888 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001872:	f3af 8000 	nop.w
 8001876:	4601      	mov	r1, r0
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	b2ca      	uxtb	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf0      	blt.n	8001872 <_read+0x12>
	}

return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e009      	b.n	80018c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf1      	blt.n	80018ac <_write+0x12>
	}
	return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_close>:

int _close(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	return -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fa:	605a      	str	r2, [r3, #4]
	return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_isatty>:

int _isatty(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return 1;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f002 f8c2 	bl	8003af4 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20008000 	.word	0x20008000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000778 	.word	0x20000778
 80019a4:	20000790 	.word	0x20000790

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d2:	490e      	ldr	r1, [pc, #56]	; (8001a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e8:	4c0b      	ldr	r4, [pc, #44]	; (8001a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f6:	f7ff ffd7 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f002 f881 	bl	8003b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff fbb5 	bl	800116c <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001a10:	08008474 	.word	0x08008474
  ldr r2, =_sbss
 8001a14:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001a18:	20000790 	.word	0x20000790

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f92b 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fdf0 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f943 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f90b 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	20000018 	.word	0x20000018
 8001ac0:	20000014 	.word	0x20000014

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000018 	.word	0x20000018
 8001ae8:	2000077c 	.word	0x2000077c

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000077c 	.word	0x2000077c

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff feda 	bl	8001aec <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d008      	beq.n	8001d58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e052      	b.n	8001dfe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0216 	bic.w	r2, r2, #22
 8001d66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d103      	bne.n	8001d88 <HAL_DMA_Abort+0x62>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0208 	bic.w	r2, r2, #8
 8001d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da8:	e013      	b.n	8001dd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001daa:	f7ff fe9f 	bl	8001aec <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d90c      	bls.n	8001dd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e015      	b.n	8001dfe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e4      	bne.n	8001daa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	223f      	movs	r2, #63	; 0x3f
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e00c      	b.n	8001e3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2205      	movs	r2, #5
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e14d      	b.n	8002104 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f040 813c 	bne.w	80020fe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d005      	beq.n	8001e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d130      	bne.n	8001f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 0201 	and.w	r2, r3, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d017      	beq.n	8001f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d123      	bne.n	8001f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8096 	beq.w	80020fe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b51      	ldr	r3, [pc, #324]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a50      	ldr	r2, [pc, #320]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b4e      	ldr	r3, [pc, #312]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fee:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <HAL_GPIO_Init+0x2d4>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_GPIO_Init+0x2d8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x1ea>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a42      	ldr	r2, [pc, #264]	; (8002128 <HAL_GPIO_Init+0x2dc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x1e6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a41      	ldr	r2, [pc, #260]	; (800212c <HAL_GPIO_Init+0x2e0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x1e2>
 800202a:	2302      	movs	r3, #2
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x1ec>
 800202e:	2307      	movs	r3, #7
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x1ec>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x1ec>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x2d4>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a2d      	ldr	r2, [pc, #180]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_GPIO_Init+0x2e4>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f aeae 	bls.w	8001e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0cc      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d90c      	bls.n	8002170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d044      	beq.n	8002254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d119      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e06f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e067      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 0203 	bic.w	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4934      	ldr	r1, [pc, #208]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002224:	f7ff fc62 	bl	8001aec <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff fc5e 	bl	8001aec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e04f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 020c 	and.w	r2, r3, #12
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	429a      	cmp	r2, r3
 8002252:	d1eb      	bne.n	800222c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d20c      	bcs.n	800227c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fbc2 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00
 80022f0:	40023800 	.word	0x40023800
 80022f4:	08007fac 	.word	0x08007fac
 80022f8:	20000010 	.word	0x20000010
 80022fc:	20000014 	.word	0x20000014

08002300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b090      	sub	sp, #64	; 0x40
 8002306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
 800230c:	2300      	movs	r3, #0
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d00d      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x40>
 8002324:	2b08      	cmp	r3, #8
 8002326:	f200 80a1 	bhi.w	800246c <HAL_RCC_GetSysClockFreq+0x16c>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x34>
 800232e:	2b04      	cmp	r3, #4
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x3a>
 8002332:	e09b      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_GetSysClockFreq+0x184>)
 8002336:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002338:	e09b      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233a:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800233e:	e098      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	2200      	movs	r2, #0
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	627a      	str	r2, [r7, #36]	; 0x24
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002368:	2100      	movs	r1, #0
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800236c:	fb03 f201 	mul.w	r2, r3, r1
 8002370:	2300      	movs	r3, #0
 8002372:	fb00 f303 	mul.w	r3, r0, r3
 8002376:	4413      	add	r3, r2
 8002378:	4a43      	ldr	r2, [pc, #268]	; (8002488 <HAL_RCC_GetSysClockFreq+0x188>)
 800237a:	fba0 1202 	umull	r1, r2, r0, r2
 800237e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002380:	460a      	mov	r2, r1
 8002382:	62ba      	str	r2, [r7, #40]	; 0x28
 8002384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002386:	4413      	add	r3, r2
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	2200      	movs	r2, #0
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	61fa      	str	r2, [r7, #28]
 8002392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002396:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800239a:	f7fe fc95 	bl	8000cc8 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4613      	mov	r3, r2
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a6:	e053      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	2200      	movs	r2, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	617a      	str	r2, [r7, #20]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023ba:	f04f 0b00 	mov.w	fp, #0
 80023be:	4652      	mov	r2, sl
 80023c0:	465b      	mov	r3, fp
 80023c2:	f04f 0000 	mov.w	r0, #0
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	0159      	lsls	r1, r3, #5
 80023cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d0:	0150      	lsls	r0, r2, #5
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ebb2 080a 	subs.w	r8, r2, sl
 80023da:	eb63 090b 	sbc.w	r9, r3, fp
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023f2:	ebb2 0408 	subs.w	r4, r2, r8
 80023f6:	eb63 0509 	sbc.w	r5, r3, r9
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	00eb      	lsls	r3, r5, #3
 8002404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002408:	00e2      	lsls	r2, r4, #3
 800240a:	4614      	mov	r4, r2
 800240c:	461d      	mov	r5, r3
 800240e:	eb14 030a 	adds.w	r3, r4, sl
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	eb45 030b 	adc.w	r3, r5, fp
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002426:	4629      	mov	r1, r5
 8002428:	028b      	lsls	r3, r1, #10
 800242a:	4621      	mov	r1, r4
 800242c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002430:	4621      	mov	r1, r4
 8002432:	028a      	lsls	r2, r1, #10
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	2200      	movs	r2, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	60fa      	str	r2, [r7, #12]
 8002440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002444:	f7fe fc40 	bl	8000cc8 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_GetSysClockFreq+0x180>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800246a:	e002      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetSysClockFreq+0x184>)
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002474:	4618      	mov	r0, r3
 8002476:	3740      	adds	r7, #64	; 0x40
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	017d7840 	.word	0x017d7840

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000010 	.word	0x20000010

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff0 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08007fbc 	.word	0x08007fbc

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffdc 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0b5b      	lsrs	r3, r3, #13
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08007fbc 	.word	0x08007fbc

080024f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e273      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d075      	beq.n	80025fe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002512:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d00c      	beq.n	8002538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251e:	4b85      	ldr	r3, [pc, #532]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002526:	2b08      	cmp	r3, #8
 8002528:	d112      	bne.n	8002550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002536:	d10b      	bne.n	8002550 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	4b7e      	ldr	r3, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d05b      	beq.n	80025fc <HAL_RCC_OscConfig+0x108>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d157      	bne.n	80025fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e24e      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d106      	bne.n	8002568 <HAL_RCC_OscConfig+0x74>
 800255a:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a75      	ldr	r2, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xb0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x98>
 8002572:	4b70      	ldr	r3, [pc, #448]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6f      	ldr	r2, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6c      	ldr	r2, [pc, #432]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xb0>
 800258c:	4b69      	ldr	r3, [pc, #420]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a68      	ldr	r2, [pc, #416]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a65      	ldr	r2, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff fa9e 	bl	8001aec <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff fa9a 	bl	8001aec <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e213      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xc0>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff fa8a 	bl	8001aec <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff fa86 	bl	8001aec <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1ff      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0xe8>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d063      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800260a:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x152>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1d3      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4937      	ldr	r1, [pc, #220]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e03a      	b.n	80026d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <HAL_RCC_OscConfig+0x244>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7ff fa3f 	bl	8001aec <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002672:	f7ff fa3b 	bl	8001aec <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1b4      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4925      	ldr	r1, [pc, #148]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x244>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff fa1e 	bl	8001aec <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b4:	f7ff fa1a 	bl	8001aec <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e193      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d036      	beq.n	800274c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCC_OscConfig+0x248>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7ff f9fe 	bl	8001aec <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff f9fa 	bl	8001aec <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e173      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x240>)
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x200>
 8002712:	e01b      	b.n	800274c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_OscConfig+0x248>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7ff f9e7 	bl	8001aec <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	e00e      	b.n	8002740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002722:	f7ff f9e3 	bl	8001aec <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d907      	bls.n	8002740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e15c      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
 8002734:	40023800 	.word	0x40023800
 8002738:	42470000 	.word	0x42470000
 800273c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b8a      	ldr	r3, [pc, #552]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ea      	bne.n	8002722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8097 	beq.w	8002888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b83      	ldr	r3, [pc, #524]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a7e      	ldr	r2, [pc, #504]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x478>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b79      	ldr	r3, [pc, #484]	; (8002970 <HAL_RCC_OscConfig+0x47c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d118      	bne.n	80027c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_OscConfig+0x47c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a75      	ldr	r2, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x47c>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a2:	f7ff f9a3 	bl	8001aec <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027aa:	f7ff f99f 	bl	8001aec <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e118      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	4b6c      	ldr	r3, [pc, #432]	; (8002970 <HAL_RCC_OscConfig+0x47c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x2ea>
 80027d0:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x324>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x30c>
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a60      	ldr	r2, [pc, #384]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	4b5e      	ldr	r3, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a5d      	ldr	r2, [pc, #372]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0x324>
 8002800:	4b5a      	ldr	r3, [pc, #360]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4a59      	ldr	r2, [pc, #356]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	; 0x70
 800280c:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x478>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7ff f964 	bl	8001aec <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7ff f960 	bl	8001aec <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0d7      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ee      	beq.n	8002828 <HAL_RCC_OscConfig+0x334>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7ff f94e 	bl	8001aec <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7ff f94a 	bl	8001aec <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0c1      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	4b40      	ldr	r3, [pc, #256]	; (800296c <HAL_RCC_OscConfig+0x478>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ee      	bne.n	8002854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x478>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a3a      	ldr	r2, [pc, #232]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80ad 	beq.w	80029ec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b08      	cmp	r3, #8
 800289c:	d060      	beq.n	8002960 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d145      	bne.n	8002932 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x480>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7ff f91e 	bl	8001aec <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7ff f91a 	bl	8001aec <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e093      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x478>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	071b      	lsls	r3, r3, #28
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x480>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7ff f8ef 	bl	8001aec <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002912:	f7ff f8eb 	bl	8001aec <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e064      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x41e>
 8002930:	e05c      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x480>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7ff f8d8 	bl	8001aec <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7ff f8d4 	bl	8001aec <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04d      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x478>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x44c>
 800295e:	e045      	b.n	80029ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e040      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000
 8002974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002978:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d030      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d129      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d122      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d119      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10f      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e03f      	b.n	8002a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe fe30 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fddf 	bl	8003604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b08a      	sub	sp, #40	; 0x28
 8002a9a:	af02      	add	r7, sp, #8
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d17c      	bne.n	8002bb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_UART_Transmit+0x2c>
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e075      	b.n	8002bb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Transmit+0x3e>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e06e      	b.n	8002bb2 <HAL_UART_Transmit+0x11c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2221      	movs	r2, #33	; 0x21
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aea:	f7fe ffff 	bl	8001aec <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b04:	d108      	bne.n	8002b18 <HAL_UART_Transmit+0x82>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d104      	bne.n	8002b18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	e003      	b.n	8002b20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b28:	e02a      	b.n	8002b80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fb1f 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e036      	b.n	8002bb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10b      	bne.n	8002b62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	e007      	b.n	8002b72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1cf      	bne.n	8002b2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2140      	movs	r1, #64	; 0x40
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 faef 	bl	8003178 <UART_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e006      	b.n	8002bb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d11d      	bne.n	8002c10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_UART_Receive_IT+0x26>
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e016      	b.n	8002c12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_UART_Receive_IT+0x38>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e00f      	b.n	8002c12 <HAL_UART_Receive_IT+0x58>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fb24 	bl	8003254 <UART_Start_Receive_IT>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	e000      	b.n	8002c12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b0ba      	sub	sp, #232	; 0xe8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_UART_IRQHandler+0x66>
 8002c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fc07 	bl	800348e <UART_Receive_IT>
      return;
 8002c80:	e256      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80de 	beq.w	8002e48 <HAL_UART_IRQHandler+0x22c>
 8002c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80d1 	beq.w	8002e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_UART_IRQHandler+0xae>
 8002cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_UART_IRQHandler+0xd2>
 8002cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_UART_IRQHandler+0xf6>
 8002cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d011      	beq.n	8002d42 <HAL_UART_IRQHandler+0x126>
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0208 	orr.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 81ed 	beq.w	8003126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_UART_IRQHandler+0x14e>
 8002d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fb92 	bl	800348e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <HAL_UART_IRQHandler+0x17a>
 8002d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04f      	beq.n	8002e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa9a 	bl	80032d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d141      	bne.n	8002e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1d9      	bne.n	8002daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d013      	beq.n	8002e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4a7d      	ldr	r2, [pc, #500]	; (8002ff8 <HAL_UART_IRQHandler+0x3dc>)
 8002e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fffb 	bl	8001e06 <HAL_DMA_Abort_IT>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e20:	4610      	mov	r0, r2
 8002e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	e00e      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f990 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00a      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f98c 	bl	800314c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e006      	b.n	8002e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f988 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e42:	e170      	b.n	8003126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	bf00      	nop
    return;
 8002e46:	e16e      	b.n	8003126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 814a 	bne.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8143 	beq.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 813c 	beq.w	80030e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	f040 80b4 	bne.w	8002ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8140 	beq.w	800312a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	f080 8139 	bcs.w	800312a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eca:	f000 8088 	beq.w	8002fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1d9      	bne.n	8002ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e1      	bne.n	8002f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fea4 	bl	8001d26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8b6 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ff4:	e099      	b.n	800312a <HAL_UART_IRQHandler+0x50e>
 8002ff6:	bf00      	nop
 8002ff8:	08003397 	.word	0x08003397
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003004:	b29b      	uxth	r3, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 808b 	beq.w	800312e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8086 	beq.w	800312e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003046:	647a      	str	r2, [r7, #68]	; 0x44
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800304c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e3      	bne.n	8003022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	623b      	str	r3, [r7, #32]
   return(result);
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800307e:	633a      	str	r2, [r7, #48]	; 0x30
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e3      	bne.n	800305a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0310 	bic.w	r3, r3, #16
 80030b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	330c      	adds	r3, #12
 80030c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030c4:	61fa      	str	r2, [r7, #28]
 80030c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	617b      	str	r3, [r7, #20]
   return(result);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e3      	bne.n	80030a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f83e 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e4:	e023      	b.n	800312e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_UART_IRQHandler+0x4ea>
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f95d 	bl	80033be <UART_Transmit_IT>
    return;
 8003104:	e014      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <HAL_UART_IRQHandler+0x514>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f99d 	bl	800345e <UART_EndTransmit_IT>
    return;
 8003124:	e004      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
    return;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
      return;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <HAL_UART_IRQHandler+0x514>
      return;
 800312e:	bf00      	nop
  }
}
 8003130:	37e8      	adds	r7, #232	; 0xe8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b090      	sub	sp, #64	; 0x40
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003188:	e050      	b.n	800322c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d04c      	beq.n	800322c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003198:	f7fe fca8 	bl	8001aec <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d241      	bcs.n	800322c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c8:	637a      	str	r2, [r7, #52]	; 0x34
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e5      	bne.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	613b      	str	r3, [r7, #16]
   return(result);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fc:	623a      	str	r2, [r7, #32]
 80031fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	69f9      	ldr	r1, [r7, #28]
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	61bb      	str	r3, [r7, #24]
   return(result);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e00f      	b.n	800324c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	d09f      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3740      	adds	r7, #64	; 0x40
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2222      	movs	r2, #34	; 0x22
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0220 	orr.w	r2, r2, #32
 80032c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b095      	sub	sp, #84	; 0x54
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e2:	e853 3f00 	ldrex	r3, [r3]
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032f8:	643a      	str	r2, [r7, #64]	; 0x40
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e5      	bne.n	80032d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3314      	adds	r3, #20
 8003312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	e853 3f00 	ldrex	r3, [r3]
 800331a:	61fb      	str	r3, [r7, #28]
   return(result);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	64bb      	str	r3, [r7, #72]	; 0x48
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800332c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003334:	e841 2300 	strex	r3, r2, [r1]
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e5      	bne.n	800330c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	2b01      	cmp	r3, #1
 8003346:	d119      	bne.n	800337c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	e853 3f00 	ldrex	r3, [r3]
 8003356:	60bb      	str	r3, [r7, #8]
   return(result);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f023 0310 	bic.w	r3, r3, #16
 800335e:	647b      	str	r3, [r7, #68]	; 0x44
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003368:	61ba      	str	r2, [r7, #24]
 800336a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6979      	ldr	r1, [r7, #20]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	e841 2300 	strex	r3, r2, [r1]
 8003374:	613b      	str	r3, [r7, #16]
   return(result);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e5      	bne.n	8003348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800338a:	bf00      	nop
 800338c:	3754      	adds	r7, #84	; 0x54
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff fecb 	bl	800314c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b21      	cmp	r3, #33	; 0x21
 80033d0:	d13e      	bne.n	8003450 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d114      	bne.n	8003406 <UART_Transmit_IT+0x48>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d110      	bne.n	8003406 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	1c9a      	adds	r2, r3, #2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	e008      	b.n	8003418 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6211      	str	r1, [r2, #32]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29b      	uxth	r3, r3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4619      	mov	r1, r3
 8003426:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800344a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003474:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff fe5a 	bl	8003138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08c      	sub	sp, #48	; 0x30
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b22      	cmp	r3, #34	; 0x22
 80034a0:	f040 80ab 	bne.w	80035fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d117      	bne.n	80034de <UART_Receive_IT+0x50>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d113      	bne.n	80034de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
 80034dc:	e026      	b.n	800352c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d007      	beq.n	8003502 <UART_Receive_IT+0x74>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10a      	bne.n	8003510 <UART_Receive_IT+0x82>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e008      	b.n	8003522 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351c:	b2da      	uxtb	r2, r3
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4619      	mov	r1, r3
 800353a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800353c:	2b00      	cmp	r3, #0
 800353e:	d15a      	bne.n	80035f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0220 	bic.w	r2, r2, #32
 800354e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800355e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	2b01      	cmp	r3, #1
 800357e:	d135      	bne.n	80035ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	613b      	str	r3, [r7, #16]
   return(result);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f023 0310 	bic.w	r3, r3, #16
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	623a      	str	r2, [r7, #32]
 80035a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	69f9      	ldr	r1, [r7, #28]
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e5      	bne.n	8003586 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d10a      	bne.n	80035de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fdbb 	bl	8003160 <HAL_UARTEx_RxEventCallback>
 80035ea:	e002      	b.n	80035f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fe f807 	bl	8001600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e002      	b.n	80035fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b0c0      	sub	sp, #256	; 0x100
 800360a:	af00      	add	r7, sp, #0
 800360c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	ea40 0301 	orr.w	r3, r0, r1
 800362c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800365c:	f021 010c 	bic.w	r1, r1, #12
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800366a:	430b      	orrs	r3, r1
 800366c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367e:	6999      	ldr	r1, [r3, #24]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	ea40 0301 	orr.w	r3, r0, r1
 800368a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <UART_SetConfig+0x2cc>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d005      	beq.n	80036a4 <UART_SetConfig+0xa0>
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b8d      	ldr	r3, [pc, #564]	; (80038d4 <UART_SetConfig+0x2d0>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d104      	bne.n	80036ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7fe ff12 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 80036a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036ac:	e003      	b.n	80036b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ae:	f7fe fef9 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 80036b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	f040 810c 	bne.w	80038dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c8:	2200      	movs	r2, #0
 80036ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036d6:	4622      	mov	r2, r4
 80036d8:	462b      	mov	r3, r5
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80036de:	415b      	adcs	r3, r3
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036e6:	4621      	mov	r1, r4
 80036e8:	eb12 0801 	adds.w	r8, r2, r1
 80036ec:	4629      	mov	r1, r5
 80036ee:	eb43 0901 	adc.w	r9, r3, r1
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003706:	4690      	mov	r8, r2
 8003708:	4699      	mov	r9, r3
 800370a:	4623      	mov	r3, r4
 800370c:	eb18 0303 	adds.w	r3, r8, r3
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003714:	462b      	mov	r3, r5
 8003716:	eb49 0303 	adc.w	r3, r9, r3
 800371a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800372a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800372e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003732:	460b      	mov	r3, r1
 8003734:	18db      	adds	r3, r3, r3
 8003736:	653b      	str	r3, [r7, #80]	; 0x50
 8003738:	4613      	mov	r3, r2
 800373a:	eb42 0303 	adc.w	r3, r2, r3
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
 8003740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003748:	f7fd fabe 	bl	8000cc8 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003752:	fba3 2302 	umull	r2, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	011c      	lsls	r4, r3, #4
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	64b9      	str	r1, [r7, #72]	; 0x48
 8003774:	415b      	adcs	r3, r3
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800377c:	4641      	mov	r1, r8
 800377e:	eb12 0a01 	adds.w	sl, r2, r1
 8003782:	4649      	mov	r1, r9
 8003784:	eb43 0b01 	adc.w	fp, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800379c:	4692      	mov	sl, r2
 800379e:	469b      	mov	fp, r3
 80037a0:	4643      	mov	r3, r8
 80037a2:	eb1a 0303 	adds.w	r3, sl, r3
 80037a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037aa:	464b      	mov	r3, r9
 80037ac:	eb4b 0303 	adc.w	r3, fp, r3
 80037b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037c8:	460b      	mov	r3, r1
 80037ca:	18db      	adds	r3, r3, r3
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
 80037ce:	4613      	mov	r3, r2
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
 80037d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037de:	f7fd fa73 	bl	8000cc8 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <UART_SetConfig+0x2d4>)
 80037ea:	fba3 2301 	umull	r2, r3, r3, r1
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	; 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1acb      	subs	r3, r1, r3
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003800:	fba3 2302 	umull	r2, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800380c:	441c      	add	r4, r3
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800381c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	63b9      	str	r1, [r7, #56]	; 0x38
 8003828:	415b      	adcs	r3, r3
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003830:	4641      	mov	r1, r8
 8003832:	1851      	adds	r1, r2, r1
 8003834:	6339      	str	r1, [r7, #48]	; 0x30
 8003836:	4649      	mov	r1, r9
 8003838:	414b      	adcs	r3, r1
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003848:	4659      	mov	r1, fp
 800384a:	00cb      	lsls	r3, r1, #3
 800384c:	4651      	mov	r1, sl
 800384e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003852:	4651      	mov	r1, sl
 8003854:	00ca      	lsls	r2, r1, #3
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	4603      	mov	r3, r0
 800385c:	4642      	mov	r2, r8
 800385e:	189b      	adds	r3, r3, r2
 8003860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003864:	464b      	mov	r3, r9
 8003866:	460a      	mov	r2, r1
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800387c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003884:	460b      	mov	r3, r1
 8003886:	18db      	adds	r3, r3, r3
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 800388a:	4613      	mov	r3, r2
 800388c:	eb42 0303 	adc.w	r3, r2, r3
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800389a:	f7fd fa15 	bl	8000cc8 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2164      	movs	r1, #100	; 0x64
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	f003 0207 	and.w	r2, r3, #7
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4422      	add	r2, r4
 80038ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038cc:	e105      	b.n	8003ada <UART_SetConfig+0x4d6>
 80038ce:	bf00      	nop
 80038d0:	40011000 	.word	0x40011000
 80038d4:	40011400 	.word	0x40011400
 80038d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	1891      	adds	r1, r2, r2
 80038f4:	6239      	str	r1, [r7, #32]
 80038f6:	415b      	adcs	r3, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038fe:	4641      	mov	r1, r8
 8003900:	1854      	adds	r4, r2, r1
 8003902:	4649      	mov	r1, r9
 8003904:	eb43 0501 	adc.w	r5, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003924:	464b      	mov	r3, r9
 8003926:	eb45 0303 	adc.w	r3, r5, r3
 800392a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800393a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800394a:	4629      	mov	r1, r5
 800394c:	008b      	lsls	r3, r1, #2
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003954:	4621      	mov	r1, r4
 8003956:	008a      	lsls	r2, r1, #2
 8003958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800395c:	f7fd f9b4 	bl	8000cc8 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4b60      	ldr	r3, [pc, #384]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003966:	fba3 2302 	umull	r2, r3, r3, r2
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	011c      	lsls	r4, r3, #4
 800396e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800397c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	1891      	adds	r1, r2, r2
 8003986:	61b9      	str	r1, [r7, #24]
 8003988:	415b      	adcs	r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003990:	4641      	mov	r1, r8
 8003992:	1851      	adds	r1, r2, r1
 8003994:	6139      	str	r1, [r7, #16]
 8003996:	4649      	mov	r1, r9
 8003998:	414b      	adcs	r3, r1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039a8:	4659      	mov	r1, fp
 80039aa:	00cb      	lsls	r3, r1, #3
 80039ac:	4651      	mov	r1, sl
 80039ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b2:	4651      	mov	r1, sl
 80039b4:	00ca      	lsls	r2, r1, #3
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	4642      	mov	r2, r8
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c4:	464b      	mov	r3, r9
 80039c6:	460a      	mov	r2, r1
 80039c8:	eb42 0303 	adc.w	r3, r2, r3
 80039cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039e8:	4649      	mov	r1, r9
 80039ea:	008b      	lsls	r3, r1, #2
 80039ec:	4641      	mov	r1, r8
 80039ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f2:	4641      	mov	r1, r8
 80039f4:	008a      	lsls	r2, r1, #2
 80039f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039fa:	f7fd f965 	bl	8000cc8 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a04:	fba3 1302 	umull	r1, r3, r3, r2
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	2164      	movs	r1, #100	; 0x64
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	3332      	adds	r3, #50	; 0x32
 8003a16:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a22:	441c      	add	r4, r3
 8003a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a28:	2200      	movs	r2, #0
 8003a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a32:	4642      	mov	r2, r8
 8003a34:	464b      	mov	r3, r9
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a42:	4641      	mov	r1, r8
 8003a44:	1851      	adds	r1, r2, r1
 8003a46:	6039      	str	r1, [r7, #0]
 8003a48:	4649      	mov	r1, r9
 8003a4a:	414b      	adcs	r3, r1
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a5a:	4659      	mov	r1, fp
 8003a5c:	00cb      	lsls	r3, r1, #3
 8003a5e:	4651      	mov	r1, sl
 8003a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a64:	4651      	mov	r1, sl
 8003a66:	00ca      	lsls	r2, r1, #3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4642      	mov	r2, r8
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	663b      	str	r3, [r7, #96]	; 0x60
 8003a88:	667a      	str	r2, [r7, #100]	; 0x64
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a96:	4649      	mov	r1, r9
 8003a98:	008b      	lsls	r3, r1, #2
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	008a      	lsls	r2, r1, #2
 8003aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003aa8:	f7fd f90e 	bl	8000cc8 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2164      	movs	r1, #100	; 0x64
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4422      	add	r2, r4
 8003ad8:	609a      	str	r2, [r3, #8]
}
 8003ada:	bf00      	nop
 8003adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	51eb851f 	.word	0x51eb851f

08003aec <atof>:
 8003aec:	2100      	movs	r1, #0
 8003aee:	f001 baf5 	b.w	80050dc <strtod>
	...

08003af4 <__errno>:
 8003af4:	4b01      	ldr	r3, [pc, #4]	; (8003afc <__errno+0x8>)
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	2000001c 	.word	0x2000001c

08003b00 <__libc_init_array>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	4d0d      	ldr	r5, [pc, #52]	; (8003b38 <__libc_init_array+0x38>)
 8003b04:	4c0d      	ldr	r4, [pc, #52]	; (8003b3c <__libc_init_array+0x3c>)
 8003b06:	1b64      	subs	r4, r4, r5
 8003b08:	10a4      	asrs	r4, r4, #2
 8003b0a:	2600      	movs	r6, #0
 8003b0c:	42a6      	cmp	r6, r4
 8003b0e:	d109      	bne.n	8003b24 <__libc_init_array+0x24>
 8003b10:	4d0b      	ldr	r5, [pc, #44]	; (8003b40 <__libc_init_array+0x40>)
 8003b12:	4c0c      	ldr	r4, [pc, #48]	; (8003b44 <__libc_init_array+0x44>)
 8003b14:	f004 fa00 	bl	8007f18 <_init>
 8003b18:	1b64      	subs	r4, r4, r5
 8003b1a:	10a4      	asrs	r4, r4, #2
 8003b1c:	2600      	movs	r6, #0
 8003b1e:	42a6      	cmp	r6, r4
 8003b20:	d105      	bne.n	8003b2e <__libc_init_array+0x2e>
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b28:	4798      	blx	r3
 8003b2a:	3601      	adds	r6, #1
 8003b2c:	e7ee      	b.n	8003b0c <__libc_init_array+0xc>
 8003b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b32:	4798      	blx	r3
 8003b34:	3601      	adds	r6, #1
 8003b36:	e7f2      	b.n	8003b1e <__libc_init_array+0x1e>
 8003b38:	0800846c 	.word	0x0800846c
 8003b3c:	0800846c 	.word	0x0800846c
 8003b40:	0800846c 	.word	0x0800846c
 8003b44:	08008470 	.word	0x08008470

08003b48 <memset>:
 8003b48:	4402      	add	r2, r0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <memset+0xa>
 8003b50:	4770      	bx	lr
 8003b52:	f803 1b01 	strb.w	r1, [r3], #1
 8003b56:	e7f9      	b.n	8003b4c <memset+0x4>

08003b58 <__cvt>:
 8003b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	ec55 4b10 	vmov	r4, r5, d0
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	460e      	mov	r6, r1
 8003b64:	4619      	mov	r1, r3
 8003b66:	462b      	mov	r3, r5
 8003b68:	bfbb      	ittet	lt
 8003b6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b6e:	461d      	movlt	r5, r3
 8003b70:	2300      	movge	r3, #0
 8003b72:	232d      	movlt	r3, #45	; 0x2d
 8003b74:	700b      	strb	r3, [r1, #0]
 8003b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b7c:	4691      	mov	r9, r2
 8003b7e:	f023 0820 	bic.w	r8, r3, #32
 8003b82:	bfbc      	itt	lt
 8003b84:	4622      	movlt	r2, r4
 8003b86:	4614      	movlt	r4, r2
 8003b88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b8c:	d005      	beq.n	8003b9a <__cvt+0x42>
 8003b8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b92:	d100      	bne.n	8003b96 <__cvt+0x3e>
 8003b94:	3601      	adds	r6, #1
 8003b96:	2102      	movs	r1, #2
 8003b98:	e000      	b.n	8003b9c <__cvt+0x44>
 8003b9a:	2103      	movs	r1, #3
 8003b9c:	ab03      	add	r3, sp, #12
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	ab02      	add	r3, sp, #8
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	ec45 4b10 	vmov	d0, r4, r5
 8003ba8:	4653      	mov	r3, sl
 8003baa:	4632      	mov	r2, r6
 8003bac:	f001 fb30 	bl	8005210 <_dtoa_r>
 8003bb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003bb4:	4607      	mov	r7, r0
 8003bb6:	d102      	bne.n	8003bbe <__cvt+0x66>
 8003bb8:	f019 0f01 	tst.w	r9, #1
 8003bbc:	d022      	beq.n	8003c04 <__cvt+0xac>
 8003bbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bc2:	eb07 0906 	add.w	r9, r7, r6
 8003bc6:	d110      	bne.n	8003bea <__cvt+0x92>
 8003bc8:	783b      	ldrb	r3, [r7, #0]
 8003bca:	2b30      	cmp	r3, #48	; 0x30
 8003bcc:	d10a      	bne.n	8003be4 <__cvt+0x8c>
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f7fc ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8003bda:	b918      	cbnz	r0, 8003be4 <__cvt+0x8c>
 8003bdc:	f1c6 0601 	rsb	r6, r6, #1
 8003be0:	f8ca 6000 	str.w	r6, [sl]
 8003be4:	f8da 3000 	ldr.w	r3, [sl]
 8003be8:	4499      	add	r9, r3
 8003bea:	2200      	movs	r2, #0
 8003bec:	2300      	movs	r3, #0
 8003bee:	4620      	mov	r0, r4
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f7fc ff89 	bl	8000b08 <__aeabi_dcmpeq>
 8003bf6:	b108      	cbz	r0, 8003bfc <__cvt+0xa4>
 8003bf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bfc:	2230      	movs	r2, #48	; 0x30
 8003bfe:	9b03      	ldr	r3, [sp, #12]
 8003c00:	454b      	cmp	r3, r9
 8003c02:	d307      	bcc.n	8003c14 <__cvt+0xbc>
 8003c04:	9b03      	ldr	r3, [sp, #12]
 8003c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c08:	1bdb      	subs	r3, r3, r7
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	b004      	add	sp, #16
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	9103      	str	r1, [sp, #12]
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	e7f0      	b.n	8003bfe <__cvt+0xa6>

08003c1c <__exponent>:
 8003c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2900      	cmp	r1, #0
 8003c22:	bfb8      	it	lt
 8003c24:	4249      	neglt	r1, r1
 8003c26:	f803 2b02 	strb.w	r2, [r3], #2
 8003c2a:	bfb4      	ite	lt
 8003c2c:	222d      	movlt	r2, #45	; 0x2d
 8003c2e:	222b      	movge	r2, #43	; 0x2b
 8003c30:	2909      	cmp	r1, #9
 8003c32:	7042      	strb	r2, [r0, #1]
 8003c34:	dd2a      	ble.n	8003c8c <__exponent+0x70>
 8003c36:	f10d 0407 	add.w	r4, sp, #7
 8003c3a:	46a4      	mov	ip, r4
 8003c3c:	270a      	movs	r7, #10
 8003c3e:	46a6      	mov	lr, r4
 8003c40:	460a      	mov	r2, r1
 8003c42:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c46:	fb07 1516 	mls	r5, r7, r6, r1
 8003c4a:	3530      	adds	r5, #48	; 0x30
 8003c4c:	2a63      	cmp	r2, #99	; 0x63
 8003c4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c56:	4631      	mov	r1, r6
 8003c58:	dcf1      	bgt.n	8003c3e <__exponent+0x22>
 8003c5a:	3130      	adds	r1, #48	; 0x30
 8003c5c:	f1ae 0502 	sub.w	r5, lr, #2
 8003c60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c64:	1c44      	adds	r4, r0, #1
 8003c66:	4629      	mov	r1, r5
 8003c68:	4561      	cmp	r1, ip
 8003c6a:	d30a      	bcc.n	8003c82 <__exponent+0x66>
 8003c6c:	f10d 0209 	add.w	r2, sp, #9
 8003c70:	eba2 020e 	sub.w	r2, r2, lr
 8003c74:	4565      	cmp	r5, ip
 8003c76:	bf88      	it	hi
 8003c78:	2200      	movhi	r2, #0
 8003c7a:	4413      	add	r3, r2
 8003c7c:	1a18      	subs	r0, r3, r0
 8003c7e:	b003      	add	sp, #12
 8003c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c8a:	e7ed      	b.n	8003c68 <__exponent+0x4c>
 8003c8c:	2330      	movs	r3, #48	; 0x30
 8003c8e:	3130      	adds	r1, #48	; 0x30
 8003c90:	7083      	strb	r3, [r0, #2]
 8003c92:	70c1      	strb	r1, [r0, #3]
 8003c94:	1d03      	adds	r3, r0, #4
 8003c96:	e7f1      	b.n	8003c7c <__exponent+0x60>

08003c98 <_printf_float>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	ed2d 8b02 	vpush	{d8}
 8003ca0:	b08d      	sub	sp, #52	; 0x34
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ca8:	4616      	mov	r6, r2
 8003caa:	461f      	mov	r7, r3
 8003cac:	4605      	mov	r5, r0
 8003cae:	f002 fc0d 	bl	80064cc <_localeconv_r>
 8003cb2:	f8d0 a000 	ldr.w	sl, [r0]
 8003cb6:	4650      	mov	r0, sl
 8003cb8:	f7fc faaa 	bl	8000210 <strlen>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	9305      	str	r3, [sp, #20]
 8003cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	f023 0307 	bic.w	r3, r3, #7
 8003cd2:	f103 0208 	add.w	r2, r3, #8
 8003cd6:	f8c8 2000 	str.w	r2, [r8]
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ce2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ce6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cea:	9307      	str	r3, [sp, #28]
 8003cec:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cf0:	ee08 0a10 	vmov	s16, r0
 8003cf4:	4b9f      	ldr	r3, [pc, #636]	; (8003f74 <_printf_float+0x2dc>)
 8003cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfe:	f7fc ff35 	bl	8000b6c <__aeabi_dcmpun>
 8003d02:	bb88      	cbnz	r0, 8003d68 <_printf_float+0xd0>
 8003d04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d08:	4b9a      	ldr	r3, [pc, #616]	; (8003f74 <_printf_float+0x2dc>)
 8003d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0e:	f7fc ff0f 	bl	8000b30 <__aeabi_dcmple>
 8003d12:	bb48      	cbnz	r0, 8003d68 <_printf_float+0xd0>
 8003d14:	2200      	movs	r2, #0
 8003d16:	2300      	movs	r3, #0
 8003d18:	4640      	mov	r0, r8
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	f7fc fefe 	bl	8000b1c <__aeabi_dcmplt>
 8003d20:	b110      	cbz	r0, 8003d28 <_printf_float+0x90>
 8003d22:	232d      	movs	r3, #45	; 0x2d
 8003d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d28:	4b93      	ldr	r3, [pc, #588]	; (8003f78 <_printf_float+0x2e0>)
 8003d2a:	4894      	ldr	r0, [pc, #592]	; (8003f7c <_printf_float+0x2e4>)
 8003d2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d30:	bf94      	ite	ls
 8003d32:	4698      	movls	r8, r3
 8003d34:	4680      	movhi	r8, r0
 8003d36:	2303      	movs	r3, #3
 8003d38:	6123      	str	r3, [r4, #16]
 8003d3a:	9b05      	ldr	r3, [sp, #20]
 8003d3c:	f023 0204 	bic.w	r2, r3, #4
 8003d40:	6022      	str	r2, [r4, #0]
 8003d42:	f04f 0900 	mov.w	r9, #0
 8003d46:	9700      	str	r7, [sp, #0]
 8003d48:	4633      	mov	r3, r6
 8003d4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f000 f9d8 	bl	8004104 <_printf_common>
 8003d54:	3001      	adds	r0, #1
 8003d56:	f040 8090 	bne.w	8003e7a <_printf_float+0x1e2>
 8003d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5e:	b00d      	add	sp, #52	; 0x34
 8003d60:	ecbd 8b02 	vpop	{d8}
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	4642      	mov	r2, r8
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	4649      	mov	r1, r9
 8003d70:	f7fc fefc 	bl	8000b6c <__aeabi_dcmpun>
 8003d74:	b140      	cbz	r0, 8003d88 <_printf_float+0xf0>
 8003d76:	464b      	mov	r3, r9
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bfbc      	itt	lt
 8003d7c:	232d      	movlt	r3, #45	; 0x2d
 8003d7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d82:	487f      	ldr	r0, [pc, #508]	; (8003f80 <_printf_float+0x2e8>)
 8003d84:	4b7f      	ldr	r3, [pc, #508]	; (8003f84 <_printf_float+0x2ec>)
 8003d86:	e7d1      	b.n	8003d2c <_printf_float+0x94>
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d8e:	9206      	str	r2, [sp, #24]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	d13f      	bne.n	8003e14 <_printf_float+0x17c>
 8003d94:	2306      	movs	r3, #6
 8003d96:	6063      	str	r3, [r4, #4]
 8003d98:	9b05      	ldr	r3, [sp, #20]
 8003d9a:	6861      	ldr	r1, [r4, #4]
 8003d9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003da0:	2300      	movs	r3, #0
 8003da2:	9303      	str	r3, [sp, #12]
 8003da4:	ab0a      	add	r3, sp, #40	; 0x28
 8003da6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003daa:	ab09      	add	r3, sp, #36	; 0x24
 8003dac:	ec49 8b10 	vmov	d0, r8, r9
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	6022      	str	r2, [r4, #0]
 8003db4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003db8:	4628      	mov	r0, r5
 8003dba:	f7ff fecd 	bl	8003b58 <__cvt>
 8003dbe:	9b06      	ldr	r3, [sp, #24]
 8003dc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dc2:	2b47      	cmp	r3, #71	; 0x47
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	d108      	bne.n	8003dda <_printf_float+0x142>
 8003dc8:	1cc8      	adds	r0, r1, #3
 8003dca:	db02      	blt.n	8003dd2 <_printf_float+0x13a>
 8003dcc:	6863      	ldr	r3, [r4, #4]
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	dd41      	ble.n	8003e56 <_printf_float+0x1be>
 8003dd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8003dd6:	fa5f fb8b 	uxtb.w	fp, fp
 8003dda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003dde:	d820      	bhi.n	8003e22 <_printf_float+0x18a>
 8003de0:	3901      	subs	r1, #1
 8003de2:	465a      	mov	r2, fp
 8003de4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003de8:	9109      	str	r1, [sp, #36]	; 0x24
 8003dea:	f7ff ff17 	bl	8003c1c <__exponent>
 8003dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003df0:	1813      	adds	r3, r2, r0
 8003df2:	2a01      	cmp	r2, #1
 8003df4:	4681      	mov	r9, r0
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	dc02      	bgt.n	8003e00 <_printf_float+0x168>
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	07d2      	lsls	r2, r2, #31
 8003dfe:	d501      	bpl.n	8003e04 <_printf_float+0x16c>
 8003e00:	3301      	adds	r3, #1
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d09c      	beq.n	8003d46 <_printf_float+0xae>
 8003e0c:	232d      	movs	r3, #45	; 0x2d
 8003e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e12:	e798      	b.n	8003d46 <_printf_float+0xae>
 8003e14:	9a06      	ldr	r2, [sp, #24]
 8003e16:	2a47      	cmp	r2, #71	; 0x47
 8003e18:	d1be      	bne.n	8003d98 <_printf_float+0x100>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1bc      	bne.n	8003d98 <_printf_float+0x100>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e7b9      	b.n	8003d96 <_printf_float+0xfe>
 8003e22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e26:	d118      	bne.n	8003e5a <_printf_float+0x1c2>
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	dd0b      	ble.n	8003e46 <_printf_float+0x1ae>
 8003e2e:	6121      	str	r1, [r4, #16]
 8003e30:	b913      	cbnz	r3, 8003e38 <_printf_float+0x1a0>
 8003e32:	6822      	ldr	r2, [r4, #0]
 8003e34:	07d0      	lsls	r0, r2, #31
 8003e36:	d502      	bpl.n	8003e3e <_printf_float+0x1a6>
 8003e38:	3301      	adds	r3, #1
 8003e3a:	440b      	add	r3, r1
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e40:	f04f 0900 	mov.w	r9, #0
 8003e44:	e7de      	b.n	8003e04 <_printf_float+0x16c>
 8003e46:	b913      	cbnz	r3, 8003e4e <_printf_float+0x1b6>
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	07d2      	lsls	r2, r2, #31
 8003e4c:	d501      	bpl.n	8003e52 <_printf_float+0x1ba>
 8003e4e:	3302      	adds	r3, #2
 8003e50:	e7f4      	b.n	8003e3c <_printf_float+0x1a4>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e7f2      	b.n	8003e3c <_printf_float+0x1a4>
 8003e56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e5c:	4299      	cmp	r1, r3
 8003e5e:	db05      	blt.n	8003e6c <_printf_float+0x1d4>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	6121      	str	r1, [r4, #16]
 8003e64:	07d8      	lsls	r0, r3, #31
 8003e66:	d5ea      	bpl.n	8003e3e <_printf_float+0x1a6>
 8003e68:	1c4b      	adds	r3, r1, #1
 8003e6a:	e7e7      	b.n	8003e3c <_printf_float+0x1a4>
 8003e6c:	2900      	cmp	r1, #0
 8003e6e:	bfd4      	ite	le
 8003e70:	f1c1 0202 	rsble	r2, r1, #2
 8003e74:	2201      	movgt	r2, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	e7e0      	b.n	8003e3c <_printf_float+0x1a4>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	055a      	lsls	r2, r3, #21
 8003e7e:	d407      	bmi.n	8003e90 <_printf_float+0x1f8>
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	4642      	mov	r2, r8
 8003e84:	4631      	mov	r1, r6
 8003e86:	4628      	mov	r0, r5
 8003e88:	47b8      	blx	r7
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d12c      	bne.n	8003ee8 <_printf_float+0x250>
 8003e8e:	e764      	b.n	8003d5a <_printf_float+0xc2>
 8003e90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e94:	f240 80e0 	bls.w	8004058 <_printf_float+0x3c0>
 8003e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f7fc fe32 	bl	8000b08 <__aeabi_dcmpeq>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d034      	beq.n	8003f12 <_printf_float+0x27a>
 8003ea8:	4a37      	ldr	r2, [pc, #220]	; (8003f88 <_printf_float+0x2f0>)
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4631      	mov	r1, r6
 8003eae:	4628      	mov	r0, r5
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f43f af51 	beq.w	8003d5a <_printf_float+0xc2>
 8003eb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	db02      	blt.n	8003ec6 <_printf_float+0x22e>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	07d8      	lsls	r0, r3, #31
 8003ec4:	d510      	bpl.n	8003ee8 <_printf_float+0x250>
 8003ec6:	ee18 3a10 	vmov	r3, s16
 8003eca:	4652      	mov	r2, sl
 8003ecc:	4631      	mov	r1, r6
 8003ece:	4628      	mov	r0, r5
 8003ed0:	47b8      	blx	r7
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	f43f af41 	beq.w	8003d5a <_printf_float+0xc2>
 8003ed8:	f04f 0800 	mov.w	r8, #0
 8003edc:	f104 091a 	add.w	r9, r4, #26
 8003ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	4543      	cmp	r3, r8
 8003ee6:	dc09      	bgt.n	8003efc <_printf_float+0x264>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	079b      	lsls	r3, r3, #30
 8003eec:	f100 8105 	bmi.w	80040fa <_printf_float+0x462>
 8003ef0:	68e0      	ldr	r0, [r4, #12]
 8003ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ef4:	4298      	cmp	r0, r3
 8003ef6:	bfb8      	it	lt
 8003ef8:	4618      	movlt	r0, r3
 8003efa:	e730      	b.n	8003d5e <_printf_float+0xc6>
 8003efc:	2301      	movs	r3, #1
 8003efe:	464a      	mov	r2, r9
 8003f00:	4631      	mov	r1, r6
 8003f02:	4628      	mov	r0, r5
 8003f04:	47b8      	blx	r7
 8003f06:	3001      	adds	r0, #1
 8003f08:	f43f af27 	beq.w	8003d5a <_printf_float+0xc2>
 8003f0c:	f108 0801 	add.w	r8, r8, #1
 8003f10:	e7e6      	b.n	8003ee0 <_printf_float+0x248>
 8003f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	dc39      	bgt.n	8003f8c <_printf_float+0x2f4>
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <_printf_float+0x2f0>)
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	4628      	mov	r0, r5
 8003f20:	47b8      	blx	r7
 8003f22:	3001      	adds	r0, #1
 8003f24:	f43f af19 	beq.w	8003d5a <_printf_float+0xc2>
 8003f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	d102      	bne.n	8003f36 <_printf_float+0x29e>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	07d9      	lsls	r1, r3, #31
 8003f34:	d5d8      	bpl.n	8003ee8 <_printf_float+0x250>
 8003f36:	ee18 3a10 	vmov	r3, s16
 8003f3a:	4652      	mov	r2, sl
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4628      	mov	r0, r5
 8003f40:	47b8      	blx	r7
 8003f42:	3001      	adds	r0, #1
 8003f44:	f43f af09 	beq.w	8003d5a <_printf_float+0xc2>
 8003f48:	f04f 0900 	mov.w	r9, #0
 8003f4c:	f104 0a1a 	add.w	sl, r4, #26
 8003f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f52:	425b      	negs	r3, r3
 8003f54:	454b      	cmp	r3, r9
 8003f56:	dc01      	bgt.n	8003f5c <_printf_float+0x2c4>
 8003f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f5a:	e792      	b.n	8003e82 <_printf_float+0x1ea>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	4652      	mov	r2, sl
 8003f60:	4631      	mov	r1, r6
 8003f62:	4628      	mov	r0, r5
 8003f64:	47b8      	blx	r7
 8003f66:	3001      	adds	r0, #1
 8003f68:	f43f aef7 	beq.w	8003d5a <_printf_float+0xc2>
 8003f6c:	f109 0901 	add.w	r9, r9, #1
 8003f70:	e7ee      	b.n	8003f50 <_printf_float+0x2b8>
 8003f72:	bf00      	nop
 8003f74:	7fefffff 	.word	0x7fefffff
 8003f78:	08007fc8 	.word	0x08007fc8
 8003f7c:	08007fcc 	.word	0x08007fcc
 8003f80:	08007fd4 	.word	0x08007fd4
 8003f84:	08007fd0 	.word	0x08007fd0
 8003f88:	08007fd8 	.word	0x08007fd8
 8003f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f90:	429a      	cmp	r2, r3
 8003f92:	bfa8      	it	ge
 8003f94:	461a      	movge	r2, r3
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	4691      	mov	r9, r2
 8003f9a:	dc37      	bgt.n	800400c <_printf_float+0x374>
 8003f9c:	f04f 0b00 	mov.w	fp, #0
 8003fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fa4:	f104 021a 	add.w	r2, r4, #26
 8003fa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003faa:	9305      	str	r3, [sp, #20]
 8003fac:	eba3 0309 	sub.w	r3, r3, r9
 8003fb0:	455b      	cmp	r3, fp
 8003fb2:	dc33      	bgt.n	800401c <_printf_float+0x384>
 8003fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	db3b      	blt.n	8004034 <_printf_float+0x39c>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	07da      	lsls	r2, r3, #31
 8003fc0:	d438      	bmi.n	8004034 <_printf_float+0x39c>
 8003fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc4:	9a05      	ldr	r2, [sp, #20]
 8003fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fc8:	1a9a      	subs	r2, r3, r2
 8003fca:	eba3 0901 	sub.w	r9, r3, r1
 8003fce:	4591      	cmp	r9, r2
 8003fd0:	bfa8      	it	ge
 8003fd2:	4691      	movge	r9, r2
 8003fd4:	f1b9 0f00 	cmp.w	r9, #0
 8003fd8:	dc35      	bgt.n	8004046 <_printf_float+0x3ae>
 8003fda:	f04f 0800 	mov.w	r8, #0
 8003fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fe2:	f104 0a1a 	add.w	sl, r4, #26
 8003fe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	eba3 0309 	sub.w	r3, r3, r9
 8003ff0:	4543      	cmp	r3, r8
 8003ff2:	f77f af79 	ble.w	8003ee8 <_printf_float+0x250>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4652      	mov	r2, sl
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	47b8      	blx	r7
 8004000:	3001      	adds	r0, #1
 8004002:	f43f aeaa 	beq.w	8003d5a <_printf_float+0xc2>
 8004006:	f108 0801 	add.w	r8, r8, #1
 800400a:	e7ec      	b.n	8003fe6 <_printf_float+0x34e>
 800400c:	4613      	mov	r3, r2
 800400e:	4631      	mov	r1, r6
 8004010:	4642      	mov	r2, r8
 8004012:	4628      	mov	r0, r5
 8004014:	47b8      	blx	r7
 8004016:	3001      	adds	r0, #1
 8004018:	d1c0      	bne.n	8003f9c <_printf_float+0x304>
 800401a:	e69e      	b.n	8003d5a <_printf_float+0xc2>
 800401c:	2301      	movs	r3, #1
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	9205      	str	r2, [sp, #20]
 8004024:	47b8      	blx	r7
 8004026:	3001      	adds	r0, #1
 8004028:	f43f ae97 	beq.w	8003d5a <_printf_float+0xc2>
 800402c:	9a05      	ldr	r2, [sp, #20]
 800402e:	f10b 0b01 	add.w	fp, fp, #1
 8004032:	e7b9      	b.n	8003fa8 <_printf_float+0x310>
 8004034:	ee18 3a10 	vmov	r3, s16
 8004038:	4652      	mov	r2, sl
 800403a:	4631      	mov	r1, r6
 800403c:	4628      	mov	r0, r5
 800403e:	47b8      	blx	r7
 8004040:	3001      	adds	r0, #1
 8004042:	d1be      	bne.n	8003fc2 <_printf_float+0x32a>
 8004044:	e689      	b.n	8003d5a <_printf_float+0xc2>
 8004046:	9a05      	ldr	r2, [sp, #20]
 8004048:	464b      	mov	r3, r9
 800404a:	4442      	add	r2, r8
 800404c:	4631      	mov	r1, r6
 800404e:	4628      	mov	r0, r5
 8004050:	47b8      	blx	r7
 8004052:	3001      	adds	r0, #1
 8004054:	d1c1      	bne.n	8003fda <_printf_float+0x342>
 8004056:	e680      	b.n	8003d5a <_printf_float+0xc2>
 8004058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800405a:	2a01      	cmp	r2, #1
 800405c:	dc01      	bgt.n	8004062 <_printf_float+0x3ca>
 800405e:	07db      	lsls	r3, r3, #31
 8004060:	d538      	bpl.n	80040d4 <_printf_float+0x43c>
 8004062:	2301      	movs	r3, #1
 8004064:	4642      	mov	r2, r8
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	f43f ae74 	beq.w	8003d5a <_printf_float+0xc2>
 8004072:	ee18 3a10 	vmov	r3, s16
 8004076:	4652      	mov	r2, sl
 8004078:	4631      	mov	r1, r6
 800407a:	4628      	mov	r0, r5
 800407c:	47b8      	blx	r7
 800407e:	3001      	adds	r0, #1
 8004080:	f43f ae6b 	beq.w	8003d5a <_printf_float+0xc2>
 8004084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004088:	2200      	movs	r2, #0
 800408a:	2300      	movs	r3, #0
 800408c:	f7fc fd3c 	bl	8000b08 <__aeabi_dcmpeq>
 8004090:	b9d8      	cbnz	r0, 80040ca <_printf_float+0x432>
 8004092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004094:	f108 0201 	add.w	r2, r8, #1
 8004098:	3b01      	subs	r3, #1
 800409a:	4631      	mov	r1, r6
 800409c:	4628      	mov	r0, r5
 800409e:	47b8      	blx	r7
 80040a0:	3001      	adds	r0, #1
 80040a2:	d10e      	bne.n	80040c2 <_printf_float+0x42a>
 80040a4:	e659      	b.n	8003d5a <_printf_float+0xc2>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4652      	mov	r2, sl
 80040aa:	4631      	mov	r1, r6
 80040ac:	4628      	mov	r0, r5
 80040ae:	47b8      	blx	r7
 80040b0:	3001      	adds	r0, #1
 80040b2:	f43f ae52 	beq.w	8003d5a <_printf_float+0xc2>
 80040b6:	f108 0801 	add.w	r8, r8, #1
 80040ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	4543      	cmp	r3, r8
 80040c0:	dcf1      	bgt.n	80040a6 <_printf_float+0x40e>
 80040c2:	464b      	mov	r3, r9
 80040c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040c8:	e6dc      	b.n	8003e84 <_printf_float+0x1ec>
 80040ca:	f04f 0800 	mov.w	r8, #0
 80040ce:	f104 0a1a 	add.w	sl, r4, #26
 80040d2:	e7f2      	b.n	80040ba <_printf_float+0x422>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4642      	mov	r2, r8
 80040d8:	e7df      	b.n	800409a <_printf_float+0x402>
 80040da:	2301      	movs	r3, #1
 80040dc:	464a      	mov	r2, r9
 80040de:	4631      	mov	r1, r6
 80040e0:	4628      	mov	r0, r5
 80040e2:	47b8      	blx	r7
 80040e4:	3001      	adds	r0, #1
 80040e6:	f43f ae38 	beq.w	8003d5a <_printf_float+0xc2>
 80040ea:	f108 0801 	add.w	r8, r8, #1
 80040ee:	68e3      	ldr	r3, [r4, #12]
 80040f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040f2:	1a5b      	subs	r3, r3, r1
 80040f4:	4543      	cmp	r3, r8
 80040f6:	dcf0      	bgt.n	80040da <_printf_float+0x442>
 80040f8:	e6fa      	b.n	8003ef0 <_printf_float+0x258>
 80040fa:	f04f 0800 	mov.w	r8, #0
 80040fe:	f104 0919 	add.w	r9, r4, #25
 8004102:	e7f4      	b.n	80040ee <_printf_float+0x456>

08004104 <_printf_common>:
 8004104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	4616      	mov	r6, r2
 800410a:	4699      	mov	r9, r3
 800410c:	688a      	ldr	r2, [r1, #8]
 800410e:	690b      	ldr	r3, [r1, #16]
 8004110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004114:	4293      	cmp	r3, r2
 8004116:	bfb8      	it	lt
 8004118:	4613      	movlt	r3, r2
 800411a:	6033      	str	r3, [r6, #0]
 800411c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004120:	4607      	mov	r7, r0
 8004122:	460c      	mov	r4, r1
 8004124:	b10a      	cbz	r2, 800412a <_printf_common+0x26>
 8004126:	3301      	adds	r3, #1
 8004128:	6033      	str	r3, [r6, #0]
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	0699      	lsls	r1, r3, #26
 800412e:	bf42      	ittt	mi
 8004130:	6833      	ldrmi	r3, [r6, #0]
 8004132:	3302      	addmi	r3, #2
 8004134:	6033      	strmi	r3, [r6, #0]
 8004136:	6825      	ldr	r5, [r4, #0]
 8004138:	f015 0506 	ands.w	r5, r5, #6
 800413c:	d106      	bne.n	800414c <_printf_common+0x48>
 800413e:	f104 0a19 	add.w	sl, r4, #25
 8004142:	68e3      	ldr	r3, [r4, #12]
 8004144:	6832      	ldr	r2, [r6, #0]
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	42ab      	cmp	r3, r5
 800414a:	dc26      	bgt.n	800419a <_printf_common+0x96>
 800414c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004150:	1e13      	subs	r3, r2, #0
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	bf18      	it	ne
 8004156:	2301      	movne	r3, #1
 8004158:	0692      	lsls	r2, r2, #26
 800415a:	d42b      	bmi.n	80041b4 <_printf_common+0xb0>
 800415c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004160:	4649      	mov	r1, r9
 8004162:	4638      	mov	r0, r7
 8004164:	47c0      	blx	r8
 8004166:	3001      	adds	r0, #1
 8004168:	d01e      	beq.n	80041a8 <_printf_common+0xa4>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	68e5      	ldr	r5, [r4, #12]
 800416e:	6832      	ldr	r2, [r6, #0]
 8004170:	f003 0306 	and.w	r3, r3, #6
 8004174:	2b04      	cmp	r3, #4
 8004176:	bf08      	it	eq
 8004178:	1aad      	subeq	r5, r5, r2
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	6922      	ldr	r2, [r4, #16]
 800417e:	bf0c      	ite	eq
 8004180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004184:	2500      	movne	r5, #0
 8004186:	4293      	cmp	r3, r2
 8004188:	bfc4      	itt	gt
 800418a:	1a9b      	subgt	r3, r3, r2
 800418c:	18ed      	addgt	r5, r5, r3
 800418e:	2600      	movs	r6, #0
 8004190:	341a      	adds	r4, #26
 8004192:	42b5      	cmp	r5, r6
 8004194:	d11a      	bne.n	80041cc <_printf_common+0xc8>
 8004196:	2000      	movs	r0, #0
 8004198:	e008      	b.n	80041ac <_printf_common+0xa8>
 800419a:	2301      	movs	r3, #1
 800419c:	4652      	mov	r2, sl
 800419e:	4649      	mov	r1, r9
 80041a0:	4638      	mov	r0, r7
 80041a2:	47c0      	blx	r8
 80041a4:	3001      	adds	r0, #1
 80041a6:	d103      	bne.n	80041b0 <_printf_common+0xac>
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b0:	3501      	adds	r5, #1
 80041b2:	e7c6      	b.n	8004142 <_printf_common+0x3e>
 80041b4:	18e1      	adds	r1, r4, r3
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	2030      	movs	r0, #48	; 0x30
 80041ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041be:	4422      	add	r2, r4
 80041c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c8:	3302      	adds	r3, #2
 80041ca:	e7c7      	b.n	800415c <_printf_common+0x58>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4622      	mov	r2, r4
 80041d0:	4649      	mov	r1, r9
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c0      	blx	r8
 80041d6:	3001      	adds	r0, #1
 80041d8:	d0e6      	beq.n	80041a8 <_printf_common+0xa4>
 80041da:	3601      	adds	r6, #1
 80041dc:	e7d9      	b.n	8004192 <_printf_common+0x8e>
	...

080041e0 <_printf_i>:
 80041e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	7e0f      	ldrb	r7, [r1, #24]
 80041e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041e8:	2f78      	cmp	r7, #120	; 0x78
 80041ea:	4691      	mov	r9, r2
 80041ec:	4680      	mov	r8, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	469a      	mov	sl, r3
 80041f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041f6:	d807      	bhi.n	8004208 <_printf_i+0x28>
 80041f8:	2f62      	cmp	r7, #98	; 0x62
 80041fa:	d80a      	bhi.n	8004212 <_printf_i+0x32>
 80041fc:	2f00      	cmp	r7, #0
 80041fe:	f000 80d8 	beq.w	80043b2 <_printf_i+0x1d2>
 8004202:	2f58      	cmp	r7, #88	; 0x58
 8004204:	f000 80a3 	beq.w	800434e <_printf_i+0x16e>
 8004208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800420c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004210:	e03a      	b.n	8004288 <_printf_i+0xa8>
 8004212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004216:	2b15      	cmp	r3, #21
 8004218:	d8f6      	bhi.n	8004208 <_printf_i+0x28>
 800421a:	a101      	add	r1, pc, #4	; (adr r1, 8004220 <_printf_i+0x40>)
 800421c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004220:	08004279 	.word	0x08004279
 8004224:	0800428d 	.word	0x0800428d
 8004228:	08004209 	.word	0x08004209
 800422c:	08004209 	.word	0x08004209
 8004230:	08004209 	.word	0x08004209
 8004234:	08004209 	.word	0x08004209
 8004238:	0800428d 	.word	0x0800428d
 800423c:	08004209 	.word	0x08004209
 8004240:	08004209 	.word	0x08004209
 8004244:	08004209 	.word	0x08004209
 8004248:	08004209 	.word	0x08004209
 800424c:	08004399 	.word	0x08004399
 8004250:	080042bd 	.word	0x080042bd
 8004254:	0800437b 	.word	0x0800437b
 8004258:	08004209 	.word	0x08004209
 800425c:	08004209 	.word	0x08004209
 8004260:	080043bb 	.word	0x080043bb
 8004264:	08004209 	.word	0x08004209
 8004268:	080042bd 	.word	0x080042bd
 800426c:	08004209 	.word	0x08004209
 8004270:	08004209 	.word	0x08004209
 8004274:	08004383 	.word	0x08004383
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	1d1a      	adds	r2, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	602a      	str	r2, [r5, #0]
 8004280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004288:	2301      	movs	r3, #1
 800428a:	e0a3      	b.n	80043d4 <_printf_i+0x1f4>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	6829      	ldr	r1, [r5, #0]
 8004290:	0606      	lsls	r6, r0, #24
 8004292:	f101 0304 	add.w	r3, r1, #4
 8004296:	d50a      	bpl.n	80042ae <_printf_i+0xce>
 8004298:	680e      	ldr	r6, [r1, #0]
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	2e00      	cmp	r6, #0
 800429e:	da03      	bge.n	80042a8 <_printf_i+0xc8>
 80042a0:	232d      	movs	r3, #45	; 0x2d
 80042a2:	4276      	negs	r6, r6
 80042a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a8:	485e      	ldr	r0, [pc, #376]	; (8004424 <_printf_i+0x244>)
 80042aa:	230a      	movs	r3, #10
 80042ac:	e019      	b.n	80042e2 <_printf_i+0x102>
 80042ae:	680e      	ldr	r6, [r1, #0]
 80042b0:	602b      	str	r3, [r5, #0]
 80042b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042b6:	bf18      	it	ne
 80042b8:	b236      	sxthne	r6, r6
 80042ba:	e7ef      	b.n	800429c <_printf_i+0xbc>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	6820      	ldr	r0, [r4, #0]
 80042c0:	1d19      	adds	r1, r3, #4
 80042c2:	6029      	str	r1, [r5, #0]
 80042c4:	0601      	lsls	r1, r0, #24
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0xec>
 80042c8:	681e      	ldr	r6, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0xf2>
 80042cc:	0646      	lsls	r6, r0, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0xe8>
 80042d0:	881e      	ldrh	r6, [r3, #0]
 80042d2:	4854      	ldr	r0, [pc, #336]	; (8004424 <_printf_i+0x244>)
 80042d4:	2f6f      	cmp	r7, #111	; 0x6f
 80042d6:	bf0c      	ite	eq
 80042d8:	2308      	moveq	r3, #8
 80042da:	230a      	movne	r3, #10
 80042dc:	2100      	movs	r1, #0
 80042de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e2:	6865      	ldr	r5, [r4, #4]
 80042e4:	60a5      	str	r5, [r4, #8]
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	bfa2      	ittt	ge
 80042ea:	6821      	ldrge	r1, [r4, #0]
 80042ec:	f021 0104 	bicge.w	r1, r1, #4
 80042f0:	6021      	strge	r1, [r4, #0]
 80042f2:	b90e      	cbnz	r6, 80042f8 <_printf_i+0x118>
 80042f4:	2d00      	cmp	r5, #0
 80042f6:	d04d      	beq.n	8004394 <_printf_i+0x1b4>
 80042f8:	4615      	mov	r5, r2
 80042fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80042fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004302:	5dc7      	ldrb	r7, [r0, r7]
 8004304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004308:	4637      	mov	r7, r6
 800430a:	42bb      	cmp	r3, r7
 800430c:	460e      	mov	r6, r1
 800430e:	d9f4      	bls.n	80042fa <_printf_i+0x11a>
 8004310:	2b08      	cmp	r3, #8
 8004312:	d10b      	bne.n	800432c <_printf_i+0x14c>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	07de      	lsls	r6, r3, #31
 8004318:	d508      	bpl.n	800432c <_printf_i+0x14c>
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	6861      	ldr	r1, [r4, #4]
 800431e:	4299      	cmp	r1, r3
 8004320:	bfde      	ittt	le
 8004322:	2330      	movle	r3, #48	; 0x30
 8004324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800432c:	1b52      	subs	r2, r2, r5
 800432e:	6122      	str	r2, [r4, #16]
 8004330:	f8cd a000 	str.w	sl, [sp]
 8004334:	464b      	mov	r3, r9
 8004336:	aa03      	add	r2, sp, #12
 8004338:	4621      	mov	r1, r4
 800433a:	4640      	mov	r0, r8
 800433c:	f7ff fee2 	bl	8004104 <_printf_common>
 8004340:	3001      	adds	r0, #1
 8004342:	d14c      	bne.n	80043de <_printf_i+0x1fe>
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	b004      	add	sp, #16
 800434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434e:	4835      	ldr	r0, [pc, #212]	; (8004424 <_printf_i+0x244>)
 8004350:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004354:	6829      	ldr	r1, [r5, #0]
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f851 6b04 	ldr.w	r6, [r1], #4
 800435c:	6029      	str	r1, [r5, #0]
 800435e:	061d      	lsls	r5, r3, #24
 8004360:	d514      	bpl.n	800438c <_printf_i+0x1ac>
 8004362:	07df      	lsls	r7, r3, #31
 8004364:	bf44      	itt	mi
 8004366:	f043 0320 	orrmi.w	r3, r3, #32
 800436a:	6023      	strmi	r3, [r4, #0]
 800436c:	b91e      	cbnz	r6, 8004376 <_printf_i+0x196>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	f023 0320 	bic.w	r3, r3, #32
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	2310      	movs	r3, #16
 8004378:	e7b0      	b.n	80042dc <_printf_i+0xfc>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f043 0320 	orr.w	r3, r3, #32
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	2378      	movs	r3, #120	; 0x78
 8004384:	4828      	ldr	r0, [pc, #160]	; (8004428 <_printf_i+0x248>)
 8004386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800438a:	e7e3      	b.n	8004354 <_printf_i+0x174>
 800438c:	0659      	lsls	r1, r3, #25
 800438e:	bf48      	it	mi
 8004390:	b2b6      	uxthmi	r6, r6
 8004392:	e7e6      	b.n	8004362 <_printf_i+0x182>
 8004394:	4615      	mov	r5, r2
 8004396:	e7bb      	b.n	8004310 <_printf_i+0x130>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	6826      	ldr	r6, [r4, #0]
 800439c:	6961      	ldr	r1, [r4, #20]
 800439e:	1d18      	adds	r0, r3, #4
 80043a0:	6028      	str	r0, [r5, #0]
 80043a2:	0635      	lsls	r5, r6, #24
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	d501      	bpl.n	80043ac <_printf_i+0x1cc>
 80043a8:	6019      	str	r1, [r3, #0]
 80043aa:	e002      	b.n	80043b2 <_printf_i+0x1d2>
 80043ac:	0670      	lsls	r0, r6, #25
 80043ae:	d5fb      	bpl.n	80043a8 <_printf_i+0x1c8>
 80043b0:	8019      	strh	r1, [r3, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	6123      	str	r3, [r4, #16]
 80043b6:	4615      	mov	r5, r2
 80043b8:	e7ba      	b.n	8004330 <_printf_i+0x150>
 80043ba:	682b      	ldr	r3, [r5, #0]
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	602a      	str	r2, [r5, #0]
 80043c0:	681d      	ldr	r5, [r3, #0]
 80043c2:	6862      	ldr	r2, [r4, #4]
 80043c4:	2100      	movs	r1, #0
 80043c6:	4628      	mov	r0, r5
 80043c8:	f7fb ff2a 	bl	8000220 <memchr>
 80043cc:	b108      	cbz	r0, 80043d2 <_printf_i+0x1f2>
 80043ce:	1b40      	subs	r0, r0, r5
 80043d0:	6060      	str	r0, [r4, #4]
 80043d2:	6863      	ldr	r3, [r4, #4]
 80043d4:	6123      	str	r3, [r4, #16]
 80043d6:	2300      	movs	r3, #0
 80043d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043dc:	e7a8      	b.n	8004330 <_printf_i+0x150>
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	462a      	mov	r2, r5
 80043e2:	4649      	mov	r1, r9
 80043e4:	4640      	mov	r0, r8
 80043e6:	47d0      	blx	sl
 80043e8:	3001      	adds	r0, #1
 80043ea:	d0ab      	beq.n	8004344 <_printf_i+0x164>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	079b      	lsls	r3, r3, #30
 80043f0:	d413      	bmi.n	800441a <_printf_i+0x23a>
 80043f2:	68e0      	ldr	r0, [r4, #12]
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	4298      	cmp	r0, r3
 80043f8:	bfb8      	it	lt
 80043fa:	4618      	movlt	r0, r3
 80043fc:	e7a4      	b.n	8004348 <_printf_i+0x168>
 80043fe:	2301      	movs	r3, #1
 8004400:	4632      	mov	r2, r6
 8004402:	4649      	mov	r1, r9
 8004404:	4640      	mov	r0, r8
 8004406:	47d0      	blx	sl
 8004408:	3001      	adds	r0, #1
 800440a:	d09b      	beq.n	8004344 <_printf_i+0x164>
 800440c:	3501      	adds	r5, #1
 800440e:	68e3      	ldr	r3, [r4, #12]
 8004410:	9903      	ldr	r1, [sp, #12]
 8004412:	1a5b      	subs	r3, r3, r1
 8004414:	42ab      	cmp	r3, r5
 8004416:	dcf2      	bgt.n	80043fe <_printf_i+0x21e>
 8004418:	e7eb      	b.n	80043f2 <_printf_i+0x212>
 800441a:	2500      	movs	r5, #0
 800441c:	f104 0619 	add.w	r6, r4, #25
 8004420:	e7f5      	b.n	800440e <_printf_i+0x22e>
 8004422:	bf00      	nop
 8004424:	08007fda 	.word	0x08007fda
 8004428:	08007feb 	.word	0x08007feb

0800442c <siprintf>:
 800442c:	b40e      	push	{r1, r2, r3}
 800442e:	b500      	push	{lr}
 8004430:	b09c      	sub	sp, #112	; 0x70
 8004432:	ab1d      	add	r3, sp, #116	; 0x74
 8004434:	9002      	str	r0, [sp, #8]
 8004436:	9006      	str	r0, [sp, #24]
 8004438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800443c:	4809      	ldr	r0, [pc, #36]	; (8004464 <siprintf+0x38>)
 800443e:	9107      	str	r1, [sp, #28]
 8004440:	9104      	str	r1, [sp, #16]
 8004442:	4909      	ldr	r1, [pc, #36]	; (8004468 <siprintf+0x3c>)
 8004444:	f853 2b04 	ldr.w	r2, [r3], #4
 8004448:	9105      	str	r1, [sp, #20]
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	a902      	add	r1, sp, #8
 8004450:	f002 fe7c 	bl	800714c <_svfiprintf_r>
 8004454:	9b02      	ldr	r3, [sp, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	b01c      	add	sp, #112	; 0x70
 800445c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004460:	b003      	add	sp, #12
 8004462:	4770      	bx	lr
 8004464:	2000001c 	.word	0x2000001c
 8004468:	ffff0208 	.word	0xffff0208

0800446c <strncmp>:
 800446c:	b510      	push	{r4, lr}
 800446e:	b17a      	cbz	r2, 8004490 <strncmp+0x24>
 8004470:	4603      	mov	r3, r0
 8004472:	3901      	subs	r1, #1
 8004474:	1884      	adds	r4, r0, r2
 8004476:	f813 0b01 	ldrb.w	r0, [r3], #1
 800447a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800447e:	4290      	cmp	r0, r2
 8004480:	d101      	bne.n	8004486 <strncmp+0x1a>
 8004482:	42a3      	cmp	r3, r4
 8004484:	d101      	bne.n	800448a <strncmp+0x1e>
 8004486:	1a80      	subs	r0, r0, r2
 8004488:	bd10      	pop	{r4, pc}
 800448a:	2800      	cmp	r0, #0
 800448c:	d1f3      	bne.n	8004476 <strncmp+0xa>
 800448e:	e7fa      	b.n	8004486 <strncmp+0x1a>
 8004490:	4610      	mov	r0, r2
 8004492:	e7f9      	b.n	8004488 <strncmp+0x1c>

08004494 <sulp>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4604      	mov	r4, r0
 8004498:	460d      	mov	r5, r1
 800449a:	ec45 4b10 	vmov	d0, r4, r5
 800449e:	4616      	mov	r6, r2
 80044a0:	f002 fbb2 	bl	8006c08 <__ulp>
 80044a4:	ec51 0b10 	vmov	r0, r1, d0
 80044a8:	b17e      	cbz	r6, 80044ca <sulp+0x36>
 80044aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80044ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dd09      	ble.n	80044ca <sulp+0x36>
 80044b6:	051b      	lsls	r3, r3, #20
 80044b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80044bc:	2400      	movs	r4, #0
 80044be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80044c2:	4622      	mov	r2, r4
 80044c4:	462b      	mov	r3, r5
 80044c6:	f7fc f8b7 	bl	8000638 <__aeabi_dmul>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	0000      	movs	r0, r0
	...

080044d0 <_strtod_l>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	ed2d 8b02 	vpush	{d8}
 80044d8:	b09d      	sub	sp, #116	; 0x74
 80044da:	461f      	mov	r7, r3
 80044dc:	2300      	movs	r3, #0
 80044de:	9318      	str	r3, [sp, #96]	; 0x60
 80044e0:	4ba2      	ldr	r3, [pc, #648]	; (800476c <_strtod_l+0x29c>)
 80044e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	9305      	str	r3, [sp, #20]
 80044e8:	4604      	mov	r4, r0
 80044ea:	4618      	mov	r0, r3
 80044ec:	4688      	mov	r8, r1
 80044ee:	f7fb fe8f 	bl	8000210 <strlen>
 80044f2:	f04f 0a00 	mov.w	sl, #0
 80044f6:	4605      	mov	r5, r0
 80044f8:	f04f 0b00 	mov.w	fp, #0
 80044fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	2a2b      	cmp	r2, #43	; 0x2b
 8004506:	d04e      	beq.n	80045a6 <_strtod_l+0xd6>
 8004508:	d83b      	bhi.n	8004582 <_strtod_l+0xb2>
 800450a:	2a0d      	cmp	r2, #13
 800450c:	d834      	bhi.n	8004578 <_strtod_l+0xa8>
 800450e:	2a08      	cmp	r2, #8
 8004510:	d834      	bhi.n	800457c <_strtod_l+0xac>
 8004512:	2a00      	cmp	r2, #0
 8004514:	d03e      	beq.n	8004594 <_strtod_l+0xc4>
 8004516:	2300      	movs	r3, #0
 8004518:	930a      	str	r3, [sp, #40]	; 0x28
 800451a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800451c:	7833      	ldrb	r3, [r6, #0]
 800451e:	2b30      	cmp	r3, #48	; 0x30
 8004520:	f040 80b0 	bne.w	8004684 <_strtod_l+0x1b4>
 8004524:	7873      	ldrb	r3, [r6, #1]
 8004526:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800452a:	2b58      	cmp	r3, #88	; 0x58
 800452c:	d168      	bne.n	8004600 <_strtod_l+0x130>
 800452e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	ab18      	add	r3, sp, #96	; 0x60
 8004534:	9702      	str	r7, [sp, #8]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4a8d      	ldr	r2, [pc, #564]	; (8004770 <_strtod_l+0x2a0>)
 800453a:	ab19      	add	r3, sp, #100	; 0x64
 800453c:	a917      	add	r1, sp, #92	; 0x5c
 800453e:	4620      	mov	r0, r4
 8004540:	f001 fcbc 	bl	8005ebc <__gethex>
 8004544:	f010 0707 	ands.w	r7, r0, #7
 8004548:	4605      	mov	r5, r0
 800454a:	d005      	beq.n	8004558 <_strtod_l+0x88>
 800454c:	2f06      	cmp	r7, #6
 800454e:	d12c      	bne.n	80045aa <_strtod_l+0xda>
 8004550:	3601      	adds	r6, #1
 8004552:	2300      	movs	r3, #0
 8004554:	9617      	str	r6, [sp, #92]	; 0x5c
 8004556:	930a      	str	r3, [sp, #40]	; 0x28
 8004558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 8590 	bne.w	8005080 <_strtod_l+0xbb0>
 8004560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004562:	b1eb      	cbz	r3, 80045a0 <_strtod_l+0xd0>
 8004564:	4652      	mov	r2, sl
 8004566:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800456a:	ec43 2b10 	vmov	d0, r2, r3
 800456e:	b01d      	add	sp, #116	; 0x74
 8004570:	ecbd 8b02 	vpop	{d8}
 8004574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004578:	2a20      	cmp	r2, #32
 800457a:	d1cc      	bne.n	8004516 <_strtod_l+0x46>
 800457c:	3301      	adds	r3, #1
 800457e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004580:	e7be      	b.n	8004500 <_strtod_l+0x30>
 8004582:	2a2d      	cmp	r2, #45	; 0x2d
 8004584:	d1c7      	bne.n	8004516 <_strtod_l+0x46>
 8004586:	2201      	movs	r2, #1
 8004588:	920a      	str	r2, [sp, #40]	; 0x28
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	9217      	str	r2, [sp, #92]	; 0x5c
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1c2      	bne.n	800451a <_strtod_l+0x4a>
 8004594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004596:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 856e 	bne.w	800507c <_strtod_l+0xbac>
 80045a0:	4652      	mov	r2, sl
 80045a2:	465b      	mov	r3, fp
 80045a4:	e7e1      	b.n	800456a <_strtod_l+0x9a>
 80045a6:	2200      	movs	r2, #0
 80045a8:	e7ee      	b.n	8004588 <_strtod_l+0xb8>
 80045aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80045ac:	b13a      	cbz	r2, 80045be <_strtod_l+0xee>
 80045ae:	2135      	movs	r1, #53	; 0x35
 80045b0:	a81a      	add	r0, sp, #104	; 0x68
 80045b2:	f002 fc34 	bl	8006e1e <__copybits>
 80045b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80045b8:	4620      	mov	r0, r4
 80045ba:	f001 fff3 	bl	80065a4 <_Bfree>
 80045be:	3f01      	subs	r7, #1
 80045c0:	2f04      	cmp	r7, #4
 80045c2:	d806      	bhi.n	80045d2 <_strtod_l+0x102>
 80045c4:	e8df f007 	tbb	[pc, r7]
 80045c8:	1714030a 	.word	0x1714030a
 80045cc:	0a          	.byte	0x0a
 80045cd:	00          	.byte	0x00
 80045ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80045d2:	0728      	lsls	r0, r5, #28
 80045d4:	d5c0      	bpl.n	8004558 <_strtod_l+0x88>
 80045d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80045da:	e7bd      	b.n	8004558 <_strtod_l+0x88>
 80045dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80045e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80045e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80045ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80045ee:	e7f0      	b.n	80045d2 <_strtod_l+0x102>
 80045f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004774 <_strtod_l+0x2a4>
 80045f4:	e7ed      	b.n	80045d2 <_strtod_l+0x102>
 80045f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80045fa:	f04f 3aff 	mov.w	sl, #4294967295
 80045fe:	e7e8      	b.n	80045d2 <_strtod_l+0x102>
 8004600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	9217      	str	r2, [sp, #92]	; 0x5c
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d0f9      	beq.n	8004600 <_strtod_l+0x130>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0a3      	beq.n	8004558 <_strtod_l+0x88>
 8004610:	2301      	movs	r3, #1
 8004612:	f04f 0900 	mov.w	r9, #0
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800461a:	9308      	str	r3, [sp, #32]
 800461c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004620:	464f      	mov	r7, r9
 8004622:	220a      	movs	r2, #10
 8004624:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004626:	7806      	ldrb	r6, [r0, #0]
 8004628:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800462c:	b2d9      	uxtb	r1, r3
 800462e:	2909      	cmp	r1, #9
 8004630:	d92a      	bls.n	8004688 <_strtod_l+0x1b8>
 8004632:	9905      	ldr	r1, [sp, #20]
 8004634:	462a      	mov	r2, r5
 8004636:	f7ff ff19 	bl	800446c <strncmp>
 800463a:	b398      	cbz	r0, 80046a4 <_strtod_l+0x1d4>
 800463c:	2000      	movs	r0, #0
 800463e:	4632      	mov	r2, r6
 8004640:	463d      	mov	r5, r7
 8004642:	9005      	str	r0, [sp, #20]
 8004644:	4603      	mov	r3, r0
 8004646:	2a65      	cmp	r2, #101	; 0x65
 8004648:	d001      	beq.n	800464e <_strtod_l+0x17e>
 800464a:	2a45      	cmp	r2, #69	; 0x45
 800464c:	d118      	bne.n	8004680 <_strtod_l+0x1b0>
 800464e:	b91d      	cbnz	r5, 8004658 <_strtod_l+0x188>
 8004650:	9a04      	ldr	r2, [sp, #16]
 8004652:	4302      	orrs	r2, r0
 8004654:	d09e      	beq.n	8004594 <_strtod_l+0xc4>
 8004656:	2500      	movs	r5, #0
 8004658:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800465c:	f108 0201 	add.w	r2, r8, #1
 8004660:	9217      	str	r2, [sp, #92]	; 0x5c
 8004662:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004666:	2a2b      	cmp	r2, #43	; 0x2b
 8004668:	d075      	beq.n	8004756 <_strtod_l+0x286>
 800466a:	2a2d      	cmp	r2, #45	; 0x2d
 800466c:	d07b      	beq.n	8004766 <_strtod_l+0x296>
 800466e:	f04f 0c00 	mov.w	ip, #0
 8004672:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004676:	2909      	cmp	r1, #9
 8004678:	f240 8082 	bls.w	8004780 <_strtod_l+0x2b0>
 800467c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004680:	2600      	movs	r6, #0
 8004682:	e09d      	b.n	80047c0 <_strtod_l+0x2f0>
 8004684:	2300      	movs	r3, #0
 8004686:	e7c4      	b.n	8004612 <_strtod_l+0x142>
 8004688:	2f08      	cmp	r7, #8
 800468a:	bfd8      	it	le
 800468c:	9907      	ldrle	r1, [sp, #28]
 800468e:	f100 0001 	add.w	r0, r0, #1
 8004692:	bfda      	itte	le
 8004694:	fb02 3301 	mlale	r3, r2, r1, r3
 8004698:	9307      	strle	r3, [sp, #28]
 800469a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800469e:	3701      	adds	r7, #1
 80046a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80046a2:	e7bf      	b.n	8004624 <_strtod_l+0x154>
 80046a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046a6:	195a      	adds	r2, r3, r5
 80046a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80046aa:	5d5a      	ldrb	r2, [r3, r5]
 80046ac:	2f00      	cmp	r7, #0
 80046ae:	d037      	beq.n	8004720 <_strtod_l+0x250>
 80046b0:	9005      	str	r0, [sp, #20]
 80046b2:	463d      	mov	r5, r7
 80046b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	d912      	bls.n	80046e2 <_strtod_l+0x212>
 80046bc:	2301      	movs	r3, #1
 80046be:	e7c2      	b.n	8004646 <_strtod_l+0x176>
 80046c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80046c6:	785a      	ldrb	r2, [r3, #1]
 80046c8:	3001      	adds	r0, #1
 80046ca:	2a30      	cmp	r2, #48	; 0x30
 80046cc:	d0f8      	beq.n	80046c0 <_strtod_l+0x1f0>
 80046ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	f200 84d9 	bhi.w	800508a <_strtod_l+0xbba>
 80046d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80046da:	9005      	str	r0, [sp, #20]
 80046dc:	2000      	movs	r0, #0
 80046de:	9308      	str	r3, [sp, #32]
 80046e0:	4605      	mov	r5, r0
 80046e2:	3a30      	subs	r2, #48	; 0x30
 80046e4:	f100 0301 	add.w	r3, r0, #1
 80046e8:	d014      	beq.n	8004714 <_strtod_l+0x244>
 80046ea:	9905      	ldr	r1, [sp, #20]
 80046ec:	4419      	add	r1, r3
 80046ee:	9105      	str	r1, [sp, #20]
 80046f0:	462b      	mov	r3, r5
 80046f2:	eb00 0e05 	add.w	lr, r0, r5
 80046f6:	210a      	movs	r1, #10
 80046f8:	4573      	cmp	r3, lr
 80046fa:	d113      	bne.n	8004724 <_strtod_l+0x254>
 80046fc:	182b      	adds	r3, r5, r0
 80046fe:	2b08      	cmp	r3, #8
 8004700:	f105 0501 	add.w	r5, r5, #1
 8004704:	4405      	add	r5, r0
 8004706:	dc1c      	bgt.n	8004742 <_strtod_l+0x272>
 8004708:	9907      	ldr	r1, [sp, #28]
 800470a:	230a      	movs	r3, #10
 800470c:	fb03 2301 	mla	r3, r3, r1, r2
 8004710:	9307      	str	r3, [sp, #28]
 8004712:	2300      	movs	r3, #0
 8004714:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004716:	1c51      	adds	r1, r2, #1
 8004718:	9117      	str	r1, [sp, #92]	; 0x5c
 800471a:	7852      	ldrb	r2, [r2, #1]
 800471c:	4618      	mov	r0, r3
 800471e:	e7c9      	b.n	80046b4 <_strtod_l+0x1e4>
 8004720:	4638      	mov	r0, r7
 8004722:	e7d2      	b.n	80046ca <_strtod_l+0x1fa>
 8004724:	2b08      	cmp	r3, #8
 8004726:	dc04      	bgt.n	8004732 <_strtod_l+0x262>
 8004728:	9e07      	ldr	r6, [sp, #28]
 800472a:	434e      	muls	r6, r1
 800472c:	9607      	str	r6, [sp, #28]
 800472e:	3301      	adds	r3, #1
 8004730:	e7e2      	b.n	80046f8 <_strtod_l+0x228>
 8004732:	f103 0c01 	add.w	ip, r3, #1
 8004736:	f1bc 0f10 	cmp.w	ip, #16
 800473a:	bfd8      	it	le
 800473c:	fb01 f909 	mulle.w	r9, r1, r9
 8004740:	e7f5      	b.n	800472e <_strtod_l+0x25e>
 8004742:	2d10      	cmp	r5, #16
 8004744:	bfdc      	itt	le
 8004746:	230a      	movle	r3, #10
 8004748:	fb03 2909 	mlale	r9, r3, r9, r2
 800474c:	e7e1      	b.n	8004712 <_strtod_l+0x242>
 800474e:	2300      	movs	r3, #0
 8004750:	9305      	str	r3, [sp, #20]
 8004752:	2301      	movs	r3, #1
 8004754:	e77c      	b.n	8004650 <_strtod_l+0x180>
 8004756:	f04f 0c00 	mov.w	ip, #0
 800475a:	f108 0202 	add.w	r2, r8, #2
 800475e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004760:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004764:	e785      	b.n	8004672 <_strtod_l+0x1a2>
 8004766:	f04f 0c01 	mov.w	ip, #1
 800476a:	e7f6      	b.n	800475a <_strtod_l+0x28a>
 800476c:	08008148 	.word	0x08008148
 8004770:	08007ffc 	.word	0x08007ffc
 8004774:	7ff00000 	.word	0x7ff00000
 8004778:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800477a:	1c51      	adds	r1, r2, #1
 800477c:	9117      	str	r1, [sp, #92]	; 0x5c
 800477e:	7852      	ldrb	r2, [r2, #1]
 8004780:	2a30      	cmp	r2, #48	; 0x30
 8004782:	d0f9      	beq.n	8004778 <_strtod_l+0x2a8>
 8004784:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004788:	2908      	cmp	r1, #8
 800478a:	f63f af79 	bhi.w	8004680 <_strtod_l+0x1b0>
 800478e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004792:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004794:	9206      	str	r2, [sp, #24]
 8004796:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004798:	1c51      	adds	r1, r2, #1
 800479a:	9117      	str	r1, [sp, #92]	; 0x5c
 800479c:	7852      	ldrb	r2, [r2, #1]
 800479e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80047a2:	2e09      	cmp	r6, #9
 80047a4:	d937      	bls.n	8004816 <_strtod_l+0x346>
 80047a6:	9e06      	ldr	r6, [sp, #24]
 80047a8:	1b89      	subs	r1, r1, r6
 80047aa:	2908      	cmp	r1, #8
 80047ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80047b0:	dc02      	bgt.n	80047b8 <_strtod_l+0x2e8>
 80047b2:	4576      	cmp	r6, lr
 80047b4:	bfa8      	it	ge
 80047b6:	4676      	movge	r6, lr
 80047b8:	f1bc 0f00 	cmp.w	ip, #0
 80047bc:	d000      	beq.n	80047c0 <_strtod_l+0x2f0>
 80047be:	4276      	negs	r6, r6
 80047c0:	2d00      	cmp	r5, #0
 80047c2:	d14d      	bne.n	8004860 <_strtod_l+0x390>
 80047c4:	9904      	ldr	r1, [sp, #16]
 80047c6:	4301      	orrs	r1, r0
 80047c8:	f47f aec6 	bne.w	8004558 <_strtod_l+0x88>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f aee1 	bne.w	8004594 <_strtod_l+0xc4>
 80047d2:	2a69      	cmp	r2, #105	; 0x69
 80047d4:	d027      	beq.n	8004826 <_strtod_l+0x356>
 80047d6:	dc24      	bgt.n	8004822 <_strtod_l+0x352>
 80047d8:	2a49      	cmp	r2, #73	; 0x49
 80047da:	d024      	beq.n	8004826 <_strtod_l+0x356>
 80047dc:	2a4e      	cmp	r2, #78	; 0x4e
 80047de:	f47f aed9 	bne.w	8004594 <_strtod_l+0xc4>
 80047e2:	499f      	ldr	r1, [pc, #636]	; (8004a60 <_strtod_l+0x590>)
 80047e4:	a817      	add	r0, sp, #92	; 0x5c
 80047e6:	f001 fdc1 	bl	800636c <__match>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	f43f aed2 	beq.w	8004594 <_strtod_l+0xc4>
 80047f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b28      	cmp	r3, #40	; 0x28
 80047f6:	d12d      	bne.n	8004854 <_strtod_l+0x384>
 80047f8:	499a      	ldr	r1, [pc, #616]	; (8004a64 <_strtod_l+0x594>)
 80047fa:	aa1a      	add	r2, sp, #104	; 0x68
 80047fc:	a817      	add	r0, sp, #92	; 0x5c
 80047fe:	f001 fdc9 	bl	8006394 <__hexnan>
 8004802:	2805      	cmp	r0, #5
 8004804:	d126      	bne.n	8004854 <_strtod_l+0x384>
 8004806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004808:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800480c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004810:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004814:	e6a0      	b.n	8004558 <_strtod_l+0x88>
 8004816:	210a      	movs	r1, #10
 8004818:	fb01 2e0e 	mla	lr, r1, lr, r2
 800481c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004820:	e7b9      	b.n	8004796 <_strtod_l+0x2c6>
 8004822:	2a6e      	cmp	r2, #110	; 0x6e
 8004824:	e7db      	b.n	80047de <_strtod_l+0x30e>
 8004826:	4990      	ldr	r1, [pc, #576]	; (8004a68 <_strtod_l+0x598>)
 8004828:	a817      	add	r0, sp, #92	; 0x5c
 800482a:	f001 fd9f 	bl	800636c <__match>
 800482e:	2800      	cmp	r0, #0
 8004830:	f43f aeb0 	beq.w	8004594 <_strtod_l+0xc4>
 8004834:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004836:	498d      	ldr	r1, [pc, #564]	; (8004a6c <_strtod_l+0x59c>)
 8004838:	3b01      	subs	r3, #1
 800483a:	a817      	add	r0, sp, #92	; 0x5c
 800483c:	9317      	str	r3, [sp, #92]	; 0x5c
 800483e:	f001 fd95 	bl	800636c <__match>
 8004842:	b910      	cbnz	r0, 800484a <_strtod_l+0x37a>
 8004844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004846:	3301      	adds	r3, #1
 8004848:	9317      	str	r3, [sp, #92]	; 0x5c
 800484a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8004a7c <_strtod_l+0x5ac>
 800484e:	f04f 0a00 	mov.w	sl, #0
 8004852:	e681      	b.n	8004558 <_strtod_l+0x88>
 8004854:	4886      	ldr	r0, [pc, #536]	; (8004a70 <_strtod_l+0x5a0>)
 8004856:	f002 fd7b 	bl	8007350 <nan>
 800485a:	ec5b ab10 	vmov	sl, fp, d0
 800485e:	e67b      	b.n	8004558 <_strtod_l+0x88>
 8004860:	9b05      	ldr	r3, [sp, #20]
 8004862:	9807      	ldr	r0, [sp, #28]
 8004864:	1af3      	subs	r3, r6, r3
 8004866:	2f00      	cmp	r7, #0
 8004868:	bf08      	it	eq
 800486a:	462f      	moveq	r7, r5
 800486c:	2d10      	cmp	r5, #16
 800486e:	9306      	str	r3, [sp, #24]
 8004870:	46a8      	mov	r8, r5
 8004872:	bfa8      	it	ge
 8004874:	f04f 0810 	movge.w	r8, #16
 8004878:	f7fb fe64 	bl	8000544 <__aeabi_ui2d>
 800487c:	2d09      	cmp	r5, #9
 800487e:	4682      	mov	sl, r0
 8004880:	468b      	mov	fp, r1
 8004882:	dd13      	ble.n	80048ac <_strtod_l+0x3dc>
 8004884:	4b7b      	ldr	r3, [pc, #492]	; (8004a74 <_strtod_l+0x5a4>)
 8004886:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800488a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800488e:	f7fb fed3 	bl	8000638 <__aeabi_dmul>
 8004892:	4682      	mov	sl, r0
 8004894:	4648      	mov	r0, r9
 8004896:	468b      	mov	fp, r1
 8004898:	f7fb fe54 	bl	8000544 <__aeabi_ui2d>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4650      	mov	r0, sl
 80048a2:	4659      	mov	r1, fp
 80048a4:	f7fb fd12 	bl	80002cc <__adddf3>
 80048a8:	4682      	mov	sl, r0
 80048aa:	468b      	mov	fp, r1
 80048ac:	2d0f      	cmp	r5, #15
 80048ae:	dc38      	bgt.n	8004922 <_strtod_l+0x452>
 80048b0:	9b06      	ldr	r3, [sp, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f43f ae50 	beq.w	8004558 <_strtod_l+0x88>
 80048b8:	dd24      	ble.n	8004904 <_strtod_l+0x434>
 80048ba:	2b16      	cmp	r3, #22
 80048bc:	dc0b      	bgt.n	80048d6 <_strtod_l+0x406>
 80048be:	496d      	ldr	r1, [pc, #436]	; (8004a74 <_strtod_l+0x5a4>)
 80048c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048c8:	4652      	mov	r2, sl
 80048ca:	465b      	mov	r3, fp
 80048cc:	f7fb feb4 	bl	8000638 <__aeabi_dmul>
 80048d0:	4682      	mov	sl, r0
 80048d2:	468b      	mov	fp, r1
 80048d4:	e640      	b.n	8004558 <_strtod_l+0x88>
 80048d6:	9a06      	ldr	r2, [sp, #24]
 80048d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80048dc:	4293      	cmp	r3, r2
 80048de:	db20      	blt.n	8004922 <_strtod_l+0x452>
 80048e0:	4c64      	ldr	r4, [pc, #400]	; (8004a74 <_strtod_l+0x5a4>)
 80048e2:	f1c5 050f 	rsb	r5, r5, #15
 80048e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80048ea:	4652      	mov	r2, sl
 80048ec:	465b      	mov	r3, fp
 80048ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048f2:	f7fb fea1 	bl	8000638 <__aeabi_dmul>
 80048f6:	9b06      	ldr	r3, [sp, #24]
 80048f8:	1b5d      	subs	r5, r3, r5
 80048fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80048fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004902:	e7e3      	b.n	80048cc <_strtod_l+0x3fc>
 8004904:	9b06      	ldr	r3, [sp, #24]
 8004906:	3316      	adds	r3, #22
 8004908:	db0b      	blt.n	8004922 <_strtod_l+0x452>
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	1b9e      	subs	r6, r3, r6
 800490e:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <_strtod_l+0x5a4>)
 8004910:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004914:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004918:	4650      	mov	r0, sl
 800491a:	4659      	mov	r1, fp
 800491c:	f7fb ffb6 	bl	800088c <__aeabi_ddiv>
 8004920:	e7d6      	b.n	80048d0 <_strtod_l+0x400>
 8004922:	9b06      	ldr	r3, [sp, #24]
 8004924:	eba5 0808 	sub.w	r8, r5, r8
 8004928:	4498      	add	r8, r3
 800492a:	f1b8 0f00 	cmp.w	r8, #0
 800492e:	dd74      	ble.n	8004a1a <_strtod_l+0x54a>
 8004930:	f018 030f 	ands.w	r3, r8, #15
 8004934:	d00a      	beq.n	800494c <_strtod_l+0x47c>
 8004936:	494f      	ldr	r1, [pc, #316]	; (8004a74 <_strtod_l+0x5a4>)
 8004938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800493c:	4652      	mov	r2, sl
 800493e:	465b      	mov	r3, fp
 8004940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004944:	f7fb fe78 	bl	8000638 <__aeabi_dmul>
 8004948:	4682      	mov	sl, r0
 800494a:	468b      	mov	fp, r1
 800494c:	f038 080f 	bics.w	r8, r8, #15
 8004950:	d04f      	beq.n	80049f2 <_strtod_l+0x522>
 8004952:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004956:	dd22      	ble.n	800499e <_strtod_l+0x4ce>
 8004958:	2500      	movs	r5, #0
 800495a:	462e      	mov	r6, r5
 800495c:	9507      	str	r5, [sp, #28]
 800495e:	9505      	str	r5, [sp, #20]
 8004960:	2322      	movs	r3, #34	; 0x22
 8004962:	f8df b118 	ldr.w	fp, [pc, #280]	; 8004a7c <_strtod_l+0x5ac>
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	f04f 0a00 	mov.w	sl, #0
 800496c:	9b07      	ldr	r3, [sp, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f43f adf2 	beq.w	8004558 <_strtod_l+0x88>
 8004974:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004976:	4620      	mov	r0, r4
 8004978:	f001 fe14 	bl	80065a4 <_Bfree>
 800497c:	9905      	ldr	r1, [sp, #20]
 800497e:	4620      	mov	r0, r4
 8004980:	f001 fe10 	bl	80065a4 <_Bfree>
 8004984:	4631      	mov	r1, r6
 8004986:	4620      	mov	r0, r4
 8004988:	f001 fe0c 	bl	80065a4 <_Bfree>
 800498c:	9907      	ldr	r1, [sp, #28]
 800498e:	4620      	mov	r0, r4
 8004990:	f001 fe08 	bl	80065a4 <_Bfree>
 8004994:	4629      	mov	r1, r5
 8004996:	4620      	mov	r0, r4
 8004998:	f001 fe04 	bl	80065a4 <_Bfree>
 800499c:	e5dc      	b.n	8004558 <_strtod_l+0x88>
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <_strtod_l+0x5a8>)
 80049a0:	9304      	str	r3, [sp, #16]
 80049a2:	2300      	movs	r3, #0
 80049a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80049a8:	4650      	mov	r0, sl
 80049aa:	4659      	mov	r1, fp
 80049ac:	4699      	mov	r9, r3
 80049ae:	f1b8 0f01 	cmp.w	r8, #1
 80049b2:	dc21      	bgt.n	80049f8 <_strtod_l+0x528>
 80049b4:	b10b      	cbz	r3, 80049ba <_strtod_l+0x4ea>
 80049b6:	4682      	mov	sl, r0
 80049b8:	468b      	mov	fp, r1
 80049ba:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <_strtod_l+0x5a8>)
 80049bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80049c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80049c4:	4652      	mov	r2, sl
 80049c6:	465b      	mov	r3, fp
 80049c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80049cc:	f7fb fe34 	bl	8000638 <__aeabi_dmul>
 80049d0:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <_strtod_l+0x5ac>)
 80049d2:	460a      	mov	r2, r1
 80049d4:	400b      	ands	r3, r1
 80049d6:	492a      	ldr	r1, [pc, #168]	; (8004a80 <_strtod_l+0x5b0>)
 80049d8:	428b      	cmp	r3, r1
 80049da:	4682      	mov	sl, r0
 80049dc:	d8bc      	bhi.n	8004958 <_strtod_l+0x488>
 80049de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80049e2:	428b      	cmp	r3, r1
 80049e4:	bf86      	itte	hi
 80049e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004a84 <_strtod_l+0x5b4>
 80049ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80049ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80049f2:	2300      	movs	r3, #0
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	e084      	b.n	8004b02 <_strtod_l+0x632>
 80049f8:	f018 0f01 	tst.w	r8, #1
 80049fc:	d005      	beq.n	8004a0a <_strtod_l+0x53a>
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f7fb fe18 	bl	8000638 <__aeabi_dmul>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	9a04      	ldr	r2, [sp, #16]
 8004a0c:	3208      	adds	r2, #8
 8004a0e:	f109 0901 	add.w	r9, r9, #1
 8004a12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004a16:	9204      	str	r2, [sp, #16]
 8004a18:	e7c9      	b.n	80049ae <_strtod_l+0x4de>
 8004a1a:	d0ea      	beq.n	80049f2 <_strtod_l+0x522>
 8004a1c:	f1c8 0800 	rsb	r8, r8, #0
 8004a20:	f018 020f 	ands.w	r2, r8, #15
 8004a24:	d00a      	beq.n	8004a3c <_strtod_l+0x56c>
 8004a26:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <_strtod_l+0x5a4>)
 8004a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a2c:	4650      	mov	r0, sl
 8004a2e:	4659      	mov	r1, fp
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb ff2a 	bl	800088c <__aeabi_ddiv>
 8004a38:	4682      	mov	sl, r0
 8004a3a:	468b      	mov	fp, r1
 8004a3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004a40:	d0d7      	beq.n	80049f2 <_strtod_l+0x522>
 8004a42:	f1b8 0f1f 	cmp.w	r8, #31
 8004a46:	dd1f      	ble.n	8004a88 <_strtod_l+0x5b8>
 8004a48:	2500      	movs	r5, #0
 8004a4a:	462e      	mov	r6, r5
 8004a4c:	9507      	str	r5, [sp, #28]
 8004a4e:	9505      	str	r5, [sp, #20]
 8004a50:	2322      	movs	r3, #34	; 0x22
 8004a52:	f04f 0a00 	mov.w	sl, #0
 8004a56:	f04f 0b00 	mov.w	fp, #0
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	e786      	b.n	800496c <_strtod_l+0x49c>
 8004a5e:	bf00      	nop
 8004a60:	08007fd5 	.word	0x08007fd5
 8004a64:	08008010 	.word	0x08008010
 8004a68:	08007fcd 	.word	0x08007fcd
 8004a6c:	08008053 	.word	0x08008053
 8004a70:	08008300 	.word	0x08008300
 8004a74:	080081e0 	.word	0x080081e0
 8004a78:	080081b8 	.word	0x080081b8
 8004a7c:	7ff00000 	.word	0x7ff00000
 8004a80:	7ca00000 	.word	0x7ca00000
 8004a84:	7fefffff 	.word	0x7fefffff
 8004a88:	f018 0310 	ands.w	r3, r8, #16
 8004a8c:	bf18      	it	ne
 8004a8e:	236a      	movne	r3, #106	; 0x6a
 8004a90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004e40 <_strtod_l+0x970>
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	4650      	mov	r0, sl
 8004a98:	4659      	mov	r1, fp
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f018 0f01 	tst.w	r8, #1
 8004aa0:	d004      	beq.n	8004aac <_strtod_l+0x5dc>
 8004aa2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004aa6:	f7fb fdc7 	bl	8000638 <__aeabi_dmul>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004ab0:	f109 0908 	add.w	r9, r9, #8
 8004ab4:	d1f2      	bne.n	8004a9c <_strtod_l+0x5cc>
 8004ab6:	b10b      	cbz	r3, 8004abc <_strtod_l+0x5ec>
 8004ab8:	4682      	mov	sl, r0
 8004aba:	468b      	mov	fp, r1
 8004abc:	9b04      	ldr	r3, [sp, #16]
 8004abe:	b1c3      	cbz	r3, 8004af2 <_strtod_l+0x622>
 8004ac0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004ac4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	4659      	mov	r1, fp
 8004acc:	dd11      	ble.n	8004af2 <_strtod_l+0x622>
 8004ace:	2b1f      	cmp	r3, #31
 8004ad0:	f340 8124 	ble.w	8004d1c <_strtod_l+0x84c>
 8004ad4:	2b34      	cmp	r3, #52	; 0x34
 8004ad6:	bfde      	ittt	le
 8004ad8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004adc:	f04f 33ff 	movle.w	r3, #4294967295
 8004ae0:	fa03 f202 	lslle.w	r2, r3, r2
 8004ae4:	f04f 0a00 	mov.w	sl, #0
 8004ae8:	bfcc      	ite	gt
 8004aea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004aee:	ea02 0b01 	andle.w	fp, r2, r1
 8004af2:	2200      	movs	r2, #0
 8004af4:	2300      	movs	r3, #0
 8004af6:	4650      	mov	r0, sl
 8004af8:	4659      	mov	r1, fp
 8004afa:	f7fc f805 	bl	8000b08 <__aeabi_dcmpeq>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d1a2      	bne.n	8004a48 <_strtod_l+0x578>
 8004b02:	9b07      	ldr	r3, [sp, #28]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	9908      	ldr	r1, [sp, #32]
 8004b08:	462b      	mov	r3, r5
 8004b0a:	463a      	mov	r2, r7
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f001 fdb1 	bl	8006674 <__s2b>
 8004b12:	9007      	str	r0, [sp, #28]
 8004b14:	2800      	cmp	r0, #0
 8004b16:	f43f af1f 	beq.w	8004958 <_strtod_l+0x488>
 8004b1a:	9b05      	ldr	r3, [sp, #20]
 8004b1c:	1b9e      	subs	r6, r3, r6
 8004b1e:	9b06      	ldr	r3, [sp, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bfb4      	ite	lt
 8004b24:	4633      	movlt	r3, r6
 8004b26:	2300      	movge	r3, #0
 8004b28:	930c      	str	r3, [sp, #48]	; 0x30
 8004b2a:	9b06      	ldr	r3, [sp, #24]
 8004b2c:	2500      	movs	r5, #0
 8004b2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004b32:	9312      	str	r3, [sp, #72]	; 0x48
 8004b34:	462e      	mov	r6, r5
 8004b36:	9b07      	ldr	r3, [sp, #28]
 8004b38:	4620      	mov	r0, r4
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	f001 fcf2 	bl	8006524 <_Balloc>
 8004b40:	9005      	str	r0, [sp, #20]
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f43f af0c 	beq.w	8004960 <_strtod_l+0x490>
 8004b48:	9b07      	ldr	r3, [sp, #28]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	3202      	adds	r2, #2
 8004b4e:	f103 010c 	add.w	r1, r3, #12
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	300c      	adds	r0, #12
 8004b56:	f001 fcd7 	bl	8006508 <memcpy>
 8004b5a:	ec4b ab10 	vmov	d0, sl, fp
 8004b5e:	aa1a      	add	r2, sp, #104	; 0x68
 8004b60:	a919      	add	r1, sp, #100	; 0x64
 8004b62:	4620      	mov	r0, r4
 8004b64:	f002 f8cc 	bl	8006d00 <__d2b>
 8004b68:	ec4b ab18 	vmov	d8, sl, fp
 8004b6c:	9018      	str	r0, [sp, #96]	; 0x60
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f43f aef6 	beq.w	8004960 <_strtod_l+0x490>
 8004b74:	2101      	movs	r1, #1
 8004b76:	4620      	mov	r0, r4
 8004b78:	f001 fe16 	bl	80067a8 <__i2b>
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	f43f aeee 	beq.w	8004960 <_strtod_l+0x490>
 8004b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b86:	9904      	ldr	r1, [sp, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bfab      	itete	ge
 8004b8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004b8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004b90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004b92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004b96:	bfac      	ite	ge
 8004b98:	eb03 0902 	addge.w	r9, r3, r2
 8004b9c:	1ad7      	sublt	r7, r2, r3
 8004b9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004ba0:	eba3 0801 	sub.w	r8, r3, r1
 8004ba4:	4490      	add	r8, r2
 8004ba6:	4ba1      	ldr	r3, [pc, #644]	; (8004e2c <_strtod_l+0x95c>)
 8004ba8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bac:	4598      	cmp	r8, r3
 8004bae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004bb2:	f280 80c7 	bge.w	8004d44 <_strtod_l+0x874>
 8004bb6:	eba3 0308 	sub.w	r3, r3, r8
 8004bba:	2b1f      	cmp	r3, #31
 8004bbc:	eba2 0203 	sub.w	r2, r2, r3
 8004bc0:	f04f 0101 	mov.w	r1, #1
 8004bc4:	f300 80b1 	bgt.w	8004d2a <_strtod_l+0x85a>
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9308      	str	r3, [sp, #32]
 8004bd2:	eb09 0802 	add.w	r8, r9, r2
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	45c1      	cmp	r9, r8
 8004bda:	4417      	add	r7, r2
 8004bdc:	441f      	add	r7, r3
 8004bde:	464b      	mov	r3, r9
 8004be0:	bfa8      	it	ge
 8004be2:	4643      	movge	r3, r8
 8004be4:	42bb      	cmp	r3, r7
 8004be6:	bfa8      	it	ge
 8004be8:	463b      	movge	r3, r7
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bfc2      	ittt	gt
 8004bee:	eba8 0803 	subgt.w	r8, r8, r3
 8004bf2:	1aff      	subgt	r7, r7, r3
 8004bf4:	eba9 0903 	subgt.w	r9, r9, r3
 8004bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dd17      	ble.n	8004c2e <_strtod_l+0x75e>
 8004bfe:	4631      	mov	r1, r6
 8004c00:	461a      	mov	r2, r3
 8004c02:	4620      	mov	r0, r4
 8004c04:	f001 fe90 	bl	8006928 <__pow5mult>
 8004c08:	4606      	mov	r6, r0
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	f43f aea8 	beq.w	8004960 <_strtod_l+0x490>
 8004c10:	4601      	mov	r1, r0
 8004c12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004c14:	4620      	mov	r0, r4
 8004c16:	f001 fddd 	bl	80067d4 <__multiply>
 8004c1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f43f ae9f 	beq.w	8004960 <_strtod_l+0x490>
 8004c22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004c24:	4620      	mov	r0, r4
 8004c26:	f001 fcbd 	bl	80065a4 <_Bfree>
 8004c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c2c:	9318      	str	r3, [sp, #96]	; 0x60
 8004c2e:	f1b8 0f00 	cmp.w	r8, #0
 8004c32:	f300 808c 	bgt.w	8004d4e <_strtod_l+0x87e>
 8004c36:	9b06      	ldr	r3, [sp, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dd08      	ble.n	8004c4e <_strtod_l+0x77e>
 8004c3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c3e:	9905      	ldr	r1, [sp, #20]
 8004c40:	4620      	mov	r0, r4
 8004c42:	f001 fe71 	bl	8006928 <__pow5mult>
 8004c46:	9005      	str	r0, [sp, #20]
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f43f ae89 	beq.w	8004960 <_strtod_l+0x490>
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	dd08      	ble.n	8004c64 <_strtod_l+0x794>
 8004c52:	9905      	ldr	r1, [sp, #20]
 8004c54:	463a      	mov	r2, r7
 8004c56:	4620      	mov	r0, r4
 8004c58:	f001 fec0 	bl	80069dc <__lshift>
 8004c5c:	9005      	str	r0, [sp, #20]
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f ae7e 	beq.w	8004960 <_strtod_l+0x490>
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	dd08      	ble.n	8004c7c <_strtod_l+0x7ac>
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	464a      	mov	r2, r9
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f001 feb4 	bl	80069dc <__lshift>
 8004c74:	4606      	mov	r6, r0
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f43f ae72 	beq.w	8004960 <_strtod_l+0x490>
 8004c7c:	9a05      	ldr	r2, [sp, #20]
 8004c7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004c80:	4620      	mov	r0, r4
 8004c82:	f001 ff37 	bl	8006af4 <__mdiff>
 8004c86:	4605      	mov	r5, r0
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f43f ae69 	beq.w	8004960 <_strtod_l+0x490>
 8004c8e:	68c3      	ldr	r3, [r0, #12]
 8004c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c92:	2300      	movs	r3, #0
 8004c94:	60c3      	str	r3, [r0, #12]
 8004c96:	4631      	mov	r1, r6
 8004c98:	f001 ff10 	bl	8006abc <__mcmp>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	da60      	bge.n	8004d62 <_strtod_l+0x892>
 8004ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8004ca6:	f040 8082 	bne.w	8004dae <_strtod_l+0x8de>
 8004caa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d17d      	bne.n	8004dae <_strtod_l+0x8de>
 8004cb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004cb6:	0d1b      	lsrs	r3, r3, #20
 8004cb8:	051b      	lsls	r3, r3, #20
 8004cba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004cbe:	d976      	bls.n	8004dae <_strtod_l+0x8de>
 8004cc0:	696b      	ldr	r3, [r5, #20]
 8004cc2:	b913      	cbnz	r3, 8004cca <_strtod_l+0x7fa>
 8004cc4:	692b      	ldr	r3, [r5, #16]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	dd71      	ble.n	8004dae <_strtod_l+0x8de>
 8004cca:	4629      	mov	r1, r5
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f001 fe84 	bl	80069dc <__lshift>
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	f001 fef0 	bl	8006abc <__mcmp>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	dd66      	ble.n	8004dae <_strtod_l+0x8de>
 8004ce0:	9904      	ldr	r1, [sp, #16]
 8004ce2:	4a53      	ldr	r2, [pc, #332]	; (8004e30 <_strtod_l+0x960>)
 8004ce4:	465b      	mov	r3, fp
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	f000 8081 	beq.w	8004dee <_strtod_l+0x91e>
 8004cec:	ea02 010b 	and.w	r1, r2, fp
 8004cf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004cf4:	dc7b      	bgt.n	8004dee <_strtod_l+0x91e>
 8004cf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004cfa:	f77f aea9 	ble.w	8004a50 <_strtod_l+0x580>
 8004cfe:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <_strtod_l+0x964>)
 8004d00:	4650      	mov	r0, sl
 8004d02:	4659      	mov	r1, fp
 8004d04:	2200      	movs	r2, #0
 8004d06:	f7fb fc97 	bl	8000638 <__aeabi_dmul>
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4303      	orrs	r3, r0
 8004d0e:	bf08      	it	eq
 8004d10:	2322      	moveq	r3, #34	; 0x22
 8004d12:	4682      	mov	sl, r0
 8004d14:	468b      	mov	fp, r1
 8004d16:	bf08      	it	eq
 8004d18:	6023      	streq	r3, [r4, #0]
 8004d1a:	e62b      	b.n	8004974 <_strtod_l+0x4a4>
 8004d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	ea03 0a0a 	and.w	sl, r3, sl
 8004d28:	e6e3      	b.n	8004af2 <_strtod_l+0x622>
 8004d2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004d2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004d32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004d36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004d3a:	fa01 f308 	lsl.w	r3, r1, r8
 8004d3e:	9308      	str	r3, [sp, #32]
 8004d40:	910d      	str	r1, [sp, #52]	; 0x34
 8004d42:	e746      	b.n	8004bd2 <_strtod_l+0x702>
 8004d44:	2300      	movs	r3, #0
 8004d46:	9308      	str	r3, [sp, #32]
 8004d48:	2301      	movs	r3, #1
 8004d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8004d4c:	e741      	b.n	8004bd2 <_strtod_l+0x702>
 8004d4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d50:	4642      	mov	r2, r8
 8004d52:	4620      	mov	r0, r4
 8004d54:	f001 fe42 	bl	80069dc <__lshift>
 8004d58:	9018      	str	r0, [sp, #96]	; 0x60
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f47f af6b 	bne.w	8004c36 <_strtod_l+0x766>
 8004d60:	e5fe      	b.n	8004960 <_strtod_l+0x490>
 8004d62:	465f      	mov	r7, fp
 8004d64:	d16e      	bne.n	8004e44 <_strtod_l+0x974>
 8004d66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d6c:	b342      	cbz	r2, 8004dc0 <_strtod_l+0x8f0>
 8004d6e:	4a32      	ldr	r2, [pc, #200]	; (8004e38 <_strtod_l+0x968>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d128      	bne.n	8004dc6 <_strtod_l+0x8f6>
 8004d74:	9b04      	ldr	r3, [sp, #16]
 8004d76:	4651      	mov	r1, sl
 8004d78:	b1eb      	cbz	r3, 8004db6 <_strtod_l+0x8e6>
 8004d7a:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <_strtod_l+0x960>)
 8004d7c:	403b      	ands	r3, r7
 8004d7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d82:	f04f 32ff 	mov.w	r2, #4294967295
 8004d86:	d819      	bhi.n	8004dbc <_strtod_l+0x8ec>
 8004d88:	0d1b      	lsrs	r3, r3, #20
 8004d8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	4299      	cmp	r1, r3
 8004d94:	d117      	bne.n	8004dc6 <_strtod_l+0x8f6>
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <_strtod_l+0x96c>)
 8004d98:	429f      	cmp	r7, r3
 8004d9a:	d102      	bne.n	8004da2 <_strtod_l+0x8d2>
 8004d9c:	3101      	adds	r1, #1
 8004d9e:	f43f addf 	beq.w	8004960 <_strtod_l+0x490>
 8004da2:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <_strtod_l+0x960>)
 8004da4:	403b      	ands	r3, r7
 8004da6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004daa:	f04f 0a00 	mov.w	sl, #0
 8004dae:	9b04      	ldr	r3, [sp, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1a4      	bne.n	8004cfe <_strtod_l+0x82e>
 8004db4:	e5de      	b.n	8004974 <_strtod_l+0x4a4>
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	e7ea      	b.n	8004d92 <_strtod_l+0x8c2>
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	e7e8      	b.n	8004d92 <_strtod_l+0x8c2>
 8004dc0:	ea53 030a 	orrs.w	r3, r3, sl
 8004dc4:	d08c      	beq.n	8004ce0 <_strtod_l+0x810>
 8004dc6:	9b08      	ldr	r3, [sp, #32]
 8004dc8:	b1db      	cbz	r3, 8004e02 <_strtod_l+0x932>
 8004dca:	423b      	tst	r3, r7
 8004dcc:	d0ef      	beq.n	8004dae <_strtod_l+0x8de>
 8004dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dd0:	9a04      	ldr	r2, [sp, #16]
 8004dd2:	4650      	mov	r0, sl
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	b1c3      	cbz	r3, 8004e0a <_strtod_l+0x93a>
 8004dd8:	f7ff fb5c 	bl	8004494 <sulp>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	ec51 0b18 	vmov	r0, r1, d8
 8004de4:	f7fb fa72 	bl	80002cc <__adddf3>
 8004de8:	4682      	mov	sl, r0
 8004dea:	468b      	mov	fp, r1
 8004dec:	e7df      	b.n	8004dae <_strtod_l+0x8de>
 8004dee:	4013      	ands	r3, r2
 8004df0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004df4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004df8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004dfc:	f04f 3aff 	mov.w	sl, #4294967295
 8004e00:	e7d5      	b.n	8004dae <_strtod_l+0x8de>
 8004e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e04:	ea13 0f0a 	tst.w	r3, sl
 8004e08:	e7e0      	b.n	8004dcc <_strtod_l+0x8fc>
 8004e0a:	f7ff fb43 	bl	8004494 <sulp>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	ec51 0b18 	vmov	r0, r1, d8
 8004e16:	f7fb fa57 	bl	80002c8 <__aeabi_dsub>
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4682      	mov	sl, r0
 8004e20:	468b      	mov	fp, r1
 8004e22:	f7fb fe71 	bl	8000b08 <__aeabi_dcmpeq>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d0c1      	beq.n	8004dae <_strtod_l+0x8de>
 8004e2a:	e611      	b.n	8004a50 <_strtod_l+0x580>
 8004e2c:	fffffc02 	.word	0xfffffc02
 8004e30:	7ff00000 	.word	0x7ff00000
 8004e34:	39500000 	.word	0x39500000
 8004e38:	000fffff 	.word	0x000fffff
 8004e3c:	7fefffff 	.word	0x7fefffff
 8004e40:	08008028 	.word	0x08008028
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	f001 ffb6 	bl	8006db8 <__ratio>
 8004e4c:	ec59 8b10 	vmov	r8, r9, d0
 8004e50:	ee10 0a10 	vmov	r0, s0
 8004e54:	2200      	movs	r2, #0
 8004e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	f7fb fe68 	bl	8000b30 <__aeabi_dcmple>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d07a      	beq.n	8004f5a <_strtod_l+0xa8a>
 8004e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d04a      	beq.n	8004f00 <_strtod_l+0xa30>
 8004e6a:	4b95      	ldr	r3, [pc, #596]	; (80050c0 <_strtod_l+0xbf0>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80050c0 <_strtod_l+0xbf0>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	4b92      	ldr	r3, [pc, #584]	; (80050c4 <_strtod_l+0xbf4>)
 8004e7c:	403b      	ands	r3, r7
 8004e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8004e80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e82:	4b91      	ldr	r3, [pc, #580]	; (80050c8 <_strtod_l+0xbf8>)
 8004e84:	429a      	cmp	r2, r3
 8004e86:	f040 80b0 	bne.w	8004fea <_strtod_l+0xb1a>
 8004e8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004e92:	ec4b ab10 	vmov	d0, sl, fp
 8004e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e9a:	f001 feb5 	bl	8006c08 <__ulp>
 8004e9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ea2:	ec53 2b10 	vmov	r2, r3, d0
 8004ea6:	f7fb fbc7 	bl	8000638 <__aeabi_dmul>
 8004eaa:	4652      	mov	r2, sl
 8004eac:	465b      	mov	r3, fp
 8004eae:	f7fb fa0d 	bl	80002cc <__adddf3>
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4983      	ldr	r1, [pc, #524]	; (80050c4 <_strtod_l+0xbf4>)
 8004eb6:	4a85      	ldr	r2, [pc, #532]	; (80050cc <_strtod_l+0xbfc>)
 8004eb8:	4019      	ands	r1, r3
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	4682      	mov	sl, r0
 8004ebe:	d960      	bls.n	8004f82 <_strtod_l+0xab2>
 8004ec0:	ee18 3a90 	vmov	r3, s17
 8004ec4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d104      	bne.n	8004ed6 <_strtod_l+0xa06>
 8004ecc:	ee18 3a10 	vmov	r3, s16
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f43f ad45 	beq.w	8004960 <_strtod_l+0x490>
 8004ed6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80050d8 <_strtod_l+0xc08>
 8004eda:	f04f 3aff 	mov.w	sl, #4294967295
 8004ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f001 fb5f 	bl	80065a4 <_Bfree>
 8004ee6:	9905      	ldr	r1, [sp, #20]
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f001 fb5b 	bl	80065a4 <_Bfree>
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f001 fb57 	bl	80065a4 <_Bfree>
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f001 fb53 	bl	80065a4 <_Bfree>
 8004efe:	e61a      	b.n	8004b36 <_strtod_l+0x666>
 8004f00:	f1ba 0f00 	cmp.w	sl, #0
 8004f04:	d11b      	bne.n	8004f3e <_strtod_l+0xa6e>
 8004f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f0a:	b9f3      	cbnz	r3, 8004f4a <_strtod_l+0xa7a>
 8004f0c:	4b6c      	ldr	r3, [pc, #432]	; (80050c0 <_strtod_l+0xbf0>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4640      	mov	r0, r8
 8004f12:	4649      	mov	r1, r9
 8004f14:	f7fb fe02 	bl	8000b1c <__aeabi_dcmplt>
 8004f18:	b9d0      	cbnz	r0, 8004f50 <_strtod_l+0xa80>
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4b6c      	ldr	r3, [pc, #432]	; (80050d0 <_strtod_l+0xc00>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	f7fb fb89 	bl	8000638 <__aeabi_dmul>
 8004f26:	4680      	mov	r8, r0
 8004f28:	4689      	mov	r9, r1
 8004f2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004f32:	9315      	str	r3, [sp, #84]	; 0x54
 8004f34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004f38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f3c:	e79d      	b.n	8004e7a <_strtod_l+0x9aa>
 8004f3e:	f1ba 0f01 	cmp.w	sl, #1
 8004f42:	d102      	bne.n	8004f4a <_strtod_l+0xa7a>
 8004f44:	2f00      	cmp	r7, #0
 8004f46:	f43f ad83 	beq.w	8004a50 <_strtod_l+0x580>
 8004f4a:	4b62      	ldr	r3, [pc, #392]	; (80050d4 <_strtod_l+0xc04>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	e78e      	b.n	8004e6e <_strtod_l+0x99e>
 8004f50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80050d0 <_strtod_l+0xc00>
 8004f54:	f04f 0800 	mov.w	r8, #0
 8004f58:	e7e7      	b.n	8004f2a <_strtod_l+0xa5a>
 8004f5a:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <_strtod_l+0xc00>)
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4649      	mov	r1, r9
 8004f60:	2200      	movs	r2, #0
 8004f62:	f7fb fb69 	bl	8000638 <__aeabi_dmul>
 8004f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f68:	4680      	mov	r8, r0
 8004f6a:	4689      	mov	r9, r1
 8004f6c:	b933      	cbnz	r3, 8004f7c <_strtod_l+0xaac>
 8004f6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f72:	900e      	str	r0, [sp, #56]	; 0x38
 8004f74:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f7a:	e7dd      	b.n	8004f38 <_strtod_l+0xa68>
 8004f7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004f80:	e7f9      	b.n	8004f76 <_strtod_l+0xaa6>
 8004f82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004f86:	9b04      	ldr	r3, [sp, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1a8      	bne.n	8004ede <_strtod_l+0xa0e>
 8004f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004f90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f92:	0d1b      	lsrs	r3, r3, #20
 8004f94:	051b      	lsls	r3, r3, #20
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d1a1      	bne.n	8004ede <_strtod_l+0xa0e>
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb feab 	bl	8000cf8 <__aeabi_d2lz>
 8004fa2:	f7fb fb1b 	bl	80005dc <__aeabi_l2d>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4640      	mov	r0, r8
 8004fac:	4649      	mov	r1, r9
 8004fae:	f7fb f98b 	bl	80002c8 <__aeabi_dsub>
 8004fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fb8:	ea43 030a 	orr.w	r3, r3, sl
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	4680      	mov	r8, r0
 8004fc0:	4689      	mov	r9, r1
 8004fc2:	d055      	beq.n	8005070 <_strtod_l+0xba0>
 8004fc4:	a336      	add	r3, pc, #216	; (adr r3, 80050a0 <_strtod_l+0xbd0>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f7fb fda7 	bl	8000b1c <__aeabi_dcmplt>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	f47f acd0 	bne.w	8004974 <_strtod_l+0x4a4>
 8004fd4:	a334      	add	r3, pc, #208	; (adr r3, 80050a8 <_strtod_l+0xbd8>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	4640      	mov	r0, r8
 8004fdc:	4649      	mov	r1, r9
 8004fde:	f7fb fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	f43f af7b 	beq.w	8004ede <_strtod_l+0xa0e>
 8004fe8:	e4c4      	b.n	8004974 <_strtod_l+0x4a4>
 8004fea:	9b04      	ldr	r3, [sp, #16]
 8004fec:	b333      	cbz	r3, 800503c <_strtod_l+0xb6c>
 8004fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ff0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ff4:	d822      	bhi.n	800503c <_strtod_l+0xb6c>
 8004ff6:	a32e      	add	r3, pc, #184	; (adr r3, 80050b0 <_strtod_l+0xbe0>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb fd96 	bl	8000b30 <__aeabi_dcmple>
 8005004:	b1a0      	cbz	r0, 8005030 <_strtod_l+0xb60>
 8005006:	4649      	mov	r1, r9
 8005008:	4640      	mov	r0, r8
 800500a:	f7fb fded 	bl	8000be8 <__aeabi_d2uiz>
 800500e:	2801      	cmp	r0, #1
 8005010:	bf38      	it	cc
 8005012:	2001      	movcc	r0, #1
 8005014:	f7fb fa96 	bl	8000544 <__aeabi_ui2d>
 8005018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800501a:	4680      	mov	r8, r0
 800501c:	4689      	mov	r9, r1
 800501e:	bb23      	cbnz	r3, 800506a <_strtod_l+0xb9a>
 8005020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005024:	9010      	str	r0, [sp, #64]	; 0x40
 8005026:	9311      	str	r3, [sp, #68]	; 0x44
 8005028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800502c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005034:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	9309      	str	r3, [sp, #36]	; 0x24
 800503c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005040:	eeb0 0a48 	vmov.f32	s0, s16
 8005044:	eef0 0a68 	vmov.f32	s1, s17
 8005048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800504c:	f001 fddc 	bl	8006c08 <__ulp>
 8005050:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005054:	ec53 2b10 	vmov	r2, r3, d0
 8005058:	f7fb faee 	bl	8000638 <__aeabi_dmul>
 800505c:	ec53 2b18 	vmov	r2, r3, d8
 8005060:	f7fb f934 	bl	80002cc <__adddf3>
 8005064:	4682      	mov	sl, r0
 8005066:	468b      	mov	fp, r1
 8005068:	e78d      	b.n	8004f86 <_strtod_l+0xab6>
 800506a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800506e:	e7db      	b.n	8005028 <_strtod_l+0xb58>
 8005070:	a311      	add	r3, pc, #68	; (adr r3, 80050b8 <_strtod_l+0xbe8>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb fd51 	bl	8000b1c <__aeabi_dcmplt>
 800507a:	e7b2      	b.n	8004fe2 <_strtod_l+0xb12>
 800507c:	2300      	movs	r3, #0
 800507e:	930a      	str	r3, [sp, #40]	; 0x28
 8005080:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	f7ff ba6b 	b.w	8004560 <_strtod_l+0x90>
 800508a:	2a65      	cmp	r2, #101	; 0x65
 800508c:	f43f ab5f 	beq.w	800474e <_strtod_l+0x27e>
 8005090:	2a45      	cmp	r2, #69	; 0x45
 8005092:	f43f ab5c 	beq.w	800474e <_strtod_l+0x27e>
 8005096:	2301      	movs	r3, #1
 8005098:	f7ff bb94 	b.w	80047c4 <_strtod_l+0x2f4>
 800509c:	f3af 8000 	nop.w
 80050a0:	94a03595 	.word	0x94a03595
 80050a4:	3fdfffff 	.word	0x3fdfffff
 80050a8:	35afe535 	.word	0x35afe535
 80050ac:	3fe00000 	.word	0x3fe00000
 80050b0:	ffc00000 	.word	0xffc00000
 80050b4:	41dfffff 	.word	0x41dfffff
 80050b8:	94a03595 	.word	0x94a03595
 80050bc:	3fcfffff 	.word	0x3fcfffff
 80050c0:	3ff00000 	.word	0x3ff00000
 80050c4:	7ff00000 	.word	0x7ff00000
 80050c8:	7fe00000 	.word	0x7fe00000
 80050cc:	7c9fffff 	.word	0x7c9fffff
 80050d0:	3fe00000 	.word	0x3fe00000
 80050d4:	bff00000 	.word	0xbff00000
 80050d8:	7fefffff 	.word	0x7fefffff

080050dc <strtod>:
 80050dc:	460a      	mov	r2, r1
 80050de:	4601      	mov	r1, r0
 80050e0:	4802      	ldr	r0, [pc, #8]	; (80050ec <strtod+0x10>)
 80050e2:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <strtod+0x14>)
 80050e4:	6800      	ldr	r0, [r0, #0]
 80050e6:	f7ff b9f3 	b.w	80044d0 <_strtod_l>
 80050ea:	bf00      	nop
 80050ec:	2000001c 	.word	0x2000001c
 80050f0:	20000084 	.word	0x20000084

080050f4 <quorem>:
 80050f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	6903      	ldr	r3, [r0, #16]
 80050fa:	690c      	ldr	r4, [r1, #16]
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	4607      	mov	r7, r0
 8005100:	f2c0 8081 	blt.w	8005206 <quorem+0x112>
 8005104:	3c01      	subs	r4, #1
 8005106:	f101 0814 	add.w	r8, r1, #20
 800510a:	f100 0514 	add.w	r5, r0, #20
 800510e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800511c:	3301      	adds	r3, #1
 800511e:	429a      	cmp	r2, r3
 8005120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005128:	fbb2 f6f3 	udiv	r6, r2, r3
 800512c:	d331      	bcc.n	8005192 <quorem+0x9e>
 800512e:	f04f 0e00 	mov.w	lr, #0
 8005132:	4640      	mov	r0, r8
 8005134:	46ac      	mov	ip, r5
 8005136:	46f2      	mov	sl, lr
 8005138:	f850 2b04 	ldr.w	r2, [r0], #4
 800513c:	b293      	uxth	r3, r2
 800513e:	fb06 e303 	mla	r3, r6, r3, lr
 8005142:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005146:	b29b      	uxth	r3, r3
 8005148:	ebaa 0303 	sub.w	r3, sl, r3
 800514c:	f8dc a000 	ldr.w	sl, [ip]
 8005150:	0c12      	lsrs	r2, r2, #16
 8005152:	fa13 f38a 	uxtah	r3, r3, sl
 8005156:	fb06 e202 	mla	r2, r6, r2, lr
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	9b00      	ldr	r3, [sp, #0]
 800515e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005162:	b292      	uxth	r2, r2
 8005164:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800516c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005170:	4581      	cmp	r9, r0
 8005172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005176:	f84c 3b04 	str.w	r3, [ip], #4
 800517a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800517e:	d2db      	bcs.n	8005138 <quorem+0x44>
 8005180:	f855 300b 	ldr.w	r3, [r5, fp]
 8005184:	b92b      	cbnz	r3, 8005192 <quorem+0x9e>
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	3b04      	subs	r3, #4
 800518a:	429d      	cmp	r5, r3
 800518c:	461a      	mov	r2, r3
 800518e:	d32e      	bcc.n	80051ee <quorem+0xfa>
 8005190:	613c      	str	r4, [r7, #16]
 8005192:	4638      	mov	r0, r7
 8005194:	f001 fc92 	bl	8006abc <__mcmp>
 8005198:	2800      	cmp	r0, #0
 800519a:	db24      	blt.n	80051e6 <quorem+0xf2>
 800519c:	3601      	adds	r6, #1
 800519e:	4628      	mov	r0, r5
 80051a0:	f04f 0c00 	mov.w	ip, #0
 80051a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80051a8:	f8d0 e000 	ldr.w	lr, [r0]
 80051ac:	b293      	uxth	r3, r2
 80051ae:	ebac 0303 	sub.w	r3, ip, r3
 80051b2:	0c12      	lsrs	r2, r2, #16
 80051b4:	fa13 f38e 	uxtah	r3, r3, lr
 80051b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051c6:	45c1      	cmp	r9, r8
 80051c8:	f840 3b04 	str.w	r3, [r0], #4
 80051cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051d0:	d2e8      	bcs.n	80051a4 <quorem+0xb0>
 80051d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051da:	b922      	cbnz	r2, 80051e6 <quorem+0xf2>
 80051dc:	3b04      	subs	r3, #4
 80051de:	429d      	cmp	r5, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	d30a      	bcc.n	80051fa <quorem+0x106>
 80051e4:	613c      	str	r4, [r7, #16]
 80051e6:	4630      	mov	r0, r6
 80051e8:	b003      	add	sp, #12
 80051ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	3b04      	subs	r3, #4
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	d1cc      	bne.n	8005190 <quorem+0x9c>
 80051f6:	3c01      	subs	r4, #1
 80051f8:	e7c7      	b.n	800518a <quorem+0x96>
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	2a00      	cmp	r2, #0
 8005200:	d1f0      	bne.n	80051e4 <quorem+0xf0>
 8005202:	3c01      	subs	r4, #1
 8005204:	e7eb      	b.n	80051de <quorem+0xea>
 8005206:	2000      	movs	r0, #0
 8005208:	e7ee      	b.n	80051e8 <quorem+0xf4>
 800520a:	0000      	movs	r0, r0
 800520c:	0000      	movs	r0, r0
	...

08005210 <_dtoa_r>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	ed2d 8b04 	vpush	{d8-d9}
 8005218:	ec57 6b10 	vmov	r6, r7, d0
 800521c:	b093      	sub	sp, #76	; 0x4c
 800521e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005224:	9106      	str	r1, [sp, #24]
 8005226:	ee10 aa10 	vmov	sl, s0
 800522a:	4604      	mov	r4, r0
 800522c:	9209      	str	r2, [sp, #36]	; 0x24
 800522e:	930c      	str	r3, [sp, #48]	; 0x30
 8005230:	46bb      	mov	fp, r7
 8005232:	b975      	cbnz	r5, 8005252 <_dtoa_r+0x42>
 8005234:	2010      	movs	r0, #16
 8005236:	f001 f94d 	bl	80064d4 <malloc>
 800523a:	4602      	mov	r2, r0
 800523c:	6260      	str	r0, [r4, #36]	; 0x24
 800523e:	b920      	cbnz	r0, 800524a <_dtoa_r+0x3a>
 8005240:	4ba7      	ldr	r3, [pc, #668]	; (80054e0 <_dtoa_r+0x2d0>)
 8005242:	21ea      	movs	r1, #234	; 0xea
 8005244:	48a7      	ldr	r0, [pc, #668]	; (80054e4 <_dtoa_r+0x2d4>)
 8005246:	f002 f8a9 	bl	800739c <__assert_func>
 800524a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800524e:	6005      	str	r5, [r0, #0]
 8005250:	60c5      	str	r5, [r0, #12]
 8005252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	b151      	cbz	r1, 800526e <_dtoa_r+0x5e>
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	604a      	str	r2, [r1, #4]
 800525c:	2301      	movs	r3, #1
 800525e:	4093      	lsls	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
 8005262:	4620      	mov	r0, r4
 8005264:	f001 f99e 	bl	80065a4 <_Bfree>
 8005268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	1e3b      	subs	r3, r7, #0
 8005270:	bfaa      	itet	ge
 8005272:	2300      	movge	r3, #0
 8005274:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005278:	f8c8 3000 	strge.w	r3, [r8]
 800527c:	4b9a      	ldr	r3, [pc, #616]	; (80054e8 <_dtoa_r+0x2d8>)
 800527e:	bfbc      	itt	lt
 8005280:	2201      	movlt	r2, #1
 8005282:	f8c8 2000 	strlt.w	r2, [r8]
 8005286:	ea33 030b 	bics.w	r3, r3, fp
 800528a:	d11b      	bne.n	80052c4 <_dtoa_r+0xb4>
 800528c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800528e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005298:	4333      	orrs	r3, r6
 800529a:	f000 8592 	beq.w	8005dc2 <_dtoa_r+0xbb2>
 800529e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052a0:	b963      	cbnz	r3, 80052bc <_dtoa_r+0xac>
 80052a2:	4b92      	ldr	r3, [pc, #584]	; (80054ec <_dtoa_r+0x2dc>)
 80052a4:	e022      	b.n	80052ec <_dtoa_r+0xdc>
 80052a6:	4b92      	ldr	r3, [pc, #584]	; (80054f0 <_dtoa_r+0x2e0>)
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	3308      	adds	r3, #8
 80052ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	9801      	ldr	r0, [sp, #4]
 80052b2:	b013      	add	sp, #76	; 0x4c
 80052b4:	ecbd 8b04 	vpop	{d8-d9}
 80052b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052bc:	4b8b      	ldr	r3, [pc, #556]	; (80054ec <_dtoa_r+0x2dc>)
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	3303      	adds	r3, #3
 80052c2:	e7f3      	b.n	80052ac <_dtoa_r+0x9c>
 80052c4:	2200      	movs	r2, #0
 80052c6:	2300      	movs	r3, #0
 80052c8:	4650      	mov	r0, sl
 80052ca:	4659      	mov	r1, fp
 80052cc:	f7fb fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 80052d0:	ec4b ab19 	vmov	d9, sl, fp
 80052d4:	4680      	mov	r8, r0
 80052d6:	b158      	cbz	r0, 80052f0 <_dtoa_r+0xe0>
 80052d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052da:	2301      	movs	r3, #1
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 856b 	beq.w	8005dbc <_dtoa_r+0xbac>
 80052e6:	4883      	ldr	r0, [pc, #524]	; (80054f4 <_dtoa_r+0x2e4>)
 80052e8:	6018      	str	r0, [r3, #0]
 80052ea:	1e43      	subs	r3, r0, #1
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	e7df      	b.n	80052b0 <_dtoa_r+0xa0>
 80052f0:	ec4b ab10 	vmov	d0, sl, fp
 80052f4:	aa10      	add	r2, sp, #64	; 0x40
 80052f6:	a911      	add	r1, sp, #68	; 0x44
 80052f8:	4620      	mov	r0, r4
 80052fa:	f001 fd01 	bl	8006d00 <__d2b>
 80052fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005302:	ee08 0a10 	vmov	s16, r0
 8005306:	2d00      	cmp	r5, #0
 8005308:	f000 8084 	beq.w	8005414 <_dtoa_r+0x204>
 800530c:	ee19 3a90 	vmov	r3, s19
 8005310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005314:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005318:	4656      	mov	r6, sl
 800531a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800531e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005322:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005326:	4b74      	ldr	r3, [pc, #464]	; (80054f8 <_dtoa_r+0x2e8>)
 8005328:	2200      	movs	r2, #0
 800532a:	4630      	mov	r0, r6
 800532c:	4639      	mov	r1, r7
 800532e:	f7fa ffcb 	bl	80002c8 <__aeabi_dsub>
 8005332:	a365      	add	r3, pc, #404	; (adr r3, 80054c8 <_dtoa_r+0x2b8>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fb f97e 	bl	8000638 <__aeabi_dmul>
 800533c:	a364      	add	r3, pc, #400	; (adr r3, 80054d0 <_dtoa_r+0x2c0>)
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	f7fa ffc3 	bl	80002cc <__adddf3>
 8005346:	4606      	mov	r6, r0
 8005348:	4628      	mov	r0, r5
 800534a:	460f      	mov	r7, r1
 800534c:	f7fb f90a 	bl	8000564 <__aeabi_i2d>
 8005350:	a361      	add	r3, pc, #388	; (adr r3, 80054d8 <_dtoa_r+0x2c8>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fb f96f 	bl	8000638 <__aeabi_dmul>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4630      	mov	r0, r6
 8005360:	4639      	mov	r1, r7
 8005362:	f7fa ffb3 	bl	80002cc <__adddf3>
 8005366:	4606      	mov	r6, r0
 8005368:	460f      	mov	r7, r1
 800536a:	f7fb fc15 	bl	8000b98 <__aeabi_d2iz>
 800536e:	2200      	movs	r2, #0
 8005370:	9000      	str	r0, [sp, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fb fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800537c:	b150      	cbz	r0, 8005394 <_dtoa_r+0x184>
 800537e:	9800      	ldr	r0, [sp, #0]
 8005380:	f7fb f8f0 	bl	8000564 <__aeabi_i2d>
 8005384:	4632      	mov	r2, r6
 8005386:	463b      	mov	r3, r7
 8005388:	f7fb fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800538c:	b910      	cbnz	r0, 8005394 <_dtoa_r+0x184>
 800538e:	9b00      	ldr	r3, [sp, #0]
 8005390:	3b01      	subs	r3, #1
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	9b00      	ldr	r3, [sp, #0]
 8005396:	2b16      	cmp	r3, #22
 8005398:	d85a      	bhi.n	8005450 <_dtoa_r+0x240>
 800539a:	9a00      	ldr	r2, [sp, #0]
 800539c:	4b57      	ldr	r3, [pc, #348]	; (80054fc <_dtoa_r+0x2ec>)
 800539e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	ec51 0b19 	vmov	r0, r1, d9
 80053aa:	f7fb fbb7 	bl	8000b1c <__aeabi_dcmplt>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d050      	beq.n	8005454 <_dtoa_r+0x244>
 80053b2:	9b00      	ldr	r3, [sp, #0]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2300      	movs	r3, #0
 80053ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80053bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053be:	1b5d      	subs	r5, r3, r5
 80053c0:	1e6b      	subs	r3, r5, #1
 80053c2:	9305      	str	r3, [sp, #20]
 80053c4:	bf45      	ittet	mi
 80053c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80053ca:	9304      	strmi	r3, [sp, #16]
 80053cc:	2300      	movpl	r3, #0
 80053ce:	2300      	movmi	r3, #0
 80053d0:	bf4c      	ite	mi
 80053d2:	9305      	strmi	r3, [sp, #20]
 80053d4:	9304      	strpl	r3, [sp, #16]
 80053d6:	9b00      	ldr	r3, [sp, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	db3d      	blt.n	8005458 <_dtoa_r+0x248>
 80053dc:	9b05      	ldr	r3, [sp, #20]
 80053de:	9a00      	ldr	r2, [sp, #0]
 80053e0:	920a      	str	r2, [sp, #40]	; 0x28
 80053e2:	4413      	add	r3, r2
 80053e4:	9305      	str	r3, [sp, #20]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	9b06      	ldr	r3, [sp, #24]
 80053ec:	2b09      	cmp	r3, #9
 80053ee:	f200 8089 	bhi.w	8005504 <_dtoa_r+0x2f4>
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	bfc4      	itt	gt
 80053f6:	3b04      	subgt	r3, #4
 80053f8:	9306      	strgt	r3, [sp, #24]
 80053fa:	9b06      	ldr	r3, [sp, #24]
 80053fc:	f1a3 0302 	sub.w	r3, r3, #2
 8005400:	bfcc      	ite	gt
 8005402:	2500      	movgt	r5, #0
 8005404:	2501      	movle	r5, #1
 8005406:	2b03      	cmp	r3, #3
 8005408:	f200 8087 	bhi.w	800551a <_dtoa_r+0x30a>
 800540c:	e8df f003 	tbb	[pc, r3]
 8005410:	59383a2d 	.word	0x59383a2d
 8005414:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005418:	441d      	add	r5, r3
 800541a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800541e:	2b20      	cmp	r3, #32
 8005420:	bfc1      	itttt	gt
 8005422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005426:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800542a:	fa0b f303 	lslgt.w	r3, fp, r3
 800542e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005432:	bfda      	itte	le
 8005434:	f1c3 0320 	rsble	r3, r3, #32
 8005438:	fa06 f003 	lslle.w	r0, r6, r3
 800543c:	4318      	orrgt	r0, r3
 800543e:	f7fb f881 	bl	8000544 <__aeabi_ui2d>
 8005442:	2301      	movs	r3, #1
 8005444:	4606      	mov	r6, r0
 8005446:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800544a:	3d01      	subs	r5, #1
 800544c:	930e      	str	r3, [sp, #56]	; 0x38
 800544e:	e76a      	b.n	8005326 <_dtoa_r+0x116>
 8005450:	2301      	movs	r3, #1
 8005452:	e7b2      	b.n	80053ba <_dtoa_r+0x1aa>
 8005454:	900b      	str	r0, [sp, #44]	; 0x2c
 8005456:	e7b1      	b.n	80053bc <_dtoa_r+0x1ac>
 8005458:	9b04      	ldr	r3, [sp, #16]
 800545a:	9a00      	ldr	r2, [sp, #0]
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	9304      	str	r3, [sp, #16]
 8005460:	4253      	negs	r3, r2
 8005462:	9307      	str	r3, [sp, #28]
 8005464:	2300      	movs	r3, #0
 8005466:	930a      	str	r3, [sp, #40]	; 0x28
 8005468:	e7bf      	b.n	80053ea <_dtoa_r+0x1da>
 800546a:	2300      	movs	r3, #0
 800546c:	9308      	str	r3, [sp, #32]
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	dc55      	bgt.n	8005520 <_dtoa_r+0x310>
 8005474:	2301      	movs	r3, #1
 8005476:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800547a:	461a      	mov	r2, r3
 800547c:	9209      	str	r2, [sp, #36]	; 0x24
 800547e:	e00c      	b.n	800549a <_dtoa_r+0x28a>
 8005480:	2301      	movs	r3, #1
 8005482:	e7f3      	b.n	800546c <_dtoa_r+0x25c>
 8005484:	2300      	movs	r3, #0
 8005486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005488:	9308      	str	r3, [sp, #32]
 800548a:	9b00      	ldr	r3, [sp, #0]
 800548c:	4413      	add	r3, r2
 800548e:	9302      	str	r3, [sp, #8]
 8005490:	3301      	adds	r3, #1
 8005492:	2b01      	cmp	r3, #1
 8005494:	9303      	str	r3, [sp, #12]
 8005496:	bfb8      	it	lt
 8005498:	2301      	movlt	r3, #1
 800549a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800549c:	2200      	movs	r2, #0
 800549e:	6042      	str	r2, [r0, #4]
 80054a0:	2204      	movs	r2, #4
 80054a2:	f102 0614 	add.w	r6, r2, #20
 80054a6:	429e      	cmp	r6, r3
 80054a8:	6841      	ldr	r1, [r0, #4]
 80054aa:	d93d      	bls.n	8005528 <_dtoa_r+0x318>
 80054ac:	4620      	mov	r0, r4
 80054ae:	f001 f839 	bl	8006524 <_Balloc>
 80054b2:	9001      	str	r0, [sp, #4]
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d13b      	bne.n	8005530 <_dtoa_r+0x320>
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <_dtoa_r+0x2f0>)
 80054ba:	4602      	mov	r2, r0
 80054bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054c0:	e6c0      	b.n	8005244 <_dtoa_r+0x34>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e7df      	b.n	8005486 <_dtoa_r+0x276>
 80054c6:	bf00      	nop
 80054c8:	636f4361 	.word	0x636f4361
 80054cc:	3fd287a7 	.word	0x3fd287a7
 80054d0:	8b60c8b3 	.word	0x8b60c8b3
 80054d4:	3fc68a28 	.word	0x3fc68a28
 80054d8:	509f79fb 	.word	0x509f79fb
 80054dc:	3fd34413 	.word	0x3fd34413
 80054e0:	0800805d 	.word	0x0800805d
 80054e4:	08008074 	.word	0x08008074
 80054e8:	7ff00000 	.word	0x7ff00000
 80054ec:	08008059 	.word	0x08008059
 80054f0:	08008050 	.word	0x08008050
 80054f4:	08007fd9 	.word	0x08007fd9
 80054f8:	3ff80000 	.word	0x3ff80000
 80054fc:	080081e0 	.word	0x080081e0
 8005500:	080080cf 	.word	0x080080cf
 8005504:	2501      	movs	r5, #1
 8005506:	2300      	movs	r3, #0
 8005508:	9306      	str	r3, [sp, #24]
 800550a:	9508      	str	r5, [sp, #32]
 800550c:	f04f 33ff 	mov.w	r3, #4294967295
 8005510:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005514:	2200      	movs	r2, #0
 8005516:	2312      	movs	r3, #18
 8005518:	e7b0      	b.n	800547c <_dtoa_r+0x26c>
 800551a:	2301      	movs	r3, #1
 800551c:	9308      	str	r3, [sp, #32]
 800551e:	e7f5      	b.n	800550c <_dtoa_r+0x2fc>
 8005520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005522:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005526:	e7b8      	b.n	800549a <_dtoa_r+0x28a>
 8005528:	3101      	adds	r1, #1
 800552a:	6041      	str	r1, [r0, #4]
 800552c:	0052      	lsls	r2, r2, #1
 800552e:	e7b8      	b.n	80054a2 <_dtoa_r+0x292>
 8005530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005532:	9a01      	ldr	r2, [sp, #4]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	2b0e      	cmp	r3, #14
 800553a:	f200 809d 	bhi.w	8005678 <_dtoa_r+0x468>
 800553e:	2d00      	cmp	r5, #0
 8005540:	f000 809a 	beq.w	8005678 <_dtoa_r+0x468>
 8005544:	9b00      	ldr	r3, [sp, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd32      	ble.n	80055b0 <_dtoa_r+0x3a0>
 800554a:	4ab7      	ldr	r2, [pc, #732]	; (8005828 <_dtoa_r+0x618>)
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005554:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005558:	9b00      	ldr	r3, [sp, #0]
 800555a:	05d8      	lsls	r0, r3, #23
 800555c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005560:	d516      	bpl.n	8005590 <_dtoa_r+0x380>
 8005562:	4bb2      	ldr	r3, [pc, #712]	; (800582c <_dtoa_r+0x61c>)
 8005564:	ec51 0b19 	vmov	r0, r1, d9
 8005568:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800556c:	f7fb f98e 	bl	800088c <__aeabi_ddiv>
 8005570:	f007 070f 	and.w	r7, r7, #15
 8005574:	4682      	mov	sl, r0
 8005576:	468b      	mov	fp, r1
 8005578:	2503      	movs	r5, #3
 800557a:	4eac      	ldr	r6, [pc, #688]	; (800582c <_dtoa_r+0x61c>)
 800557c:	b957      	cbnz	r7, 8005594 <_dtoa_r+0x384>
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	4650      	mov	r0, sl
 8005584:	4659      	mov	r1, fp
 8005586:	f7fb f981 	bl	800088c <__aeabi_ddiv>
 800558a:	4682      	mov	sl, r0
 800558c:	468b      	mov	fp, r1
 800558e:	e028      	b.n	80055e2 <_dtoa_r+0x3d2>
 8005590:	2502      	movs	r5, #2
 8005592:	e7f2      	b.n	800557a <_dtoa_r+0x36a>
 8005594:	07f9      	lsls	r1, r7, #31
 8005596:	d508      	bpl.n	80055aa <_dtoa_r+0x39a>
 8005598:	4640      	mov	r0, r8
 800559a:	4649      	mov	r1, r9
 800559c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055a0:	f7fb f84a 	bl	8000638 <__aeabi_dmul>
 80055a4:	3501      	adds	r5, #1
 80055a6:	4680      	mov	r8, r0
 80055a8:	4689      	mov	r9, r1
 80055aa:	107f      	asrs	r7, r7, #1
 80055ac:	3608      	adds	r6, #8
 80055ae:	e7e5      	b.n	800557c <_dtoa_r+0x36c>
 80055b0:	f000 809b 	beq.w	80056ea <_dtoa_r+0x4da>
 80055b4:	9b00      	ldr	r3, [sp, #0]
 80055b6:	4f9d      	ldr	r7, [pc, #628]	; (800582c <_dtoa_r+0x61c>)
 80055b8:	425e      	negs	r6, r3
 80055ba:	4b9b      	ldr	r3, [pc, #620]	; (8005828 <_dtoa_r+0x618>)
 80055bc:	f006 020f 	and.w	r2, r6, #15
 80055c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	ec51 0b19 	vmov	r0, r1, d9
 80055cc:	f7fb f834 	bl	8000638 <__aeabi_dmul>
 80055d0:	1136      	asrs	r6, r6, #4
 80055d2:	4682      	mov	sl, r0
 80055d4:	468b      	mov	fp, r1
 80055d6:	2300      	movs	r3, #0
 80055d8:	2502      	movs	r5, #2
 80055da:	2e00      	cmp	r6, #0
 80055dc:	d17a      	bne.n	80056d4 <_dtoa_r+0x4c4>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1d3      	bne.n	800558a <_dtoa_r+0x37a>
 80055e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8082 	beq.w	80056ee <_dtoa_r+0x4de>
 80055ea:	4b91      	ldr	r3, [pc, #580]	; (8005830 <_dtoa_r+0x620>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	4650      	mov	r0, sl
 80055f0:	4659      	mov	r1, fp
 80055f2:	f7fb fa93 	bl	8000b1c <__aeabi_dcmplt>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d079      	beq.n	80056ee <_dtoa_r+0x4de>
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d076      	beq.n	80056ee <_dtoa_r+0x4de>
 8005600:	9b02      	ldr	r3, [sp, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	dd36      	ble.n	8005674 <_dtoa_r+0x464>
 8005606:	9b00      	ldr	r3, [sp, #0]
 8005608:	4650      	mov	r0, sl
 800560a:	4659      	mov	r1, fp
 800560c:	1e5f      	subs	r7, r3, #1
 800560e:	2200      	movs	r2, #0
 8005610:	4b88      	ldr	r3, [pc, #544]	; (8005834 <_dtoa_r+0x624>)
 8005612:	f7fb f811 	bl	8000638 <__aeabi_dmul>
 8005616:	9e02      	ldr	r6, [sp, #8]
 8005618:	4682      	mov	sl, r0
 800561a:	468b      	mov	fp, r1
 800561c:	3501      	adds	r5, #1
 800561e:	4628      	mov	r0, r5
 8005620:	f7fa ffa0 	bl	8000564 <__aeabi_i2d>
 8005624:	4652      	mov	r2, sl
 8005626:	465b      	mov	r3, fp
 8005628:	f7fb f806 	bl	8000638 <__aeabi_dmul>
 800562c:	4b82      	ldr	r3, [pc, #520]	; (8005838 <_dtoa_r+0x628>)
 800562e:	2200      	movs	r2, #0
 8005630:	f7fa fe4c 	bl	80002cc <__adddf3>
 8005634:	46d0      	mov	r8, sl
 8005636:	46d9      	mov	r9, fp
 8005638:	4682      	mov	sl, r0
 800563a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800563e:	2e00      	cmp	r6, #0
 8005640:	d158      	bne.n	80056f4 <_dtoa_r+0x4e4>
 8005642:	4b7e      	ldr	r3, [pc, #504]	; (800583c <_dtoa_r+0x62c>)
 8005644:	2200      	movs	r2, #0
 8005646:	4640      	mov	r0, r8
 8005648:	4649      	mov	r1, r9
 800564a:	f7fa fe3d 	bl	80002c8 <__aeabi_dsub>
 800564e:	4652      	mov	r2, sl
 8005650:	465b      	mov	r3, fp
 8005652:	4680      	mov	r8, r0
 8005654:	4689      	mov	r9, r1
 8005656:	f7fb fa7f 	bl	8000b58 <__aeabi_dcmpgt>
 800565a:	2800      	cmp	r0, #0
 800565c:	f040 8295 	bne.w	8005b8a <_dtoa_r+0x97a>
 8005660:	4652      	mov	r2, sl
 8005662:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005666:	4640      	mov	r0, r8
 8005668:	4649      	mov	r1, r9
 800566a:	f7fb fa57 	bl	8000b1c <__aeabi_dcmplt>
 800566e:	2800      	cmp	r0, #0
 8005670:	f040 8289 	bne.w	8005b86 <_dtoa_r+0x976>
 8005674:	ec5b ab19 	vmov	sl, fp, d9
 8005678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800567a:	2b00      	cmp	r3, #0
 800567c:	f2c0 8148 	blt.w	8005910 <_dtoa_r+0x700>
 8005680:	9a00      	ldr	r2, [sp, #0]
 8005682:	2a0e      	cmp	r2, #14
 8005684:	f300 8144 	bgt.w	8005910 <_dtoa_r+0x700>
 8005688:	4b67      	ldr	r3, [pc, #412]	; (8005828 <_dtoa_r+0x618>)
 800568a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800568e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005694:	2b00      	cmp	r3, #0
 8005696:	f280 80d5 	bge.w	8005844 <_dtoa_r+0x634>
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f300 80d1 	bgt.w	8005844 <_dtoa_r+0x634>
 80056a2:	f040 826f 	bne.w	8005b84 <_dtoa_r+0x974>
 80056a6:	4b65      	ldr	r3, [pc, #404]	; (800583c <_dtoa_r+0x62c>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	f7fa ffc3 	bl	8000638 <__aeabi_dmul>
 80056b2:	4652      	mov	r2, sl
 80056b4:	465b      	mov	r3, fp
 80056b6:	f7fb fa45 	bl	8000b44 <__aeabi_dcmpge>
 80056ba:	9e03      	ldr	r6, [sp, #12]
 80056bc:	4637      	mov	r7, r6
 80056be:	2800      	cmp	r0, #0
 80056c0:	f040 8245 	bne.w	8005b4e <_dtoa_r+0x93e>
 80056c4:	9d01      	ldr	r5, [sp, #4]
 80056c6:	2331      	movs	r3, #49	; 0x31
 80056c8:	f805 3b01 	strb.w	r3, [r5], #1
 80056cc:	9b00      	ldr	r3, [sp, #0]
 80056ce:	3301      	adds	r3, #1
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	e240      	b.n	8005b56 <_dtoa_r+0x946>
 80056d4:	07f2      	lsls	r2, r6, #31
 80056d6:	d505      	bpl.n	80056e4 <_dtoa_r+0x4d4>
 80056d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056dc:	f7fa ffac 	bl	8000638 <__aeabi_dmul>
 80056e0:	3501      	adds	r5, #1
 80056e2:	2301      	movs	r3, #1
 80056e4:	1076      	asrs	r6, r6, #1
 80056e6:	3708      	adds	r7, #8
 80056e8:	e777      	b.n	80055da <_dtoa_r+0x3ca>
 80056ea:	2502      	movs	r5, #2
 80056ec:	e779      	b.n	80055e2 <_dtoa_r+0x3d2>
 80056ee:	9f00      	ldr	r7, [sp, #0]
 80056f0:	9e03      	ldr	r6, [sp, #12]
 80056f2:	e794      	b.n	800561e <_dtoa_r+0x40e>
 80056f4:	9901      	ldr	r1, [sp, #4]
 80056f6:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <_dtoa_r+0x618>)
 80056f8:	4431      	add	r1, r6
 80056fa:	910d      	str	r1, [sp, #52]	; 0x34
 80056fc:	9908      	ldr	r1, [sp, #32]
 80056fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005706:	2900      	cmp	r1, #0
 8005708:	d043      	beq.n	8005792 <_dtoa_r+0x582>
 800570a:	494d      	ldr	r1, [pc, #308]	; (8005840 <_dtoa_r+0x630>)
 800570c:	2000      	movs	r0, #0
 800570e:	f7fb f8bd 	bl	800088c <__aeabi_ddiv>
 8005712:	4652      	mov	r2, sl
 8005714:	465b      	mov	r3, fp
 8005716:	f7fa fdd7 	bl	80002c8 <__aeabi_dsub>
 800571a:	9d01      	ldr	r5, [sp, #4]
 800571c:	4682      	mov	sl, r0
 800571e:	468b      	mov	fp, r1
 8005720:	4649      	mov	r1, r9
 8005722:	4640      	mov	r0, r8
 8005724:	f7fb fa38 	bl	8000b98 <__aeabi_d2iz>
 8005728:	4606      	mov	r6, r0
 800572a:	f7fa ff1b 	bl	8000564 <__aeabi_i2d>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4640      	mov	r0, r8
 8005734:	4649      	mov	r1, r9
 8005736:	f7fa fdc7 	bl	80002c8 <__aeabi_dsub>
 800573a:	3630      	adds	r6, #48	; 0x30
 800573c:	f805 6b01 	strb.w	r6, [r5], #1
 8005740:	4652      	mov	r2, sl
 8005742:	465b      	mov	r3, fp
 8005744:	4680      	mov	r8, r0
 8005746:	4689      	mov	r9, r1
 8005748:	f7fb f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800574c:	2800      	cmp	r0, #0
 800574e:	d163      	bne.n	8005818 <_dtoa_r+0x608>
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	4936      	ldr	r1, [pc, #216]	; (8005830 <_dtoa_r+0x620>)
 8005756:	2000      	movs	r0, #0
 8005758:	f7fa fdb6 	bl	80002c8 <__aeabi_dsub>
 800575c:	4652      	mov	r2, sl
 800575e:	465b      	mov	r3, fp
 8005760:	f7fb f9dc 	bl	8000b1c <__aeabi_dcmplt>
 8005764:	2800      	cmp	r0, #0
 8005766:	f040 80b5 	bne.w	80058d4 <_dtoa_r+0x6c4>
 800576a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800576c:	429d      	cmp	r5, r3
 800576e:	d081      	beq.n	8005674 <_dtoa_r+0x464>
 8005770:	4b30      	ldr	r3, [pc, #192]	; (8005834 <_dtoa_r+0x624>)
 8005772:	2200      	movs	r2, #0
 8005774:	4650      	mov	r0, sl
 8005776:	4659      	mov	r1, fp
 8005778:	f7fa ff5e 	bl	8000638 <__aeabi_dmul>
 800577c:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <_dtoa_r+0x624>)
 800577e:	4682      	mov	sl, r0
 8005780:	468b      	mov	fp, r1
 8005782:	4640      	mov	r0, r8
 8005784:	4649      	mov	r1, r9
 8005786:	2200      	movs	r2, #0
 8005788:	f7fa ff56 	bl	8000638 <__aeabi_dmul>
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	e7c6      	b.n	8005720 <_dtoa_r+0x510>
 8005792:	4650      	mov	r0, sl
 8005794:	4659      	mov	r1, fp
 8005796:	f7fa ff4f 	bl	8000638 <__aeabi_dmul>
 800579a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800579c:	9d01      	ldr	r5, [sp, #4]
 800579e:	930f      	str	r3, [sp, #60]	; 0x3c
 80057a0:	4682      	mov	sl, r0
 80057a2:	468b      	mov	fp, r1
 80057a4:	4649      	mov	r1, r9
 80057a6:	4640      	mov	r0, r8
 80057a8:	f7fb f9f6 	bl	8000b98 <__aeabi_d2iz>
 80057ac:	4606      	mov	r6, r0
 80057ae:	f7fa fed9 	bl	8000564 <__aeabi_i2d>
 80057b2:	3630      	adds	r6, #48	; 0x30
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4640      	mov	r0, r8
 80057ba:	4649      	mov	r1, r9
 80057bc:	f7fa fd84 	bl	80002c8 <__aeabi_dsub>
 80057c0:	f805 6b01 	strb.w	r6, [r5], #1
 80057c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057c6:	429d      	cmp	r5, r3
 80057c8:	4680      	mov	r8, r0
 80057ca:	4689      	mov	r9, r1
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	d124      	bne.n	800581c <_dtoa_r+0x60c>
 80057d2:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <_dtoa_r+0x630>)
 80057d4:	4650      	mov	r0, sl
 80057d6:	4659      	mov	r1, fp
 80057d8:	f7fa fd78 	bl	80002cc <__adddf3>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4640      	mov	r0, r8
 80057e2:	4649      	mov	r1, r9
 80057e4:	f7fb f9b8 	bl	8000b58 <__aeabi_dcmpgt>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d173      	bne.n	80058d4 <_dtoa_r+0x6c4>
 80057ec:	4652      	mov	r2, sl
 80057ee:	465b      	mov	r3, fp
 80057f0:	4913      	ldr	r1, [pc, #76]	; (8005840 <_dtoa_r+0x630>)
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7fa fd68 	bl	80002c8 <__aeabi_dsub>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4640      	mov	r0, r8
 80057fe:	4649      	mov	r1, r9
 8005800:	f7fb f98c 	bl	8000b1c <__aeabi_dcmplt>
 8005804:	2800      	cmp	r0, #0
 8005806:	f43f af35 	beq.w	8005674 <_dtoa_r+0x464>
 800580a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800580c:	1e6b      	subs	r3, r5, #1
 800580e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005810:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d0f8      	beq.n	800580a <_dtoa_r+0x5fa>
 8005818:	9700      	str	r7, [sp, #0]
 800581a:	e049      	b.n	80058b0 <_dtoa_r+0x6a0>
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <_dtoa_r+0x624>)
 800581e:	f7fa ff0b 	bl	8000638 <__aeabi_dmul>
 8005822:	4680      	mov	r8, r0
 8005824:	4689      	mov	r9, r1
 8005826:	e7bd      	b.n	80057a4 <_dtoa_r+0x594>
 8005828:	080081e0 	.word	0x080081e0
 800582c:	080081b8 	.word	0x080081b8
 8005830:	3ff00000 	.word	0x3ff00000
 8005834:	40240000 	.word	0x40240000
 8005838:	401c0000 	.word	0x401c0000
 800583c:	40140000 	.word	0x40140000
 8005840:	3fe00000 	.word	0x3fe00000
 8005844:	9d01      	ldr	r5, [sp, #4]
 8005846:	4656      	mov	r6, sl
 8005848:	465f      	mov	r7, fp
 800584a:	4642      	mov	r2, r8
 800584c:	464b      	mov	r3, r9
 800584e:	4630      	mov	r0, r6
 8005850:	4639      	mov	r1, r7
 8005852:	f7fb f81b 	bl	800088c <__aeabi_ddiv>
 8005856:	f7fb f99f 	bl	8000b98 <__aeabi_d2iz>
 800585a:	4682      	mov	sl, r0
 800585c:	f7fa fe82 	bl	8000564 <__aeabi_i2d>
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	f7fa fee8 	bl	8000638 <__aeabi_dmul>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4630      	mov	r0, r6
 800586e:	4639      	mov	r1, r7
 8005870:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005874:	f7fa fd28 	bl	80002c8 <__aeabi_dsub>
 8005878:	f805 6b01 	strb.w	r6, [r5], #1
 800587c:	9e01      	ldr	r6, [sp, #4]
 800587e:	9f03      	ldr	r7, [sp, #12]
 8005880:	1bae      	subs	r6, r5, r6
 8005882:	42b7      	cmp	r7, r6
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	d135      	bne.n	80058f6 <_dtoa_r+0x6e6>
 800588a:	f7fa fd1f 	bl	80002cc <__adddf3>
 800588e:	4642      	mov	r2, r8
 8005890:	464b      	mov	r3, r9
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	f7fb f95f 	bl	8000b58 <__aeabi_dcmpgt>
 800589a:	b9d0      	cbnz	r0, 80058d2 <_dtoa_r+0x6c2>
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fb f930 	bl	8000b08 <__aeabi_dcmpeq>
 80058a8:	b110      	cbz	r0, 80058b0 <_dtoa_r+0x6a0>
 80058aa:	f01a 0f01 	tst.w	sl, #1
 80058ae:	d110      	bne.n	80058d2 <_dtoa_r+0x6c2>
 80058b0:	4620      	mov	r0, r4
 80058b2:	ee18 1a10 	vmov	r1, s16
 80058b6:	f000 fe75 	bl	80065a4 <_Bfree>
 80058ba:	2300      	movs	r3, #0
 80058bc:	9800      	ldr	r0, [sp, #0]
 80058be:	702b      	strb	r3, [r5, #0]
 80058c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c2:	3001      	adds	r0, #1
 80058c4:	6018      	str	r0, [r3, #0]
 80058c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f43f acf1 	beq.w	80052b0 <_dtoa_r+0xa0>
 80058ce:	601d      	str	r5, [r3, #0]
 80058d0:	e4ee      	b.n	80052b0 <_dtoa_r+0xa0>
 80058d2:	9f00      	ldr	r7, [sp, #0]
 80058d4:	462b      	mov	r3, r5
 80058d6:	461d      	mov	r5, r3
 80058d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058dc:	2a39      	cmp	r2, #57	; 0x39
 80058de:	d106      	bne.n	80058ee <_dtoa_r+0x6de>
 80058e0:	9a01      	ldr	r2, [sp, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d1f7      	bne.n	80058d6 <_dtoa_r+0x6c6>
 80058e6:	9901      	ldr	r1, [sp, #4]
 80058e8:	2230      	movs	r2, #48	; 0x30
 80058ea:	3701      	adds	r7, #1
 80058ec:	700a      	strb	r2, [r1, #0]
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	3201      	adds	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e790      	b.n	8005818 <_dtoa_r+0x608>
 80058f6:	4ba6      	ldr	r3, [pc, #664]	; (8005b90 <_dtoa_r+0x980>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	f7fa fe9d 	bl	8000638 <__aeabi_dmul>
 80058fe:	2200      	movs	r2, #0
 8005900:	2300      	movs	r3, #0
 8005902:	4606      	mov	r6, r0
 8005904:	460f      	mov	r7, r1
 8005906:	f7fb f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 800590a:	2800      	cmp	r0, #0
 800590c:	d09d      	beq.n	800584a <_dtoa_r+0x63a>
 800590e:	e7cf      	b.n	80058b0 <_dtoa_r+0x6a0>
 8005910:	9a08      	ldr	r2, [sp, #32]
 8005912:	2a00      	cmp	r2, #0
 8005914:	f000 80d7 	beq.w	8005ac6 <_dtoa_r+0x8b6>
 8005918:	9a06      	ldr	r2, [sp, #24]
 800591a:	2a01      	cmp	r2, #1
 800591c:	f300 80ba 	bgt.w	8005a94 <_dtoa_r+0x884>
 8005920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005922:	2a00      	cmp	r2, #0
 8005924:	f000 80b2 	beq.w	8005a8c <_dtoa_r+0x87c>
 8005928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800592c:	9e07      	ldr	r6, [sp, #28]
 800592e:	9d04      	ldr	r5, [sp, #16]
 8005930:	9a04      	ldr	r2, [sp, #16]
 8005932:	441a      	add	r2, r3
 8005934:	9204      	str	r2, [sp, #16]
 8005936:	9a05      	ldr	r2, [sp, #20]
 8005938:	2101      	movs	r1, #1
 800593a:	441a      	add	r2, r3
 800593c:	4620      	mov	r0, r4
 800593e:	9205      	str	r2, [sp, #20]
 8005940:	f000 ff32 	bl	80067a8 <__i2b>
 8005944:	4607      	mov	r7, r0
 8005946:	2d00      	cmp	r5, #0
 8005948:	dd0c      	ble.n	8005964 <_dtoa_r+0x754>
 800594a:	9b05      	ldr	r3, [sp, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	dd09      	ble.n	8005964 <_dtoa_r+0x754>
 8005950:	42ab      	cmp	r3, r5
 8005952:	9a04      	ldr	r2, [sp, #16]
 8005954:	bfa8      	it	ge
 8005956:	462b      	movge	r3, r5
 8005958:	1ad2      	subs	r2, r2, r3
 800595a:	9204      	str	r2, [sp, #16]
 800595c:	9a05      	ldr	r2, [sp, #20]
 800595e:	1aed      	subs	r5, r5, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	9b07      	ldr	r3, [sp, #28]
 8005966:	b31b      	cbz	r3, 80059b0 <_dtoa_r+0x7a0>
 8005968:	9b08      	ldr	r3, [sp, #32]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80af 	beq.w	8005ace <_dtoa_r+0x8be>
 8005970:	2e00      	cmp	r6, #0
 8005972:	dd13      	ble.n	800599c <_dtoa_r+0x78c>
 8005974:	4639      	mov	r1, r7
 8005976:	4632      	mov	r2, r6
 8005978:	4620      	mov	r0, r4
 800597a:	f000 ffd5 	bl	8006928 <__pow5mult>
 800597e:	ee18 2a10 	vmov	r2, s16
 8005982:	4601      	mov	r1, r0
 8005984:	4607      	mov	r7, r0
 8005986:	4620      	mov	r0, r4
 8005988:	f000 ff24 	bl	80067d4 <__multiply>
 800598c:	ee18 1a10 	vmov	r1, s16
 8005990:	4680      	mov	r8, r0
 8005992:	4620      	mov	r0, r4
 8005994:	f000 fe06 	bl	80065a4 <_Bfree>
 8005998:	ee08 8a10 	vmov	s16, r8
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	1b9a      	subs	r2, r3, r6
 80059a0:	d006      	beq.n	80059b0 <_dtoa_r+0x7a0>
 80059a2:	ee18 1a10 	vmov	r1, s16
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 ffbe 	bl	8006928 <__pow5mult>
 80059ac:	ee08 0a10 	vmov	s16, r0
 80059b0:	2101      	movs	r1, #1
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 fef8 	bl	80067a8 <__i2b>
 80059b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	4606      	mov	r6, r0
 80059be:	f340 8088 	ble.w	8005ad2 <_dtoa_r+0x8c2>
 80059c2:	461a      	mov	r2, r3
 80059c4:	4601      	mov	r1, r0
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 ffae 	bl	8006928 <__pow5mult>
 80059cc:	9b06      	ldr	r3, [sp, #24]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	4606      	mov	r6, r0
 80059d2:	f340 8081 	ble.w	8005ad8 <_dtoa_r+0x8c8>
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	6933      	ldr	r3, [r6, #16]
 80059dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059e0:	6918      	ldr	r0, [r3, #16]
 80059e2:	f000 fe91 	bl	8006708 <__hi0bits>
 80059e6:	f1c0 0020 	rsb	r0, r0, #32
 80059ea:	9b05      	ldr	r3, [sp, #20]
 80059ec:	4418      	add	r0, r3
 80059ee:	f010 001f 	ands.w	r0, r0, #31
 80059f2:	f000 8092 	beq.w	8005b1a <_dtoa_r+0x90a>
 80059f6:	f1c0 0320 	rsb	r3, r0, #32
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	f340 808a 	ble.w	8005b14 <_dtoa_r+0x904>
 8005a00:	f1c0 001c 	rsb	r0, r0, #28
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	4403      	add	r3, r0
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	9b05      	ldr	r3, [sp, #20]
 8005a0c:	4403      	add	r3, r0
 8005a0e:	4405      	add	r5, r0
 8005a10:	9305      	str	r3, [sp, #20]
 8005a12:	9b04      	ldr	r3, [sp, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dd07      	ble.n	8005a28 <_dtoa_r+0x818>
 8005a18:	ee18 1a10 	vmov	r1, s16
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 ffdc 	bl	80069dc <__lshift>
 8005a24:	ee08 0a10 	vmov	s16, r0
 8005a28:	9b05      	ldr	r3, [sp, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	dd05      	ble.n	8005a3a <_dtoa_r+0x82a>
 8005a2e:	4631      	mov	r1, r6
 8005a30:	461a      	mov	r2, r3
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 ffd2 	bl	80069dc <__lshift>
 8005a38:	4606      	mov	r6, r0
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d06e      	beq.n	8005b1e <_dtoa_r+0x90e>
 8005a40:	ee18 0a10 	vmov	r0, s16
 8005a44:	4631      	mov	r1, r6
 8005a46:	f001 f839 	bl	8006abc <__mcmp>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	da67      	bge.n	8005b1e <_dtoa_r+0x90e>
 8005a4e:	9b00      	ldr	r3, [sp, #0]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	ee18 1a10 	vmov	r1, s16
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	220a      	movs	r2, #10
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 fdc3 	bl	80065e8 <__multadd>
 8005a62:	9b08      	ldr	r3, [sp, #32]
 8005a64:	ee08 0a10 	vmov	s16, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 81b1 	beq.w	8005dd0 <_dtoa_r+0xbc0>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4639      	mov	r1, r7
 8005a72:	220a      	movs	r2, #10
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fdb7 	bl	80065e8 <__multadd>
 8005a7a:	9b02      	ldr	r3, [sp, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	4607      	mov	r7, r0
 8005a80:	f300 808e 	bgt.w	8005ba0 <_dtoa_r+0x990>
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	dc51      	bgt.n	8005b2e <_dtoa_r+0x91e>
 8005a8a:	e089      	b.n	8005ba0 <_dtoa_r+0x990>
 8005a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a92:	e74b      	b.n	800592c <_dtoa_r+0x71c>
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	1e5e      	subs	r6, r3, #1
 8005a98:	9b07      	ldr	r3, [sp, #28]
 8005a9a:	42b3      	cmp	r3, r6
 8005a9c:	bfbf      	itttt	lt
 8005a9e:	9b07      	ldrlt	r3, [sp, #28]
 8005aa0:	9607      	strlt	r6, [sp, #28]
 8005aa2:	1af2      	sublt	r2, r6, r3
 8005aa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005aa6:	bfb6      	itet	lt
 8005aa8:	189b      	addlt	r3, r3, r2
 8005aaa:	1b9e      	subge	r6, r3, r6
 8005aac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	bfb8      	it	lt
 8005ab2:	2600      	movlt	r6, #0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bfb7      	itett	lt
 8005ab8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005abc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005ac0:	1a9d      	sublt	r5, r3, r2
 8005ac2:	2300      	movlt	r3, #0
 8005ac4:	e734      	b.n	8005930 <_dtoa_r+0x720>
 8005ac6:	9e07      	ldr	r6, [sp, #28]
 8005ac8:	9d04      	ldr	r5, [sp, #16]
 8005aca:	9f08      	ldr	r7, [sp, #32]
 8005acc:	e73b      	b.n	8005946 <_dtoa_r+0x736>
 8005ace:	9a07      	ldr	r2, [sp, #28]
 8005ad0:	e767      	b.n	80059a2 <_dtoa_r+0x792>
 8005ad2:	9b06      	ldr	r3, [sp, #24]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	dc18      	bgt.n	8005b0a <_dtoa_r+0x8fa>
 8005ad8:	f1ba 0f00 	cmp.w	sl, #0
 8005adc:	d115      	bne.n	8005b0a <_dtoa_r+0x8fa>
 8005ade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ae2:	b993      	cbnz	r3, 8005b0a <_dtoa_r+0x8fa>
 8005ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ae8:	0d1b      	lsrs	r3, r3, #20
 8005aea:	051b      	lsls	r3, r3, #20
 8005aec:	b183      	cbz	r3, 8005b10 <_dtoa_r+0x900>
 8005aee:	9b04      	ldr	r3, [sp, #16]
 8005af0:	3301      	adds	r3, #1
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	9b05      	ldr	r3, [sp, #20]
 8005af6:	3301      	adds	r3, #1
 8005af8:	9305      	str	r3, [sp, #20]
 8005afa:	f04f 0801 	mov.w	r8, #1
 8005afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f47f af6a 	bne.w	80059da <_dtoa_r+0x7ca>
 8005b06:	2001      	movs	r0, #1
 8005b08:	e76f      	b.n	80059ea <_dtoa_r+0x7da>
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	e7f6      	b.n	8005afe <_dtoa_r+0x8ee>
 8005b10:	4698      	mov	r8, r3
 8005b12:	e7f4      	b.n	8005afe <_dtoa_r+0x8ee>
 8005b14:	f43f af7d 	beq.w	8005a12 <_dtoa_r+0x802>
 8005b18:	4618      	mov	r0, r3
 8005b1a:	301c      	adds	r0, #28
 8005b1c:	e772      	b.n	8005a04 <_dtoa_r+0x7f4>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	dc37      	bgt.n	8005b94 <_dtoa_r+0x984>
 8005b24:	9b06      	ldr	r3, [sp, #24]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	dd34      	ble.n	8005b94 <_dtoa_r+0x984>
 8005b2a:	9b03      	ldr	r3, [sp, #12]
 8005b2c:	9302      	str	r3, [sp, #8]
 8005b2e:	9b02      	ldr	r3, [sp, #8]
 8005b30:	b96b      	cbnz	r3, 8005b4e <_dtoa_r+0x93e>
 8005b32:	4631      	mov	r1, r6
 8005b34:	2205      	movs	r2, #5
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 fd56 	bl	80065e8 <__multadd>
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	4606      	mov	r6, r0
 8005b40:	ee18 0a10 	vmov	r0, s16
 8005b44:	f000 ffba 	bl	8006abc <__mcmp>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	f73f adbb 	bgt.w	80056c4 <_dtoa_r+0x4b4>
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	9d01      	ldr	r5, [sp, #4]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	f04f 0800 	mov.w	r8, #0
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fd21 	bl	80065a4 <_Bfree>
 8005b62:	2f00      	cmp	r7, #0
 8005b64:	f43f aea4 	beq.w	80058b0 <_dtoa_r+0x6a0>
 8005b68:	f1b8 0f00 	cmp.w	r8, #0
 8005b6c:	d005      	beq.n	8005b7a <_dtoa_r+0x96a>
 8005b6e:	45b8      	cmp	r8, r7
 8005b70:	d003      	beq.n	8005b7a <_dtoa_r+0x96a>
 8005b72:	4641      	mov	r1, r8
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fd15 	bl	80065a4 <_Bfree>
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fd11 	bl	80065a4 <_Bfree>
 8005b82:	e695      	b.n	80058b0 <_dtoa_r+0x6a0>
 8005b84:	2600      	movs	r6, #0
 8005b86:	4637      	mov	r7, r6
 8005b88:	e7e1      	b.n	8005b4e <_dtoa_r+0x93e>
 8005b8a:	9700      	str	r7, [sp, #0]
 8005b8c:	4637      	mov	r7, r6
 8005b8e:	e599      	b.n	80056c4 <_dtoa_r+0x4b4>
 8005b90:	40240000 	.word	0x40240000
 8005b94:	9b08      	ldr	r3, [sp, #32]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80ca 	beq.w	8005d30 <_dtoa_r+0xb20>
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	dd05      	ble.n	8005bb0 <_dtoa_r+0x9a0>
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 ff17 	bl	80069dc <__lshift>
 8005bae:	4607      	mov	r7, r0
 8005bb0:	f1b8 0f00 	cmp.w	r8, #0
 8005bb4:	d05b      	beq.n	8005c6e <_dtoa_r+0xa5e>
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fcb3 	bl	8006524 <_Balloc>
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	b928      	cbnz	r0, 8005bce <_dtoa_r+0x9be>
 8005bc2:	4b87      	ldr	r3, [pc, #540]	; (8005de0 <_dtoa_r+0xbd0>)
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005bca:	f7ff bb3b 	b.w	8005244 <_dtoa_r+0x34>
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	3202      	adds	r2, #2
 8005bd2:	0092      	lsls	r2, r2, #2
 8005bd4:	f107 010c 	add.w	r1, r7, #12
 8005bd8:	300c      	adds	r0, #12
 8005bda:	f000 fc95 	bl	8006508 <memcpy>
 8005bde:	2201      	movs	r2, #1
 8005be0:	4629      	mov	r1, r5
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 fefa 	bl	80069dc <__lshift>
 8005be8:	9b01      	ldr	r3, [sp, #4]
 8005bea:	f103 0901 	add.w	r9, r3, #1
 8005bee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	9305      	str	r3, [sp, #20]
 8005bf6:	f00a 0301 	and.w	r3, sl, #1
 8005bfa:	46b8      	mov	r8, r7
 8005bfc:	9304      	str	r3, [sp, #16]
 8005bfe:	4607      	mov	r7, r0
 8005c00:	4631      	mov	r1, r6
 8005c02:	ee18 0a10 	vmov	r0, s16
 8005c06:	f7ff fa75 	bl	80050f4 <quorem>
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	9002      	str	r0, [sp, #8]
 8005c0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c12:	ee18 0a10 	vmov	r0, s16
 8005c16:	f000 ff51 	bl	8006abc <__mcmp>
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	9003      	str	r0, [sp, #12]
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 ff67 	bl	8006af4 <__mdiff>
 8005c26:	68c2      	ldr	r2, [r0, #12]
 8005c28:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	bb02      	cbnz	r2, 8005c72 <_dtoa_r+0xa62>
 8005c30:	4601      	mov	r1, r0
 8005c32:	ee18 0a10 	vmov	r0, s16
 8005c36:	f000 ff41 	bl	8006abc <__mcmp>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4620      	mov	r0, r4
 8005c40:	9207      	str	r2, [sp, #28]
 8005c42:	f000 fcaf 	bl	80065a4 <_Bfree>
 8005c46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005c4a:	ea43 0102 	orr.w	r1, r3, r2
 8005c4e:	9b04      	ldr	r3, [sp, #16]
 8005c50:	430b      	orrs	r3, r1
 8005c52:	464d      	mov	r5, r9
 8005c54:	d10f      	bne.n	8005c76 <_dtoa_r+0xa66>
 8005c56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c5a:	d02a      	beq.n	8005cb2 <_dtoa_r+0xaa2>
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	dd02      	ble.n	8005c68 <_dtoa_r+0xa58>
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005c68:	f88b a000 	strb.w	sl, [fp]
 8005c6c:	e775      	b.n	8005b5a <_dtoa_r+0x94a>
 8005c6e:	4638      	mov	r0, r7
 8005c70:	e7ba      	b.n	8005be8 <_dtoa_r+0x9d8>
 8005c72:	2201      	movs	r2, #1
 8005c74:	e7e2      	b.n	8005c3c <_dtoa_r+0xa2c>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	db04      	blt.n	8005c86 <_dtoa_r+0xa76>
 8005c7c:	9906      	ldr	r1, [sp, #24]
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	9904      	ldr	r1, [sp, #16]
 8005c82:	430b      	orrs	r3, r1
 8005c84:	d122      	bne.n	8005ccc <_dtoa_r+0xabc>
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	ddee      	ble.n	8005c68 <_dtoa_r+0xa58>
 8005c8a:	ee18 1a10 	vmov	r1, s16
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fea3 	bl	80069dc <__lshift>
 8005c96:	4631      	mov	r1, r6
 8005c98:	ee08 0a10 	vmov	s16, r0
 8005c9c:	f000 ff0e 	bl	8006abc <__mcmp>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	dc03      	bgt.n	8005cac <_dtoa_r+0xa9c>
 8005ca4:	d1e0      	bne.n	8005c68 <_dtoa_r+0xa58>
 8005ca6:	f01a 0f01 	tst.w	sl, #1
 8005caa:	d0dd      	beq.n	8005c68 <_dtoa_r+0xa58>
 8005cac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cb0:	d1d7      	bne.n	8005c62 <_dtoa_r+0xa52>
 8005cb2:	2339      	movs	r3, #57	; 0x39
 8005cb4:	f88b 3000 	strb.w	r3, [fp]
 8005cb8:	462b      	mov	r3, r5
 8005cba:	461d      	mov	r5, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cc2:	2a39      	cmp	r2, #57	; 0x39
 8005cc4:	d071      	beq.n	8005daa <_dtoa_r+0xb9a>
 8005cc6:	3201      	adds	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e746      	b.n	8005b5a <_dtoa_r+0x94a>
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	dd07      	ble.n	8005ce0 <_dtoa_r+0xad0>
 8005cd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cd4:	d0ed      	beq.n	8005cb2 <_dtoa_r+0xaa2>
 8005cd6:	f10a 0301 	add.w	r3, sl, #1
 8005cda:	f88b 3000 	strb.w	r3, [fp]
 8005cde:	e73c      	b.n	8005b5a <_dtoa_r+0x94a>
 8005ce0:	9b05      	ldr	r3, [sp, #20]
 8005ce2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005ce6:	4599      	cmp	r9, r3
 8005ce8:	d047      	beq.n	8005d7a <_dtoa_r+0xb6a>
 8005cea:	ee18 1a10 	vmov	r1, s16
 8005cee:	2300      	movs	r3, #0
 8005cf0:	220a      	movs	r2, #10
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fc78 	bl	80065e8 <__multadd>
 8005cf8:	45b8      	cmp	r8, r7
 8005cfa:	ee08 0a10 	vmov	s16, r0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	f04f 020a 	mov.w	r2, #10
 8005d06:	4641      	mov	r1, r8
 8005d08:	4620      	mov	r0, r4
 8005d0a:	d106      	bne.n	8005d1a <_dtoa_r+0xb0a>
 8005d0c:	f000 fc6c 	bl	80065e8 <__multadd>
 8005d10:	4680      	mov	r8, r0
 8005d12:	4607      	mov	r7, r0
 8005d14:	f109 0901 	add.w	r9, r9, #1
 8005d18:	e772      	b.n	8005c00 <_dtoa_r+0x9f0>
 8005d1a:	f000 fc65 	bl	80065e8 <__multadd>
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4680      	mov	r8, r0
 8005d22:	2300      	movs	r3, #0
 8005d24:	220a      	movs	r2, #10
 8005d26:	4620      	mov	r0, r4
 8005d28:	f000 fc5e 	bl	80065e8 <__multadd>
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	e7f1      	b.n	8005d14 <_dtoa_r+0xb04>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	9302      	str	r3, [sp, #8]
 8005d34:	9d01      	ldr	r5, [sp, #4]
 8005d36:	ee18 0a10 	vmov	r0, s16
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	f7ff f9da 	bl	80050f4 <quorem>
 8005d40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	f805 ab01 	strb.w	sl, [r5], #1
 8005d4a:	1aea      	subs	r2, r5, r3
 8005d4c:	9b02      	ldr	r3, [sp, #8]
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	dd09      	ble.n	8005d66 <_dtoa_r+0xb56>
 8005d52:	ee18 1a10 	vmov	r1, s16
 8005d56:	2300      	movs	r3, #0
 8005d58:	220a      	movs	r2, #10
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fc44 	bl	80065e8 <__multadd>
 8005d60:	ee08 0a10 	vmov	s16, r0
 8005d64:	e7e7      	b.n	8005d36 <_dtoa_r+0xb26>
 8005d66:	9b02      	ldr	r3, [sp, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bfc8      	it	gt
 8005d6c:	461d      	movgt	r5, r3
 8005d6e:	9b01      	ldr	r3, [sp, #4]
 8005d70:	bfd8      	it	le
 8005d72:	2501      	movle	r5, #1
 8005d74:	441d      	add	r5, r3
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	ee18 1a10 	vmov	r1, s16
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fe2b 	bl	80069dc <__lshift>
 8005d86:	4631      	mov	r1, r6
 8005d88:	ee08 0a10 	vmov	s16, r0
 8005d8c:	f000 fe96 	bl	8006abc <__mcmp>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	dc91      	bgt.n	8005cb8 <_dtoa_r+0xaa8>
 8005d94:	d102      	bne.n	8005d9c <_dtoa_r+0xb8c>
 8005d96:	f01a 0f01 	tst.w	sl, #1
 8005d9a:	d18d      	bne.n	8005cb8 <_dtoa_r+0xaa8>
 8005d9c:	462b      	mov	r3, r5
 8005d9e:	461d      	mov	r5, r3
 8005da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005da4:	2a30      	cmp	r2, #48	; 0x30
 8005da6:	d0fa      	beq.n	8005d9e <_dtoa_r+0xb8e>
 8005da8:	e6d7      	b.n	8005b5a <_dtoa_r+0x94a>
 8005daa:	9a01      	ldr	r2, [sp, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d184      	bne.n	8005cba <_dtoa_r+0xaaa>
 8005db0:	9b00      	ldr	r3, [sp, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	2331      	movs	r3, #49	; 0x31
 8005db8:	7013      	strb	r3, [r2, #0]
 8005dba:	e6ce      	b.n	8005b5a <_dtoa_r+0x94a>
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <_dtoa_r+0xbd4>)
 8005dbe:	f7ff ba95 	b.w	80052ec <_dtoa_r+0xdc>
 8005dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f aa6e 	bne.w	80052a6 <_dtoa_r+0x96>
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <_dtoa_r+0xbd8>)
 8005dcc:	f7ff ba8e 	b.w	80052ec <_dtoa_r+0xdc>
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	dcae      	bgt.n	8005d34 <_dtoa_r+0xb24>
 8005dd6:	9b06      	ldr	r3, [sp, #24]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f73f aea8 	bgt.w	8005b2e <_dtoa_r+0x91e>
 8005dde:	e7a9      	b.n	8005d34 <_dtoa_r+0xb24>
 8005de0:	080080cf 	.word	0x080080cf
 8005de4:	08007fd8 	.word	0x08007fd8
 8005de8:	08008050 	.word	0x08008050

08005dec <rshift>:
 8005dec:	6903      	ldr	r3, [r0, #16]
 8005dee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005df2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005df6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005dfa:	f100 0414 	add.w	r4, r0, #20
 8005dfe:	dd45      	ble.n	8005e8c <rshift+0xa0>
 8005e00:	f011 011f 	ands.w	r1, r1, #31
 8005e04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005e08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005e0c:	d10c      	bne.n	8005e28 <rshift+0x3c>
 8005e0e:	f100 0710 	add.w	r7, r0, #16
 8005e12:	4629      	mov	r1, r5
 8005e14:	42b1      	cmp	r1, r6
 8005e16:	d334      	bcc.n	8005e82 <rshift+0x96>
 8005e18:	1a9b      	subs	r3, r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	1eea      	subs	r2, r5, #3
 8005e1e:	4296      	cmp	r6, r2
 8005e20:	bf38      	it	cc
 8005e22:	2300      	movcc	r3, #0
 8005e24:	4423      	add	r3, r4
 8005e26:	e015      	b.n	8005e54 <rshift+0x68>
 8005e28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005e2c:	f1c1 0820 	rsb	r8, r1, #32
 8005e30:	40cf      	lsrs	r7, r1
 8005e32:	f105 0e04 	add.w	lr, r5, #4
 8005e36:	46a1      	mov	r9, r4
 8005e38:	4576      	cmp	r6, lr
 8005e3a:	46f4      	mov	ip, lr
 8005e3c:	d815      	bhi.n	8005e6a <rshift+0x7e>
 8005e3e:	1a9a      	subs	r2, r3, r2
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	3a04      	subs	r2, #4
 8005e44:	3501      	adds	r5, #1
 8005e46:	42ae      	cmp	r6, r5
 8005e48:	bf38      	it	cc
 8005e4a:	2200      	movcc	r2, #0
 8005e4c:	18a3      	adds	r3, r4, r2
 8005e4e:	50a7      	str	r7, [r4, r2]
 8005e50:	b107      	cbz	r7, 8005e54 <rshift+0x68>
 8005e52:	3304      	adds	r3, #4
 8005e54:	1b1a      	subs	r2, r3, r4
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005e5c:	bf08      	it	eq
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	6102      	str	r2, [r0, #16]
 8005e62:	bf08      	it	eq
 8005e64:	6143      	streq	r3, [r0, #20]
 8005e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e6a:	f8dc c000 	ldr.w	ip, [ip]
 8005e6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005e72:	ea4c 0707 	orr.w	r7, ip, r7
 8005e76:	f849 7b04 	str.w	r7, [r9], #4
 8005e7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005e7e:	40cf      	lsrs	r7, r1
 8005e80:	e7da      	b.n	8005e38 <rshift+0x4c>
 8005e82:	f851 cb04 	ldr.w	ip, [r1], #4
 8005e86:	f847 cf04 	str.w	ip, [r7, #4]!
 8005e8a:	e7c3      	b.n	8005e14 <rshift+0x28>
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	e7e1      	b.n	8005e54 <rshift+0x68>

08005e90 <__hexdig_fun>:
 8005e90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d802      	bhi.n	8005e9e <__hexdig_fun+0xe>
 8005e98:	3820      	subs	r0, #32
 8005e9a:	b2c0      	uxtb	r0, r0
 8005e9c:	4770      	bx	lr
 8005e9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d801      	bhi.n	8005eaa <__hexdig_fun+0x1a>
 8005ea6:	3847      	subs	r0, #71	; 0x47
 8005ea8:	e7f7      	b.n	8005e9a <__hexdig_fun+0xa>
 8005eaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d801      	bhi.n	8005eb6 <__hexdig_fun+0x26>
 8005eb2:	3827      	subs	r0, #39	; 0x27
 8005eb4:	e7f1      	b.n	8005e9a <__hexdig_fun+0xa>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	4770      	bx	lr
	...

08005ebc <__gethex>:
 8005ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec0:	ed2d 8b02 	vpush	{d8}
 8005ec4:	b089      	sub	sp, #36	; 0x24
 8005ec6:	ee08 0a10 	vmov	s16, r0
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	4bb4      	ldr	r3, [pc, #720]	; (80061a0 <__gethex+0x2e4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	468b      	mov	fp, r1
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	f7fa f99a 	bl	8000210 <strlen>
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	f8db 2000 	ldr.w	r2, [fp]
 8005ee2:	4403      	add	r3, r0
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005eea:	9305      	str	r3, [sp, #20]
 8005eec:	1c93      	adds	r3, r2, #2
 8005eee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005ef2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005ef6:	32fe      	adds	r2, #254	; 0xfe
 8005ef8:	18d1      	adds	r1, r2, r3
 8005efa:	461f      	mov	r7, r3
 8005efc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f00:	9100      	str	r1, [sp, #0]
 8005f02:	2830      	cmp	r0, #48	; 0x30
 8005f04:	d0f8      	beq.n	8005ef8 <__gethex+0x3c>
 8005f06:	f7ff ffc3 	bl	8005e90 <__hexdig_fun>
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d13a      	bne.n	8005f86 <__gethex+0xca>
 8005f10:	9901      	ldr	r1, [sp, #4]
 8005f12:	4652      	mov	r2, sl
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7fe faa9 	bl	800446c <strncmp>
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d168      	bne.n	8005ff2 <__gethex+0x136>
 8005f20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005f24:	eb07 060a 	add.w	r6, r7, sl
 8005f28:	f7ff ffb2 	bl	8005e90 <__hexdig_fun>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d062      	beq.n	8005ff6 <__gethex+0x13a>
 8005f30:	4633      	mov	r3, r6
 8005f32:	7818      	ldrb	r0, [r3, #0]
 8005f34:	2830      	cmp	r0, #48	; 0x30
 8005f36:	461f      	mov	r7, r3
 8005f38:	f103 0301 	add.w	r3, r3, #1
 8005f3c:	d0f9      	beq.n	8005f32 <__gethex+0x76>
 8005f3e:	f7ff ffa7 	bl	8005e90 <__hexdig_fun>
 8005f42:	2301      	movs	r3, #1
 8005f44:	fab0 f480 	clz	r4, r0
 8005f48:	0964      	lsrs	r4, r4, #5
 8005f4a:	4635      	mov	r5, r6
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	463a      	mov	r2, r7
 8005f50:	4616      	mov	r6, r2
 8005f52:	3201      	adds	r2, #1
 8005f54:	7830      	ldrb	r0, [r6, #0]
 8005f56:	f7ff ff9b 	bl	8005e90 <__hexdig_fun>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d1f8      	bne.n	8005f50 <__gethex+0x94>
 8005f5e:	9901      	ldr	r1, [sp, #4]
 8005f60:	4652      	mov	r2, sl
 8005f62:	4630      	mov	r0, r6
 8005f64:	f7fe fa82 	bl	800446c <strncmp>
 8005f68:	b980      	cbnz	r0, 8005f8c <__gethex+0xd0>
 8005f6a:	b94d      	cbnz	r5, 8005f80 <__gethex+0xc4>
 8005f6c:	eb06 050a 	add.w	r5, r6, sl
 8005f70:	462a      	mov	r2, r5
 8005f72:	4616      	mov	r6, r2
 8005f74:	3201      	adds	r2, #1
 8005f76:	7830      	ldrb	r0, [r6, #0]
 8005f78:	f7ff ff8a 	bl	8005e90 <__hexdig_fun>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d1f8      	bne.n	8005f72 <__gethex+0xb6>
 8005f80:	1bad      	subs	r5, r5, r6
 8005f82:	00ad      	lsls	r5, r5, #2
 8005f84:	e004      	b.n	8005f90 <__gethex+0xd4>
 8005f86:	2400      	movs	r4, #0
 8005f88:	4625      	mov	r5, r4
 8005f8a:	e7e0      	b.n	8005f4e <__gethex+0x92>
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	d1f7      	bne.n	8005f80 <__gethex+0xc4>
 8005f90:	7833      	ldrb	r3, [r6, #0]
 8005f92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f96:	2b50      	cmp	r3, #80	; 0x50
 8005f98:	d13b      	bne.n	8006012 <__gethex+0x156>
 8005f9a:	7873      	ldrb	r3, [r6, #1]
 8005f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8005f9e:	d02c      	beq.n	8005ffa <__gethex+0x13e>
 8005fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8005fa2:	d02e      	beq.n	8006002 <__gethex+0x146>
 8005fa4:	1c71      	adds	r1, r6, #1
 8005fa6:	f04f 0900 	mov.w	r9, #0
 8005faa:	7808      	ldrb	r0, [r1, #0]
 8005fac:	f7ff ff70 	bl	8005e90 <__hexdig_fun>
 8005fb0:	1e43      	subs	r3, r0, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b18      	cmp	r3, #24
 8005fb6:	d82c      	bhi.n	8006012 <__gethex+0x156>
 8005fb8:	f1a0 0210 	sub.w	r2, r0, #16
 8005fbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005fc0:	f7ff ff66 	bl	8005e90 <__hexdig_fun>
 8005fc4:	1e43      	subs	r3, r0, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b18      	cmp	r3, #24
 8005fca:	d91d      	bls.n	8006008 <__gethex+0x14c>
 8005fcc:	f1b9 0f00 	cmp.w	r9, #0
 8005fd0:	d000      	beq.n	8005fd4 <__gethex+0x118>
 8005fd2:	4252      	negs	r2, r2
 8005fd4:	4415      	add	r5, r2
 8005fd6:	f8cb 1000 	str.w	r1, [fp]
 8005fda:	b1e4      	cbz	r4, 8006016 <__gethex+0x15a>
 8005fdc:	9b00      	ldr	r3, [sp, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2700      	movne	r7, #0
 8005fe4:	2706      	moveq	r7, #6
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	b009      	add	sp, #36	; 0x24
 8005fea:	ecbd 8b02 	vpop	{d8}
 8005fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff2:	463e      	mov	r6, r7
 8005ff4:	4625      	mov	r5, r4
 8005ff6:	2401      	movs	r4, #1
 8005ff8:	e7ca      	b.n	8005f90 <__gethex+0xd4>
 8005ffa:	f04f 0900 	mov.w	r9, #0
 8005ffe:	1cb1      	adds	r1, r6, #2
 8006000:	e7d3      	b.n	8005faa <__gethex+0xee>
 8006002:	f04f 0901 	mov.w	r9, #1
 8006006:	e7fa      	b.n	8005ffe <__gethex+0x142>
 8006008:	230a      	movs	r3, #10
 800600a:	fb03 0202 	mla	r2, r3, r2, r0
 800600e:	3a10      	subs	r2, #16
 8006010:	e7d4      	b.n	8005fbc <__gethex+0x100>
 8006012:	4631      	mov	r1, r6
 8006014:	e7df      	b.n	8005fd6 <__gethex+0x11a>
 8006016:	1bf3      	subs	r3, r6, r7
 8006018:	3b01      	subs	r3, #1
 800601a:	4621      	mov	r1, r4
 800601c:	2b07      	cmp	r3, #7
 800601e:	dc0b      	bgt.n	8006038 <__gethex+0x17c>
 8006020:	ee18 0a10 	vmov	r0, s16
 8006024:	f000 fa7e 	bl	8006524 <_Balloc>
 8006028:	4604      	mov	r4, r0
 800602a:	b940      	cbnz	r0, 800603e <__gethex+0x182>
 800602c:	4b5d      	ldr	r3, [pc, #372]	; (80061a4 <__gethex+0x2e8>)
 800602e:	4602      	mov	r2, r0
 8006030:	21de      	movs	r1, #222	; 0xde
 8006032:	485d      	ldr	r0, [pc, #372]	; (80061a8 <__gethex+0x2ec>)
 8006034:	f001 f9b2 	bl	800739c <__assert_func>
 8006038:	3101      	adds	r1, #1
 800603a:	105b      	asrs	r3, r3, #1
 800603c:	e7ee      	b.n	800601c <__gethex+0x160>
 800603e:	f100 0914 	add.w	r9, r0, #20
 8006042:	f04f 0b00 	mov.w	fp, #0
 8006046:	f1ca 0301 	rsb	r3, sl, #1
 800604a:	f8cd 9008 	str.w	r9, [sp, #8]
 800604e:	f8cd b000 	str.w	fp, [sp]
 8006052:	9306      	str	r3, [sp, #24]
 8006054:	42b7      	cmp	r7, r6
 8006056:	d340      	bcc.n	80060da <__gethex+0x21e>
 8006058:	9802      	ldr	r0, [sp, #8]
 800605a:	9b00      	ldr	r3, [sp, #0]
 800605c:	f840 3b04 	str.w	r3, [r0], #4
 8006060:	eba0 0009 	sub.w	r0, r0, r9
 8006064:	1080      	asrs	r0, r0, #2
 8006066:	0146      	lsls	r6, r0, #5
 8006068:	6120      	str	r0, [r4, #16]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fb4c 	bl	8006708 <__hi0bits>
 8006070:	1a30      	subs	r0, r6, r0
 8006072:	f8d8 6000 	ldr.w	r6, [r8]
 8006076:	42b0      	cmp	r0, r6
 8006078:	dd63      	ble.n	8006142 <__gethex+0x286>
 800607a:	1b87      	subs	r7, r0, r6
 800607c:	4639      	mov	r1, r7
 800607e:	4620      	mov	r0, r4
 8006080:	f000 fef0 	bl	8006e64 <__any_on>
 8006084:	4682      	mov	sl, r0
 8006086:	b1a8      	cbz	r0, 80060b4 <__gethex+0x1f8>
 8006088:	1e7b      	subs	r3, r7, #1
 800608a:	1159      	asrs	r1, r3, #5
 800608c:	f003 021f 	and.w	r2, r3, #31
 8006090:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006094:	f04f 0a01 	mov.w	sl, #1
 8006098:	fa0a f202 	lsl.w	r2, sl, r2
 800609c:	420a      	tst	r2, r1
 800609e:	d009      	beq.n	80060b4 <__gethex+0x1f8>
 80060a0:	4553      	cmp	r3, sl
 80060a2:	dd05      	ble.n	80060b0 <__gethex+0x1f4>
 80060a4:	1eb9      	subs	r1, r7, #2
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 fedc 	bl	8006e64 <__any_on>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d145      	bne.n	800613c <__gethex+0x280>
 80060b0:	f04f 0a02 	mov.w	sl, #2
 80060b4:	4639      	mov	r1, r7
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff fe98 	bl	8005dec <rshift>
 80060bc:	443d      	add	r5, r7
 80060be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060c2:	42ab      	cmp	r3, r5
 80060c4:	da4c      	bge.n	8006160 <__gethex+0x2a4>
 80060c6:	ee18 0a10 	vmov	r0, s16
 80060ca:	4621      	mov	r1, r4
 80060cc:	f000 fa6a 	bl	80065a4 <_Bfree>
 80060d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060d2:	2300      	movs	r3, #0
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	27a3      	movs	r7, #163	; 0xa3
 80060d8:	e785      	b.n	8005fe6 <__gethex+0x12a>
 80060da:	1e73      	subs	r3, r6, #1
 80060dc:	9a05      	ldr	r2, [sp, #20]
 80060de:	9303      	str	r3, [sp, #12]
 80060e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d019      	beq.n	800611c <__gethex+0x260>
 80060e8:	f1bb 0f20 	cmp.w	fp, #32
 80060ec:	d107      	bne.n	80060fe <__gethex+0x242>
 80060ee:	9b02      	ldr	r3, [sp, #8]
 80060f0:	9a00      	ldr	r2, [sp, #0]
 80060f2:	f843 2b04 	str.w	r2, [r3], #4
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	469b      	mov	fp, r3
 80060fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006102:	f7ff fec5 	bl	8005e90 <__hexdig_fun>
 8006106:	9b00      	ldr	r3, [sp, #0]
 8006108:	f000 000f 	and.w	r0, r0, #15
 800610c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006110:	4303      	orrs	r3, r0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f10b 0b04 	add.w	fp, fp, #4
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	e00d      	b.n	8006138 <__gethex+0x27c>
 800611c:	9b03      	ldr	r3, [sp, #12]
 800611e:	9a06      	ldr	r2, [sp, #24]
 8006120:	4413      	add	r3, r2
 8006122:	42bb      	cmp	r3, r7
 8006124:	d3e0      	bcc.n	80060e8 <__gethex+0x22c>
 8006126:	4618      	mov	r0, r3
 8006128:	9901      	ldr	r1, [sp, #4]
 800612a:	9307      	str	r3, [sp, #28]
 800612c:	4652      	mov	r2, sl
 800612e:	f7fe f99d 	bl	800446c <strncmp>
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	2800      	cmp	r0, #0
 8006136:	d1d7      	bne.n	80060e8 <__gethex+0x22c>
 8006138:	461e      	mov	r6, r3
 800613a:	e78b      	b.n	8006054 <__gethex+0x198>
 800613c:	f04f 0a03 	mov.w	sl, #3
 8006140:	e7b8      	b.n	80060b4 <__gethex+0x1f8>
 8006142:	da0a      	bge.n	800615a <__gethex+0x29e>
 8006144:	1a37      	subs	r7, r6, r0
 8006146:	4621      	mov	r1, r4
 8006148:	ee18 0a10 	vmov	r0, s16
 800614c:	463a      	mov	r2, r7
 800614e:	f000 fc45 	bl	80069dc <__lshift>
 8006152:	1bed      	subs	r5, r5, r7
 8006154:	4604      	mov	r4, r0
 8006156:	f100 0914 	add.w	r9, r0, #20
 800615a:	f04f 0a00 	mov.w	sl, #0
 800615e:	e7ae      	b.n	80060be <__gethex+0x202>
 8006160:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006164:	42a8      	cmp	r0, r5
 8006166:	dd72      	ble.n	800624e <__gethex+0x392>
 8006168:	1b45      	subs	r5, r0, r5
 800616a:	42ae      	cmp	r6, r5
 800616c:	dc36      	bgt.n	80061dc <__gethex+0x320>
 800616e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d02a      	beq.n	80061cc <__gethex+0x310>
 8006176:	2b03      	cmp	r3, #3
 8006178:	d02c      	beq.n	80061d4 <__gethex+0x318>
 800617a:	2b01      	cmp	r3, #1
 800617c:	d11c      	bne.n	80061b8 <__gethex+0x2fc>
 800617e:	42ae      	cmp	r6, r5
 8006180:	d11a      	bne.n	80061b8 <__gethex+0x2fc>
 8006182:	2e01      	cmp	r6, #1
 8006184:	d112      	bne.n	80061ac <__gethex+0x2f0>
 8006186:	9a04      	ldr	r2, [sp, #16]
 8006188:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	2301      	movs	r3, #1
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	f8c9 3000 	str.w	r3, [r9]
 8006196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006198:	2762      	movs	r7, #98	; 0x62
 800619a:	601c      	str	r4, [r3, #0]
 800619c:	e723      	b.n	8005fe6 <__gethex+0x12a>
 800619e:	bf00      	nop
 80061a0:	08008148 	.word	0x08008148
 80061a4:	080080cf 	.word	0x080080cf
 80061a8:	080080e0 	.word	0x080080e0
 80061ac:	1e71      	subs	r1, r6, #1
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fe58 	bl	8006e64 <__any_on>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d1e6      	bne.n	8006186 <__gethex+0x2ca>
 80061b8:	ee18 0a10 	vmov	r0, s16
 80061bc:	4621      	mov	r1, r4
 80061be:	f000 f9f1 	bl	80065a4 <_Bfree>
 80061c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061c4:	2300      	movs	r3, #0
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	2750      	movs	r7, #80	; 0x50
 80061ca:	e70c      	b.n	8005fe6 <__gethex+0x12a>
 80061cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f2      	bne.n	80061b8 <__gethex+0x2fc>
 80061d2:	e7d8      	b.n	8006186 <__gethex+0x2ca>
 80061d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1d5      	bne.n	8006186 <__gethex+0x2ca>
 80061da:	e7ed      	b.n	80061b8 <__gethex+0x2fc>
 80061dc:	1e6f      	subs	r7, r5, #1
 80061de:	f1ba 0f00 	cmp.w	sl, #0
 80061e2:	d131      	bne.n	8006248 <__gethex+0x38c>
 80061e4:	b127      	cbz	r7, 80061f0 <__gethex+0x334>
 80061e6:	4639      	mov	r1, r7
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fe3b 	bl	8006e64 <__any_on>
 80061ee:	4682      	mov	sl, r0
 80061f0:	117b      	asrs	r3, r7, #5
 80061f2:	2101      	movs	r1, #1
 80061f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80061f8:	f007 071f 	and.w	r7, r7, #31
 80061fc:	fa01 f707 	lsl.w	r7, r1, r7
 8006200:	421f      	tst	r7, r3
 8006202:	4629      	mov	r1, r5
 8006204:	4620      	mov	r0, r4
 8006206:	bf18      	it	ne
 8006208:	f04a 0a02 	orrne.w	sl, sl, #2
 800620c:	1b76      	subs	r6, r6, r5
 800620e:	f7ff fded 	bl	8005dec <rshift>
 8006212:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006216:	2702      	movs	r7, #2
 8006218:	f1ba 0f00 	cmp.w	sl, #0
 800621c:	d048      	beq.n	80062b0 <__gethex+0x3f4>
 800621e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d015      	beq.n	8006252 <__gethex+0x396>
 8006226:	2b03      	cmp	r3, #3
 8006228:	d017      	beq.n	800625a <__gethex+0x39e>
 800622a:	2b01      	cmp	r3, #1
 800622c:	d109      	bne.n	8006242 <__gethex+0x386>
 800622e:	f01a 0f02 	tst.w	sl, #2
 8006232:	d006      	beq.n	8006242 <__gethex+0x386>
 8006234:	f8d9 0000 	ldr.w	r0, [r9]
 8006238:	ea4a 0a00 	orr.w	sl, sl, r0
 800623c:	f01a 0f01 	tst.w	sl, #1
 8006240:	d10e      	bne.n	8006260 <__gethex+0x3a4>
 8006242:	f047 0710 	orr.w	r7, r7, #16
 8006246:	e033      	b.n	80062b0 <__gethex+0x3f4>
 8006248:	f04f 0a01 	mov.w	sl, #1
 800624c:	e7d0      	b.n	80061f0 <__gethex+0x334>
 800624e:	2701      	movs	r7, #1
 8006250:	e7e2      	b.n	8006218 <__gethex+0x35c>
 8006252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006254:	f1c3 0301 	rsb	r3, r3, #1
 8006258:	9315      	str	r3, [sp, #84]	; 0x54
 800625a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f0      	beq.n	8006242 <__gethex+0x386>
 8006260:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006264:	f104 0314 	add.w	r3, r4, #20
 8006268:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800626c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006270:	f04f 0c00 	mov.w	ip, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f853 2b04 	ldr.w	r2, [r3], #4
 800627a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800627e:	d01c      	beq.n	80062ba <__gethex+0x3fe>
 8006280:	3201      	adds	r2, #1
 8006282:	6002      	str	r2, [r0, #0]
 8006284:	2f02      	cmp	r7, #2
 8006286:	f104 0314 	add.w	r3, r4, #20
 800628a:	d13f      	bne.n	800630c <__gethex+0x450>
 800628c:	f8d8 2000 	ldr.w	r2, [r8]
 8006290:	3a01      	subs	r2, #1
 8006292:	42b2      	cmp	r2, r6
 8006294:	d10a      	bne.n	80062ac <__gethex+0x3f0>
 8006296:	1171      	asrs	r1, r6, #5
 8006298:	2201      	movs	r2, #1
 800629a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800629e:	f006 061f 	and.w	r6, r6, #31
 80062a2:	fa02 f606 	lsl.w	r6, r2, r6
 80062a6:	421e      	tst	r6, r3
 80062a8:	bf18      	it	ne
 80062aa:	4617      	movne	r7, r2
 80062ac:	f047 0720 	orr.w	r7, r7, #32
 80062b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062b2:	601c      	str	r4, [r3, #0]
 80062b4:	9b04      	ldr	r3, [sp, #16]
 80062b6:	601d      	str	r5, [r3, #0]
 80062b8:	e695      	b.n	8005fe6 <__gethex+0x12a>
 80062ba:	4299      	cmp	r1, r3
 80062bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80062c0:	d8d8      	bhi.n	8006274 <__gethex+0x3b8>
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	459b      	cmp	fp, r3
 80062c6:	db19      	blt.n	80062fc <__gethex+0x440>
 80062c8:	6861      	ldr	r1, [r4, #4]
 80062ca:	ee18 0a10 	vmov	r0, s16
 80062ce:	3101      	adds	r1, #1
 80062d0:	f000 f928 	bl	8006524 <_Balloc>
 80062d4:	4681      	mov	r9, r0
 80062d6:	b918      	cbnz	r0, 80062e0 <__gethex+0x424>
 80062d8:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <__gethex+0x488>)
 80062da:	4602      	mov	r2, r0
 80062dc:	2184      	movs	r1, #132	; 0x84
 80062de:	e6a8      	b.n	8006032 <__gethex+0x176>
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	3202      	adds	r2, #2
 80062e4:	f104 010c 	add.w	r1, r4, #12
 80062e8:	0092      	lsls	r2, r2, #2
 80062ea:	300c      	adds	r0, #12
 80062ec:	f000 f90c 	bl	8006508 <memcpy>
 80062f0:	4621      	mov	r1, r4
 80062f2:	ee18 0a10 	vmov	r0, s16
 80062f6:	f000 f955 	bl	80065a4 <_Bfree>
 80062fa:	464c      	mov	r4, r9
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006304:	6122      	str	r2, [r4, #16]
 8006306:	2201      	movs	r2, #1
 8006308:	615a      	str	r2, [r3, #20]
 800630a:	e7bb      	b.n	8006284 <__gethex+0x3c8>
 800630c:	6922      	ldr	r2, [r4, #16]
 800630e:	455a      	cmp	r2, fp
 8006310:	dd0b      	ble.n	800632a <__gethex+0x46e>
 8006312:	2101      	movs	r1, #1
 8006314:	4620      	mov	r0, r4
 8006316:	f7ff fd69 	bl	8005dec <rshift>
 800631a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800631e:	3501      	adds	r5, #1
 8006320:	42ab      	cmp	r3, r5
 8006322:	f6ff aed0 	blt.w	80060c6 <__gethex+0x20a>
 8006326:	2701      	movs	r7, #1
 8006328:	e7c0      	b.n	80062ac <__gethex+0x3f0>
 800632a:	f016 061f 	ands.w	r6, r6, #31
 800632e:	d0fa      	beq.n	8006326 <__gethex+0x46a>
 8006330:	4453      	add	r3, sl
 8006332:	f1c6 0620 	rsb	r6, r6, #32
 8006336:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800633a:	f000 f9e5 	bl	8006708 <__hi0bits>
 800633e:	42b0      	cmp	r0, r6
 8006340:	dbe7      	blt.n	8006312 <__gethex+0x456>
 8006342:	e7f0      	b.n	8006326 <__gethex+0x46a>
 8006344:	080080cf 	.word	0x080080cf

08006348 <L_shift>:
 8006348:	f1c2 0208 	rsb	r2, r2, #8
 800634c:	0092      	lsls	r2, r2, #2
 800634e:	b570      	push	{r4, r5, r6, lr}
 8006350:	f1c2 0620 	rsb	r6, r2, #32
 8006354:	6843      	ldr	r3, [r0, #4]
 8006356:	6804      	ldr	r4, [r0, #0]
 8006358:	fa03 f506 	lsl.w	r5, r3, r6
 800635c:	432c      	orrs	r4, r5
 800635e:	40d3      	lsrs	r3, r2
 8006360:	6004      	str	r4, [r0, #0]
 8006362:	f840 3f04 	str.w	r3, [r0, #4]!
 8006366:	4288      	cmp	r0, r1
 8006368:	d3f4      	bcc.n	8006354 <L_shift+0xc>
 800636a:	bd70      	pop	{r4, r5, r6, pc}

0800636c <__match>:
 800636c:	b530      	push	{r4, r5, lr}
 800636e:	6803      	ldr	r3, [r0, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006376:	b914      	cbnz	r4, 800637e <__match+0x12>
 8006378:	6003      	str	r3, [r0, #0]
 800637a:	2001      	movs	r0, #1
 800637c:	bd30      	pop	{r4, r5, pc}
 800637e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006382:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006386:	2d19      	cmp	r5, #25
 8006388:	bf98      	it	ls
 800638a:	3220      	addls	r2, #32
 800638c:	42a2      	cmp	r2, r4
 800638e:	d0f0      	beq.n	8006372 <__match+0x6>
 8006390:	2000      	movs	r0, #0
 8006392:	e7f3      	b.n	800637c <__match+0x10>

08006394 <__hexnan>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	680b      	ldr	r3, [r1, #0]
 800639a:	115e      	asrs	r6, r3, #5
 800639c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80063a0:	f013 031f 	ands.w	r3, r3, #31
 80063a4:	b087      	sub	sp, #28
 80063a6:	bf18      	it	ne
 80063a8:	3604      	addne	r6, #4
 80063aa:	2500      	movs	r5, #0
 80063ac:	1f37      	subs	r7, r6, #4
 80063ae:	4690      	mov	r8, r2
 80063b0:	6802      	ldr	r2, [r0, #0]
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	4682      	mov	sl, r0
 80063b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80063ba:	46b9      	mov	r9, r7
 80063bc:	463c      	mov	r4, r7
 80063be:	9502      	str	r5, [sp, #8]
 80063c0:	46ab      	mov	fp, r5
 80063c2:	7851      	ldrb	r1, [r2, #1]
 80063c4:	1c53      	adds	r3, r2, #1
 80063c6:	9303      	str	r3, [sp, #12]
 80063c8:	b341      	cbz	r1, 800641c <__hexnan+0x88>
 80063ca:	4608      	mov	r0, r1
 80063cc:	9205      	str	r2, [sp, #20]
 80063ce:	9104      	str	r1, [sp, #16]
 80063d0:	f7ff fd5e 	bl	8005e90 <__hexdig_fun>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d14f      	bne.n	8006478 <__hexnan+0xe4>
 80063d8:	9904      	ldr	r1, [sp, #16]
 80063da:	9a05      	ldr	r2, [sp, #20]
 80063dc:	2920      	cmp	r1, #32
 80063de:	d818      	bhi.n	8006412 <__hexnan+0x7e>
 80063e0:	9b02      	ldr	r3, [sp, #8]
 80063e2:	459b      	cmp	fp, r3
 80063e4:	dd13      	ble.n	800640e <__hexnan+0x7a>
 80063e6:	454c      	cmp	r4, r9
 80063e8:	d206      	bcs.n	80063f8 <__hexnan+0x64>
 80063ea:	2d07      	cmp	r5, #7
 80063ec:	dc04      	bgt.n	80063f8 <__hexnan+0x64>
 80063ee:	462a      	mov	r2, r5
 80063f0:	4649      	mov	r1, r9
 80063f2:	4620      	mov	r0, r4
 80063f4:	f7ff ffa8 	bl	8006348 <L_shift>
 80063f8:	4544      	cmp	r4, r8
 80063fa:	d950      	bls.n	800649e <__hexnan+0x10a>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f1a4 0904 	sub.w	r9, r4, #4
 8006402:	f844 3c04 	str.w	r3, [r4, #-4]
 8006406:	f8cd b008 	str.w	fp, [sp, #8]
 800640a:	464c      	mov	r4, r9
 800640c:	461d      	mov	r5, r3
 800640e:	9a03      	ldr	r2, [sp, #12]
 8006410:	e7d7      	b.n	80063c2 <__hexnan+0x2e>
 8006412:	2929      	cmp	r1, #41	; 0x29
 8006414:	d156      	bne.n	80064c4 <__hexnan+0x130>
 8006416:	3202      	adds	r2, #2
 8006418:	f8ca 2000 	str.w	r2, [sl]
 800641c:	f1bb 0f00 	cmp.w	fp, #0
 8006420:	d050      	beq.n	80064c4 <__hexnan+0x130>
 8006422:	454c      	cmp	r4, r9
 8006424:	d206      	bcs.n	8006434 <__hexnan+0xa0>
 8006426:	2d07      	cmp	r5, #7
 8006428:	dc04      	bgt.n	8006434 <__hexnan+0xa0>
 800642a:	462a      	mov	r2, r5
 800642c:	4649      	mov	r1, r9
 800642e:	4620      	mov	r0, r4
 8006430:	f7ff ff8a 	bl	8006348 <L_shift>
 8006434:	4544      	cmp	r4, r8
 8006436:	d934      	bls.n	80064a2 <__hexnan+0x10e>
 8006438:	f1a8 0204 	sub.w	r2, r8, #4
 800643c:	4623      	mov	r3, r4
 800643e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006442:	f842 1f04 	str.w	r1, [r2, #4]!
 8006446:	429f      	cmp	r7, r3
 8006448:	d2f9      	bcs.n	800643e <__hexnan+0xaa>
 800644a:	1b3b      	subs	r3, r7, r4
 800644c:	f023 0303 	bic.w	r3, r3, #3
 8006450:	3304      	adds	r3, #4
 8006452:	3401      	adds	r4, #1
 8006454:	3e03      	subs	r6, #3
 8006456:	42b4      	cmp	r4, r6
 8006458:	bf88      	it	hi
 800645a:	2304      	movhi	r3, #4
 800645c:	4443      	add	r3, r8
 800645e:	2200      	movs	r2, #0
 8006460:	f843 2b04 	str.w	r2, [r3], #4
 8006464:	429f      	cmp	r7, r3
 8006466:	d2fb      	bcs.n	8006460 <__hexnan+0xcc>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	b91b      	cbnz	r3, 8006474 <__hexnan+0xe0>
 800646c:	4547      	cmp	r7, r8
 800646e:	d127      	bne.n	80064c0 <__hexnan+0x12c>
 8006470:	2301      	movs	r3, #1
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	2005      	movs	r0, #5
 8006476:	e026      	b.n	80064c6 <__hexnan+0x132>
 8006478:	3501      	adds	r5, #1
 800647a:	2d08      	cmp	r5, #8
 800647c:	f10b 0b01 	add.w	fp, fp, #1
 8006480:	dd06      	ble.n	8006490 <__hexnan+0xfc>
 8006482:	4544      	cmp	r4, r8
 8006484:	d9c3      	bls.n	800640e <__hexnan+0x7a>
 8006486:	2300      	movs	r3, #0
 8006488:	f844 3c04 	str.w	r3, [r4, #-4]
 800648c:	2501      	movs	r5, #1
 800648e:	3c04      	subs	r4, #4
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	f000 000f 	and.w	r0, r0, #15
 8006496:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800649a:	6022      	str	r2, [r4, #0]
 800649c:	e7b7      	b.n	800640e <__hexnan+0x7a>
 800649e:	2508      	movs	r5, #8
 80064a0:	e7b5      	b.n	800640e <__hexnan+0x7a>
 80064a2:	9b01      	ldr	r3, [sp, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0df      	beq.n	8006468 <__hexnan+0xd4>
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	f1c3 0320 	rsb	r3, r3, #32
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80064b8:	401a      	ands	r2, r3
 80064ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80064be:	e7d3      	b.n	8006468 <__hexnan+0xd4>
 80064c0:	3f04      	subs	r7, #4
 80064c2:	e7d1      	b.n	8006468 <__hexnan+0xd4>
 80064c4:	2004      	movs	r0, #4
 80064c6:	b007      	add	sp, #28
 80064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064cc <_localeconv_r>:
 80064cc:	4800      	ldr	r0, [pc, #0]	; (80064d0 <_localeconv_r+0x4>)
 80064ce:	4770      	bx	lr
 80064d0:	20000174 	.word	0x20000174

080064d4 <malloc>:
 80064d4:	4b02      	ldr	r3, [pc, #8]	; (80064e0 <malloc+0xc>)
 80064d6:	4601      	mov	r1, r0
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	f000 bd67 	b.w	8006fac <_malloc_r>
 80064de:	bf00      	nop
 80064e0:	2000001c 	.word	0x2000001c

080064e4 <__ascii_mbtowc>:
 80064e4:	b082      	sub	sp, #8
 80064e6:	b901      	cbnz	r1, 80064ea <__ascii_mbtowc+0x6>
 80064e8:	a901      	add	r1, sp, #4
 80064ea:	b142      	cbz	r2, 80064fe <__ascii_mbtowc+0x1a>
 80064ec:	b14b      	cbz	r3, 8006502 <__ascii_mbtowc+0x1e>
 80064ee:	7813      	ldrb	r3, [r2, #0]
 80064f0:	600b      	str	r3, [r1, #0]
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	1e10      	subs	r0, r2, #0
 80064f6:	bf18      	it	ne
 80064f8:	2001      	movne	r0, #1
 80064fa:	b002      	add	sp, #8
 80064fc:	4770      	bx	lr
 80064fe:	4610      	mov	r0, r2
 8006500:	e7fb      	b.n	80064fa <__ascii_mbtowc+0x16>
 8006502:	f06f 0001 	mvn.w	r0, #1
 8006506:	e7f8      	b.n	80064fa <__ascii_mbtowc+0x16>

08006508 <memcpy>:
 8006508:	440a      	add	r2, r1
 800650a:	4291      	cmp	r1, r2
 800650c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006510:	d100      	bne.n	8006514 <memcpy+0xc>
 8006512:	4770      	bx	lr
 8006514:	b510      	push	{r4, lr}
 8006516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800651a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800651e:	4291      	cmp	r1, r2
 8006520:	d1f9      	bne.n	8006516 <memcpy+0xe>
 8006522:	bd10      	pop	{r4, pc}

08006524 <_Balloc>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006528:	4604      	mov	r4, r0
 800652a:	460d      	mov	r5, r1
 800652c:	b976      	cbnz	r6, 800654c <_Balloc+0x28>
 800652e:	2010      	movs	r0, #16
 8006530:	f7ff ffd0 	bl	80064d4 <malloc>
 8006534:	4602      	mov	r2, r0
 8006536:	6260      	str	r0, [r4, #36]	; 0x24
 8006538:	b920      	cbnz	r0, 8006544 <_Balloc+0x20>
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <_Balloc+0x78>)
 800653c:	4818      	ldr	r0, [pc, #96]	; (80065a0 <_Balloc+0x7c>)
 800653e:	2166      	movs	r1, #102	; 0x66
 8006540:	f000 ff2c 	bl	800739c <__assert_func>
 8006544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006548:	6006      	str	r6, [r0, #0]
 800654a:	60c6      	str	r6, [r0, #12]
 800654c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800654e:	68f3      	ldr	r3, [r6, #12]
 8006550:	b183      	cbz	r3, 8006574 <_Balloc+0x50>
 8006552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800655a:	b9b8      	cbnz	r0, 800658c <_Balloc+0x68>
 800655c:	2101      	movs	r1, #1
 800655e:	fa01 f605 	lsl.w	r6, r1, r5
 8006562:	1d72      	adds	r2, r6, #5
 8006564:	0092      	lsls	r2, r2, #2
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fc9d 	bl	8006ea6 <_calloc_r>
 800656c:	b160      	cbz	r0, 8006588 <_Balloc+0x64>
 800656e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006572:	e00e      	b.n	8006592 <_Balloc+0x6e>
 8006574:	2221      	movs	r2, #33	; 0x21
 8006576:	2104      	movs	r1, #4
 8006578:	4620      	mov	r0, r4
 800657a:	f000 fc94 	bl	8006ea6 <_calloc_r>
 800657e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006580:	60f0      	str	r0, [r6, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e4      	bne.n	8006552 <_Balloc+0x2e>
 8006588:	2000      	movs	r0, #0
 800658a:	bd70      	pop	{r4, r5, r6, pc}
 800658c:	6802      	ldr	r2, [r0, #0]
 800658e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006592:	2300      	movs	r3, #0
 8006594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006598:	e7f7      	b.n	800658a <_Balloc+0x66>
 800659a:	bf00      	nop
 800659c:	0800805d 	.word	0x0800805d
 80065a0:	0800815c 	.word	0x0800815c

080065a4 <_Bfree>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065a8:	4605      	mov	r5, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	b976      	cbnz	r6, 80065cc <_Bfree+0x28>
 80065ae:	2010      	movs	r0, #16
 80065b0:	f7ff ff90 	bl	80064d4 <malloc>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6268      	str	r0, [r5, #36]	; 0x24
 80065b8:	b920      	cbnz	r0, 80065c4 <_Bfree+0x20>
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <_Bfree+0x3c>)
 80065bc:	4809      	ldr	r0, [pc, #36]	; (80065e4 <_Bfree+0x40>)
 80065be:	218a      	movs	r1, #138	; 0x8a
 80065c0:	f000 feec 	bl	800739c <__assert_func>
 80065c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065c8:	6006      	str	r6, [r0, #0]
 80065ca:	60c6      	str	r6, [r0, #12]
 80065cc:	b13c      	cbz	r4, 80065de <_Bfree+0x3a>
 80065ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065d0:	6862      	ldr	r2, [r4, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065d8:	6021      	str	r1, [r4, #0]
 80065da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	0800805d 	.word	0x0800805d
 80065e4:	0800815c 	.word	0x0800815c

080065e8 <__multadd>:
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ec:	690d      	ldr	r5, [r1, #16]
 80065ee:	4607      	mov	r7, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	461e      	mov	r6, r3
 80065f4:	f101 0c14 	add.w	ip, r1, #20
 80065f8:	2000      	movs	r0, #0
 80065fa:	f8dc 3000 	ldr.w	r3, [ip]
 80065fe:	b299      	uxth	r1, r3
 8006600:	fb02 6101 	mla	r1, r2, r1, r6
 8006604:	0c1e      	lsrs	r6, r3, #16
 8006606:	0c0b      	lsrs	r3, r1, #16
 8006608:	fb02 3306 	mla	r3, r2, r6, r3
 800660c:	b289      	uxth	r1, r1
 800660e:	3001      	adds	r0, #1
 8006610:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006614:	4285      	cmp	r5, r0
 8006616:	f84c 1b04 	str.w	r1, [ip], #4
 800661a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800661e:	dcec      	bgt.n	80065fa <__multadd+0x12>
 8006620:	b30e      	cbz	r6, 8006666 <__multadd+0x7e>
 8006622:	68a3      	ldr	r3, [r4, #8]
 8006624:	42ab      	cmp	r3, r5
 8006626:	dc19      	bgt.n	800665c <__multadd+0x74>
 8006628:	6861      	ldr	r1, [r4, #4]
 800662a:	4638      	mov	r0, r7
 800662c:	3101      	adds	r1, #1
 800662e:	f7ff ff79 	bl	8006524 <_Balloc>
 8006632:	4680      	mov	r8, r0
 8006634:	b928      	cbnz	r0, 8006642 <__multadd+0x5a>
 8006636:	4602      	mov	r2, r0
 8006638:	4b0c      	ldr	r3, [pc, #48]	; (800666c <__multadd+0x84>)
 800663a:	480d      	ldr	r0, [pc, #52]	; (8006670 <__multadd+0x88>)
 800663c:	21b5      	movs	r1, #181	; 0xb5
 800663e:	f000 fead 	bl	800739c <__assert_func>
 8006642:	6922      	ldr	r2, [r4, #16]
 8006644:	3202      	adds	r2, #2
 8006646:	f104 010c 	add.w	r1, r4, #12
 800664a:	0092      	lsls	r2, r2, #2
 800664c:	300c      	adds	r0, #12
 800664e:	f7ff ff5b 	bl	8006508 <memcpy>
 8006652:	4621      	mov	r1, r4
 8006654:	4638      	mov	r0, r7
 8006656:	f7ff ffa5 	bl	80065a4 <_Bfree>
 800665a:	4644      	mov	r4, r8
 800665c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006660:	3501      	adds	r5, #1
 8006662:	615e      	str	r6, [r3, #20]
 8006664:	6125      	str	r5, [r4, #16]
 8006666:	4620      	mov	r0, r4
 8006668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666c:	080080cf 	.word	0x080080cf
 8006670:	0800815c 	.word	0x0800815c

08006674 <__s2b>:
 8006674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006678:	460c      	mov	r4, r1
 800667a:	4615      	mov	r5, r2
 800667c:	461f      	mov	r7, r3
 800667e:	2209      	movs	r2, #9
 8006680:	3308      	adds	r3, #8
 8006682:	4606      	mov	r6, r0
 8006684:	fb93 f3f2 	sdiv	r3, r3, r2
 8006688:	2100      	movs	r1, #0
 800668a:	2201      	movs	r2, #1
 800668c:	429a      	cmp	r2, r3
 800668e:	db09      	blt.n	80066a4 <__s2b+0x30>
 8006690:	4630      	mov	r0, r6
 8006692:	f7ff ff47 	bl	8006524 <_Balloc>
 8006696:	b940      	cbnz	r0, 80066aa <__s2b+0x36>
 8006698:	4602      	mov	r2, r0
 800669a:	4b19      	ldr	r3, [pc, #100]	; (8006700 <__s2b+0x8c>)
 800669c:	4819      	ldr	r0, [pc, #100]	; (8006704 <__s2b+0x90>)
 800669e:	21ce      	movs	r1, #206	; 0xce
 80066a0:	f000 fe7c 	bl	800739c <__assert_func>
 80066a4:	0052      	lsls	r2, r2, #1
 80066a6:	3101      	adds	r1, #1
 80066a8:	e7f0      	b.n	800668c <__s2b+0x18>
 80066aa:	9b08      	ldr	r3, [sp, #32]
 80066ac:	6143      	str	r3, [r0, #20]
 80066ae:	2d09      	cmp	r5, #9
 80066b0:	f04f 0301 	mov.w	r3, #1
 80066b4:	6103      	str	r3, [r0, #16]
 80066b6:	dd16      	ble.n	80066e6 <__s2b+0x72>
 80066b8:	f104 0909 	add.w	r9, r4, #9
 80066bc:	46c8      	mov	r8, r9
 80066be:	442c      	add	r4, r5
 80066c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80066c4:	4601      	mov	r1, r0
 80066c6:	3b30      	subs	r3, #48	; 0x30
 80066c8:	220a      	movs	r2, #10
 80066ca:	4630      	mov	r0, r6
 80066cc:	f7ff ff8c 	bl	80065e8 <__multadd>
 80066d0:	45a0      	cmp	r8, r4
 80066d2:	d1f5      	bne.n	80066c0 <__s2b+0x4c>
 80066d4:	f1a5 0408 	sub.w	r4, r5, #8
 80066d8:	444c      	add	r4, r9
 80066da:	1b2d      	subs	r5, r5, r4
 80066dc:	1963      	adds	r3, r4, r5
 80066de:	42bb      	cmp	r3, r7
 80066e0:	db04      	blt.n	80066ec <__s2b+0x78>
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	340a      	adds	r4, #10
 80066e8:	2509      	movs	r5, #9
 80066ea:	e7f6      	b.n	80066da <__s2b+0x66>
 80066ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066f0:	4601      	mov	r1, r0
 80066f2:	3b30      	subs	r3, #48	; 0x30
 80066f4:	220a      	movs	r2, #10
 80066f6:	4630      	mov	r0, r6
 80066f8:	f7ff ff76 	bl	80065e8 <__multadd>
 80066fc:	e7ee      	b.n	80066dc <__s2b+0x68>
 80066fe:	bf00      	nop
 8006700:	080080cf 	.word	0x080080cf
 8006704:	0800815c 	.word	0x0800815c

08006708 <__hi0bits>:
 8006708:	0c03      	lsrs	r3, r0, #16
 800670a:	041b      	lsls	r3, r3, #16
 800670c:	b9d3      	cbnz	r3, 8006744 <__hi0bits+0x3c>
 800670e:	0400      	lsls	r0, r0, #16
 8006710:	2310      	movs	r3, #16
 8006712:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006716:	bf04      	itt	eq
 8006718:	0200      	lsleq	r0, r0, #8
 800671a:	3308      	addeq	r3, #8
 800671c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006720:	bf04      	itt	eq
 8006722:	0100      	lsleq	r0, r0, #4
 8006724:	3304      	addeq	r3, #4
 8006726:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800672a:	bf04      	itt	eq
 800672c:	0080      	lsleq	r0, r0, #2
 800672e:	3302      	addeq	r3, #2
 8006730:	2800      	cmp	r0, #0
 8006732:	db05      	blt.n	8006740 <__hi0bits+0x38>
 8006734:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006738:	f103 0301 	add.w	r3, r3, #1
 800673c:	bf08      	it	eq
 800673e:	2320      	moveq	r3, #32
 8006740:	4618      	mov	r0, r3
 8006742:	4770      	bx	lr
 8006744:	2300      	movs	r3, #0
 8006746:	e7e4      	b.n	8006712 <__hi0bits+0xa>

08006748 <__lo0bits>:
 8006748:	6803      	ldr	r3, [r0, #0]
 800674a:	f013 0207 	ands.w	r2, r3, #7
 800674e:	4601      	mov	r1, r0
 8006750:	d00b      	beq.n	800676a <__lo0bits+0x22>
 8006752:	07da      	lsls	r2, r3, #31
 8006754:	d423      	bmi.n	800679e <__lo0bits+0x56>
 8006756:	0798      	lsls	r0, r3, #30
 8006758:	bf49      	itett	mi
 800675a:	085b      	lsrmi	r3, r3, #1
 800675c:	089b      	lsrpl	r3, r3, #2
 800675e:	2001      	movmi	r0, #1
 8006760:	600b      	strmi	r3, [r1, #0]
 8006762:	bf5c      	itt	pl
 8006764:	600b      	strpl	r3, [r1, #0]
 8006766:	2002      	movpl	r0, #2
 8006768:	4770      	bx	lr
 800676a:	b298      	uxth	r0, r3
 800676c:	b9a8      	cbnz	r0, 800679a <__lo0bits+0x52>
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	2010      	movs	r0, #16
 8006772:	b2da      	uxtb	r2, r3
 8006774:	b90a      	cbnz	r2, 800677a <__lo0bits+0x32>
 8006776:	3008      	adds	r0, #8
 8006778:	0a1b      	lsrs	r3, r3, #8
 800677a:	071a      	lsls	r2, r3, #28
 800677c:	bf04      	itt	eq
 800677e:	091b      	lsreq	r3, r3, #4
 8006780:	3004      	addeq	r0, #4
 8006782:	079a      	lsls	r2, r3, #30
 8006784:	bf04      	itt	eq
 8006786:	089b      	lsreq	r3, r3, #2
 8006788:	3002      	addeq	r0, #2
 800678a:	07da      	lsls	r2, r3, #31
 800678c:	d403      	bmi.n	8006796 <__lo0bits+0x4e>
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	f100 0001 	add.w	r0, r0, #1
 8006794:	d005      	beq.n	80067a2 <__lo0bits+0x5a>
 8006796:	600b      	str	r3, [r1, #0]
 8006798:	4770      	bx	lr
 800679a:	4610      	mov	r0, r2
 800679c:	e7e9      	b.n	8006772 <__lo0bits+0x2a>
 800679e:	2000      	movs	r0, #0
 80067a0:	4770      	bx	lr
 80067a2:	2020      	movs	r0, #32
 80067a4:	4770      	bx	lr
	...

080067a8 <__i2b>:
 80067a8:	b510      	push	{r4, lr}
 80067aa:	460c      	mov	r4, r1
 80067ac:	2101      	movs	r1, #1
 80067ae:	f7ff feb9 	bl	8006524 <_Balloc>
 80067b2:	4602      	mov	r2, r0
 80067b4:	b928      	cbnz	r0, 80067c2 <__i2b+0x1a>
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <__i2b+0x24>)
 80067b8:	4805      	ldr	r0, [pc, #20]	; (80067d0 <__i2b+0x28>)
 80067ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067be:	f000 fded 	bl	800739c <__assert_func>
 80067c2:	2301      	movs	r3, #1
 80067c4:	6144      	str	r4, [r0, #20]
 80067c6:	6103      	str	r3, [r0, #16]
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	080080cf 	.word	0x080080cf
 80067d0:	0800815c 	.word	0x0800815c

080067d4 <__multiply>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	4691      	mov	r9, r2
 80067da:	690a      	ldr	r2, [r1, #16]
 80067dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	bfb8      	it	lt
 80067e4:	460b      	movlt	r3, r1
 80067e6:	460c      	mov	r4, r1
 80067e8:	bfbc      	itt	lt
 80067ea:	464c      	movlt	r4, r9
 80067ec:	4699      	movlt	r9, r3
 80067ee:	6927      	ldr	r7, [r4, #16]
 80067f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067f4:	68a3      	ldr	r3, [r4, #8]
 80067f6:	6861      	ldr	r1, [r4, #4]
 80067f8:	eb07 060a 	add.w	r6, r7, sl
 80067fc:	42b3      	cmp	r3, r6
 80067fe:	b085      	sub	sp, #20
 8006800:	bfb8      	it	lt
 8006802:	3101      	addlt	r1, #1
 8006804:	f7ff fe8e 	bl	8006524 <_Balloc>
 8006808:	b930      	cbnz	r0, 8006818 <__multiply+0x44>
 800680a:	4602      	mov	r2, r0
 800680c:	4b44      	ldr	r3, [pc, #272]	; (8006920 <__multiply+0x14c>)
 800680e:	4845      	ldr	r0, [pc, #276]	; (8006924 <__multiply+0x150>)
 8006810:	f240 115d 	movw	r1, #349	; 0x15d
 8006814:	f000 fdc2 	bl	800739c <__assert_func>
 8006818:	f100 0514 	add.w	r5, r0, #20
 800681c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006820:	462b      	mov	r3, r5
 8006822:	2200      	movs	r2, #0
 8006824:	4543      	cmp	r3, r8
 8006826:	d321      	bcc.n	800686c <__multiply+0x98>
 8006828:	f104 0314 	add.w	r3, r4, #20
 800682c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006830:	f109 0314 	add.w	r3, r9, #20
 8006834:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006838:	9202      	str	r2, [sp, #8]
 800683a:	1b3a      	subs	r2, r7, r4
 800683c:	3a15      	subs	r2, #21
 800683e:	f022 0203 	bic.w	r2, r2, #3
 8006842:	3204      	adds	r2, #4
 8006844:	f104 0115 	add.w	r1, r4, #21
 8006848:	428f      	cmp	r7, r1
 800684a:	bf38      	it	cc
 800684c:	2204      	movcc	r2, #4
 800684e:	9201      	str	r2, [sp, #4]
 8006850:	9a02      	ldr	r2, [sp, #8]
 8006852:	9303      	str	r3, [sp, #12]
 8006854:	429a      	cmp	r2, r3
 8006856:	d80c      	bhi.n	8006872 <__multiply+0x9e>
 8006858:	2e00      	cmp	r6, #0
 800685a:	dd03      	ble.n	8006864 <__multiply+0x90>
 800685c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006860:	2b00      	cmp	r3, #0
 8006862:	d05a      	beq.n	800691a <__multiply+0x146>
 8006864:	6106      	str	r6, [r0, #16]
 8006866:	b005      	add	sp, #20
 8006868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686c:	f843 2b04 	str.w	r2, [r3], #4
 8006870:	e7d8      	b.n	8006824 <__multiply+0x50>
 8006872:	f8b3 a000 	ldrh.w	sl, [r3]
 8006876:	f1ba 0f00 	cmp.w	sl, #0
 800687a:	d024      	beq.n	80068c6 <__multiply+0xf2>
 800687c:	f104 0e14 	add.w	lr, r4, #20
 8006880:	46a9      	mov	r9, r5
 8006882:	f04f 0c00 	mov.w	ip, #0
 8006886:	f85e 2b04 	ldr.w	r2, [lr], #4
 800688a:	f8d9 1000 	ldr.w	r1, [r9]
 800688e:	fa1f fb82 	uxth.w	fp, r2
 8006892:	b289      	uxth	r1, r1
 8006894:	fb0a 110b 	mla	r1, sl, fp, r1
 8006898:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800689c:	f8d9 2000 	ldr.w	r2, [r9]
 80068a0:	4461      	add	r1, ip
 80068a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80068aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068ae:	b289      	uxth	r1, r1
 80068b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068b4:	4577      	cmp	r7, lr
 80068b6:	f849 1b04 	str.w	r1, [r9], #4
 80068ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068be:	d8e2      	bhi.n	8006886 <__multiply+0xb2>
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	f845 c002 	str.w	ip, [r5, r2]
 80068c6:	9a03      	ldr	r2, [sp, #12]
 80068c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068cc:	3304      	adds	r3, #4
 80068ce:	f1b9 0f00 	cmp.w	r9, #0
 80068d2:	d020      	beq.n	8006916 <__multiply+0x142>
 80068d4:	6829      	ldr	r1, [r5, #0]
 80068d6:	f104 0c14 	add.w	ip, r4, #20
 80068da:	46ae      	mov	lr, r5
 80068dc:	f04f 0a00 	mov.w	sl, #0
 80068e0:	f8bc b000 	ldrh.w	fp, [ip]
 80068e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80068e8:	fb09 220b 	mla	r2, r9, fp, r2
 80068ec:	4492      	add	sl, r2
 80068ee:	b289      	uxth	r1, r1
 80068f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80068f4:	f84e 1b04 	str.w	r1, [lr], #4
 80068f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80068fc:	f8be 1000 	ldrh.w	r1, [lr]
 8006900:	0c12      	lsrs	r2, r2, #16
 8006902:	fb09 1102 	mla	r1, r9, r2, r1
 8006906:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800690a:	4567      	cmp	r7, ip
 800690c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006910:	d8e6      	bhi.n	80068e0 <__multiply+0x10c>
 8006912:	9a01      	ldr	r2, [sp, #4]
 8006914:	50a9      	str	r1, [r5, r2]
 8006916:	3504      	adds	r5, #4
 8006918:	e79a      	b.n	8006850 <__multiply+0x7c>
 800691a:	3e01      	subs	r6, #1
 800691c:	e79c      	b.n	8006858 <__multiply+0x84>
 800691e:	bf00      	nop
 8006920:	080080cf 	.word	0x080080cf
 8006924:	0800815c 	.word	0x0800815c

08006928 <__pow5mult>:
 8006928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800692c:	4615      	mov	r5, r2
 800692e:	f012 0203 	ands.w	r2, r2, #3
 8006932:	4606      	mov	r6, r0
 8006934:	460f      	mov	r7, r1
 8006936:	d007      	beq.n	8006948 <__pow5mult+0x20>
 8006938:	4c25      	ldr	r4, [pc, #148]	; (80069d0 <__pow5mult+0xa8>)
 800693a:	3a01      	subs	r2, #1
 800693c:	2300      	movs	r3, #0
 800693e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006942:	f7ff fe51 	bl	80065e8 <__multadd>
 8006946:	4607      	mov	r7, r0
 8006948:	10ad      	asrs	r5, r5, #2
 800694a:	d03d      	beq.n	80069c8 <__pow5mult+0xa0>
 800694c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800694e:	b97c      	cbnz	r4, 8006970 <__pow5mult+0x48>
 8006950:	2010      	movs	r0, #16
 8006952:	f7ff fdbf 	bl	80064d4 <malloc>
 8006956:	4602      	mov	r2, r0
 8006958:	6270      	str	r0, [r6, #36]	; 0x24
 800695a:	b928      	cbnz	r0, 8006968 <__pow5mult+0x40>
 800695c:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <__pow5mult+0xac>)
 800695e:	481e      	ldr	r0, [pc, #120]	; (80069d8 <__pow5mult+0xb0>)
 8006960:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006964:	f000 fd1a 	bl	800739c <__assert_func>
 8006968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800696c:	6004      	str	r4, [r0, #0]
 800696e:	60c4      	str	r4, [r0, #12]
 8006970:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006978:	b94c      	cbnz	r4, 800698e <__pow5mult+0x66>
 800697a:	f240 2171 	movw	r1, #625	; 0x271
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff ff12 	bl	80067a8 <__i2b>
 8006984:	2300      	movs	r3, #0
 8006986:	f8c8 0008 	str.w	r0, [r8, #8]
 800698a:	4604      	mov	r4, r0
 800698c:	6003      	str	r3, [r0, #0]
 800698e:	f04f 0900 	mov.w	r9, #0
 8006992:	07eb      	lsls	r3, r5, #31
 8006994:	d50a      	bpl.n	80069ac <__pow5mult+0x84>
 8006996:	4639      	mov	r1, r7
 8006998:	4622      	mov	r2, r4
 800699a:	4630      	mov	r0, r6
 800699c:	f7ff ff1a 	bl	80067d4 <__multiply>
 80069a0:	4639      	mov	r1, r7
 80069a2:	4680      	mov	r8, r0
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff fdfd 	bl	80065a4 <_Bfree>
 80069aa:	4647      	mov	r7, r8
 80069ac:	106d      	asrs	r5, r5, #1
 80069ae:	d00b      	beq.n	80069c8 <__pow5mult+0xa0>
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	b938      	cbnz	r0, 80069c4 <__pow5mult+0x9c>
 80069b4:	4622      	mov	r2, r4
 80069b6:	4621      	mov	r1, r4
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff ff0b 	bl	80067d4 <__multiply>
 80069be:	6020      	str	r0, [r4, #0]
 80069c0:	f8c0 9000 	str.w	r9, [r0]
 80069c4:	4604      	mov	r4, r0
 80069c6:	e7e4      	b.n	8006992 <__pow5mult+0x6a>
 80069c8:	4638      	mov	r0, r7
 80069ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ce:	bf00      	nop
 80069d0:	080082a8 	.word	0x080082a8
 80069d4:	0800805d 	.word	0x0800805d
 80069d8:	0800815c 	.word	0x0800815c

080069dc <__lshift>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	460c      	mov	r4, r1
 80069e2:	6849      	ldr	r1, [r1, #4]
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	4607      	mov	r7, r0
 80069ee:	4691      	mov	r9, r2
 80069f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069f4:	f108 0601 	add.w	r6, r8, #1
 80069f8:	42b3      	cmp	r3, r6
 80069fa:	db0b      	blt.n	8006a14 <__lshift+0x38>
 80069fc:	4638      	mov	r0, r7
 80069fe:	f7ff fd91 	bl	8006524 <_Balloc>
 8006a02:	4605      	mov	r5, r0
 8006a04:	b948      	cbnz	r0, 8006a1a <__lshift+0x3e>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <__lshift+0xd8>)
 8006a0a:	482b      	ldr	r0, [pc, #172]	; (8006ab8 <__lshift+0xdc>)
 8006a0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a10:	f000 fcc4 	bl	800739c <__assert_func>
 8006a14:	3101      	adds	r1, #1
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	e7ee      	b.n	80069f8 <__lshift+0x1c>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f100 0114 	add.w	r1, r0, #20
 8006a20:	f100 0210 	add.w	r2, r0, #16
 8006a24:	4618      	mov	r0, r3
 8006a26:	4553      	cmp	r3, sl
 8006a28:	db37      	blt.n	8006a9a <__lshift+0xbe>
 8006a2a:	6920      	ldr	r0, [r4, #16]
 8006a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a30:	f104 0314 	add.w	r3, r4, #20
 8006a34:	f019 091f 	ands.w	r9, r9, #31
 8006a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a40:	d02f      	beq.n	8006aa2 <__lshift+0xc6>
 8006a42:	f1c9 0e20 	rsb	lr, r9, #32
 8006a46:	468a      	mov	sl, r1
 8006a48:	f04f 0c00 	mov.w	ip, #0
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	fa02 f209 	lsl.w	r2, r2, r9
 8006a52:	ea42 020c 	orr.w	r2, r2, ip
 8006a56:	f84a 2b04 	str.w	r2, [sl], #4
 8006a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a5e:	4298      	cmp	r0, r3
 8006a60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006a64:	d8f2      	bhi.n	8006a4c <__lshift+0x70>
 8006a66:	1b03      	subs	r3, r0, r4
 8006a68:	3b15      	subs	r3, #21
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	3304      	adds	r3, #4
 8006a70:	f104 0215 	add.w	r2, r4, #21
 8006a74:	4290      	cmp	r0, r2
 8006a76:	bf38      	it	cc
 8006a78:	2304      	movcc	r3, #4
 8006a7a:	f841 c003 	str.w	ip, [r1, r3]
 8006a7e:	f1bc 0f00 	cmp.w	ip, #0
 8006a82:	d001      	beq.n	8006a88 <__lshift+0xac>
 8006a84:	f108 0602 	add.w	r6, r8, #2
 8006a88:	3e01      	subs	r6, #1
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	612e      	str	r6, [r5, #16]
 8006a8e:	4621      	mov	r1, r4
 8006a90:	f7ff fd88 	bl	80065a4 <_Bfree>
 8006a94:	4628      	mov	r0, r5
 8006a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	e7c1      	b.n	8006a26 <__lshift+0x4a>
 8006aa2:	3904      	subs	r1, #4
 8006aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006aac:	4298      	cmp	r0, r3
 8006aae:	d8f9      	bhi.n	8006aa4 <__lshift+0xc8>
 8006ab0:	e7ea      	b.n	8006a88 <__lshift+0xac>
 8006ab2:	bf00      	nop
 8006ab4:	080080cf 	.word	0x080080cf
 8006ab8:	0800815c 	.word	0x0800815c

08006abc <__mcmp>:
 8006abc:	b530      	push	{r4, r5, lr}
 8006abe:	6902      	ldr	r2, [r0, #16]
 8006ac0:	690c      	ldr	r4, [r1, #16]
 8006ac2:	1b12      	subs	r2, r2, r4
 8006ac4:	d10e      	bne.n	8006ae4 <__mcmp+0x28>
 8006ac6:	f100 0314 	add.w	r3, r0, #20
 8006aca:	3114      	adds	r1, #20
 8006acc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ad4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ad8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006adc:	42a5      	cmp	r5, r4
 8006ade:	d003      	beq.n	8006ae8 <__mcmp+0x2c>
 8006ae0:	d305      	bcc.n	8006aee <__mcmp+0x32>
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	bd30      	pop	{r4, r5, pc}
 8006ae8:	4283      	cmp	r3, r0
 8006aea:	d3f3      	bcc.n	8006ad4 <__mcmp+0x18>
 8006aec:	e7fa      	b.n	8006ae4 <__mcmp+0x28>
 8006aee:	f04f 32ff 	mov.w	r2, #4294967295
 8006af2:	e7f7      	b.n	8006ae4 <__mcmp+0x28>

08006af4 <__mdiff>:
 8006af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af8:	460c      	mov	r4, r1
 8006afa:	4606      	mov	r6, r0
 8006afc:	4611      	mov	r1, r2
 8006afe:	4620      	mov	r0, r4
 8006b00:	4690      	mov	r8, r2
 8006b02:	f7ff ffdb 	bl	8006abc <__mcmp>
 8006b06:	1e05      	subs	r5, r0, #0
 8006b08:	d110      	bne.n	8006b2c <__mdiff+0x38>
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7ff fd09 	bl	8006524 <_Balloc>
 8006b12:	b930      	cbnz	r0, 8006b22 <__mdiff+0x2e>
 8006b14:	4b3a      	ldr	r3, [pc, #232]	; (8006c00 <__mdiff+0x10c>)
 8006b16:	4602      	mov	r2, r0
 8006b18:	f240 2132 	movw	r1, #562	; 0x232
 8006b1c:	4839      	ldr	r0, [pc, #228]	; (8006c04 <__mdiff+0x110>)
 8006b1e:	f000 fc3d 	bl	800739c <__assert_func>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	bfa4      	itt	ge
 8006b2e:	4643      	movge	r3, r8
 8006b30:	46a0      	movge	r8, r4
 8006b32:	4630      	mov	r0, r6
 8006b34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006b38:	bfa6      	itte	ge
 8006b3a:	461c      	movge	r4, r3
 8006b3c:	2500      	movge	r5, #0
 8006b3e:	2501      	movlt	r5, #1
 8006b40:	f7ff fcf0 	bl	8006524 <_Balloc>
 8006b44:	b920      	cbnz	r0, 8006b50 <__mdiff+0x5c>
 8006b46:	4b2e      	ldr	r3, [pc, #184]	; (8006c00 <__mdiff+0x10c>)
 8006b48:	4602      	mov	r2, r0
 8006b4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b4e:	e7e5      	b.n	8006b1c <__mdiff+0x28>
 8006b50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b54:	6926      	ldr	r6, [r4, #16]
 8006b56:	60c5      	str	r5, [r0, #12]
 8006b58:	f104 0914 	add.w	r9, r4, #20
 8006b5c:	f108 0514 	add.w	r5, r8, #20
 8006b60:	f100 0e14 	add.w	lr, r0, #20
 8006b64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b6c:	f108 0210 	add.w	r2, r8, #16
 8006b70:	46f2      	mov	sl, lr
 8006b72:	2100      	movs	r1, #0
 8006b74:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b7c:	fa1f f883 	uxth.w	r8, r3
 8006b80:	fa11 f18b 	uxtah	r1, r1, fp
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	eba1 0808 	sub.w	r8, r1, r8
 8006b8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b92:	fa1f f888 	uxth.w	r8, r8
 8006b96:	1419      	asrs	r1, r3, #16
 8006b98:	454e      	cmp	r6, r9
 8006b9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b9e:	f84a 3b04 	str.w	r3, [sl], #4
 8006ba2:	d8e7      	bhi.n	8006b74 <__mdiff+0x80>
 8006ba4:	1b33      	subs	r3, r6, r4
 8006ba6:	3b15      	subs	r3, #21
 8006ba8:	f023 0303 	bic.w	r3, r3, #3
 8006bac:	3304      	adds	r3, #4
 8006bae:	3415      	adds	r4, #21
 8006bb0:	42a6      	cmp	r6, r4
 8006bb2:	bf38      	it	cc
 8006bb4:	2304      	movcc	r3, #4
 8006bb6:	441d      	add	r5, r3
 8006bb8:	4473      	add	r3, lr
 8006bba:	469e      	mov	lr, r3
 8006bbc:	462e      	mov	r6, r5
 8006bbe:	4566      	cmp	r6, ip
 8006bc0:	d30e      	bcc.n	8006be0 <__mdiff+0xec>
 8006bc2:	f10c 0203 	add.w	r2, ip, #3
 8006bc6:	1b52      	subs	r2, r2, r5
 8006bc8:	f022 0203 	bic.w	r2, r2, #3
 8006bcc:	3d03      	subs	r5, #3
 8006bce:	45ac      	cmp	ip, r5
 8006bd0:	bf38      	it	cc
 8006bd2:	2200      	movcc	r2, #0
 8006bd4:	441a      	add	r2, r3
 8006bd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006bda:	b17b      	cbz	r3, 8006bfc <__mdiff+0x108>
 8006bdc:	6107      	str	r7, [r0, #16]
 8006bde:	e7a3      	b.n	8006b28 <__mdiff+0x34>
 8006be0:	f856 8b04 	ldr.w	r8, [r6], #4
 8006be4:	fa11 f288 	uxtah	r2, r1, r8
 8006be8:	1414      	asrs	r4, r2, #16
 8006bea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006bee:	b292      	uxth	r2, r2
 8006bf0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006bf4:	f84e 2b04 	str.w	r2, [lr], #4
 8006bf8:	1421      	asrs	r1, r4, #16
 8006bfa:	e7e0      	b.n	8006bbe <__mdiff+0xca>
 8006bfc:	3f01      	subs	r7, #1
 8006bfe:	e7ea      	b.n	8006bd6 <__mdiff+0xe2>
 8006c00:	080080cf 	.word	0x080080cf
 8006c04:	0800815c 	.word	0x0800815c

08006c08 <__ulp>:
 8006c08:	b082      	sub	sp, #8
 8006c0a:	ed8d 0b00 	vstr	d0, [sp]
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	4912      	ldr	r1, [pc, #72]	; (8006c5c <__ulp+0x54>)
 8006c12:	4019      	ands	r1, r3
 8006c14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	dd05      	ble.n	8006c28 <__ulp+0x20>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	ec43 2b10 	vmov	d0, r2, r3
 8006c24:	b002      	add	sp, #8
 8006c26:	4770      	bx	lr
 8006c28:	4249      	negs	r1, r1
 8006c2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006c2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	da04      	bge.n	8006c46 <__ulp+0x3e>
 8006c3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006c40:	fa41 f300 	asr.w	r3, r1, r0
 8006c44:	e7ec      	b.n	8006c20 <__ulp+0x18>
 8006c46:	f1a0 0114 	sub.w	r1, r0, #20
 8006c4a:	291e      	cmp	r1, #30
 8006c4c:	bfda      	itte	le
 8006c4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006c52:	fa20 f101 	lsrle.w	r1, r0, r1
 8006c56:	2101      	movgt	r1, #1
 8006c58:	460a      	mov	r2, r1
 8006c5a:	e7e1      	b.n	8006c20 <__ulp+0x18>
 8006c5c:	7ff00000 	.word	0x7ff00000

08006c60 <__b2d>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	6905      	ldr	r5, [r0, #16]
 8006c64:	f100 0714 	add.w	r7, r0, #20
 8006c68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006c6c:	1f2e      	subs	r6, r5, #4
 8006c6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff fd48 	bl	8006708 <__hi0bits>
 8006c78:	f1c0 0320 	rsb	r3, r0, #32
 8006c7c:	280a      	cmp	r0, #10
 8006c7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006cfc <__b2d+0x9c>
 8006c82:	600b      	str	r3, [r1, #0]
 8006c84:	dc14      	bgt.n	8006cb0 <__b2d+0x50>
 8006c86:	f1c0 0e0b 	rsb	lr, r0, #11
 8006c8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8006c8e:	42b7      	cmp	r7, r6
 8006c90:	ea41 030c 	orr.w	r3, r1, ip
 8006c94:	bf34      	ite	cc
 8006c96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006c9a:	2100      	movcs	r1, #0
 8006c9c:	3015      	adds	r0, #21
 8006c9e:	fa04 f000 	lsl.w	r0, r4, r0
 8006ca2:	fa21 f10e 	lsr.w	r1, r1, lr
 8006ca6:	ea40 0201 	orr.w	r2, r0, r1
 8006caa:	ec43 2b10 	vmov	d0, r2, r3
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb0:	42b7      	cmp	r7, r6
 8006cb2:	bf3a      	itte	cc
 8006cb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006cb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8006cbc:	2100      	movcs	r1, #0
 8006cbe:	380b      	subs	r0, #11
 8006cc0:	d017      	beq.n	8006cf2 <__b2d+0x92>
 8006cc2:	f1c0 0c20 	rsb	ip, r0, #32
 8006cc6:	fa04 f500 	lsl.w	r5, r4, r0
 8006cca:	42be      	cmp	r6, r7
 8006ccc:	fa21 f40c 	lsr.w	r4, r1, ip
 8006cd0:	ea45 0504 	orr.w	r5, r5, r4
 8006cd4:	bf8c      	ite	hi
 8006cd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006cda:	2400      	movls	r4, #0
 8006cdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006ce0:	fa01 f000 	lsl.w	r0, r1, r0
 8006ce4:	fa24 f40c 	lsr.w	r4, r4, ip
 8006ce8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cec:	ea40 0204 	orr.w	r2, r0, r4
 8006cf0:	e7db      	b.n	8006caa <__b2d+0x4a>
 8006cf2:	ea44 030c 	orr.w	r3, r4, ip
 8006cf6:	460a      	mov	r2, r1
 8006cf8:	e7d7      	b.n	8006caa <__b2d+0x4a>
 8006cfa:	bf00      	nop
 8006cfc:	3ff00000 	.word	0x3ff00000

08006d00 <__d2b>:
 8006d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4689      	mov	r9, r1
 8006d06:	2101      	movs	r1, #1
 8006d08:	ec57 6b10 	vmov	r6, r7, d0
 8006d0c:	4690      	mov	r8, r2
 8006d0e:	f7ff fc09 	bl	8006524 <_Balloc>
 8006d12:	4604      	mov	r4, r0
 8006d14:	b930      	cbnz	r0, 8006d24 <__d2b+0x24>
 8006d16:	4602      	mov	r2, r0
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <__d2b+0xb0>)
 8006d1a:	4826      	ldr	r0, [pc, #152]	; (8006db4 <__d2b+0xb4>)
 8006d1c:	f240 310a 	movw	r1, #778	; 0x30a
 8006d20:	f000 fb3c 	bl	800739c <__assert_func>
 8006d24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d2c:	bb35      	cbnz	r5, 8006d7c <__d2b+0x7c>
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	d028      	beq.n	8006d86 <__d2b+0x86>
 8006d34:	4668      	mov	r0, sp
 8006d36:	9600      	str	r6, [sp, #0]
 8006d38:	f7ff fd06 	bl	8006748 <__lo0bits>
 8006d3c:	9900      	ldr	r1, [sp, #0]
 8006d3e:	b300      	cbz	r0, 8006d82 <__d2b+0x82>
 8006d40:	9a01      	ldr	r2, [sp, #4]
 8006d42:	f1c0 0320 	rsb	r3, r0, #32
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	40c2      	lsrs	r2, r0
 8006d4e:	6163      	str	r3, [r4, #20]
 8006d50:	9201      	str	r2, [sp, #4]
 8006d52:	9b01      	ldr	r3, [sp, #4]
 8006d54:	61a3      	str	r3, [r4, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bf14      	ite	ne
 8006d5a:	2202      	movne	r2, #2
 8006d5c:	2201      	moveq	r2, #1
 8006d5e:	6122      	str	r2, [r4, #16]
 8006d60:	b1d5      	cbz	r5, 8006d98 <__d2b+0x98>
 8006d62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d66:	4405      	add	r5, r0
 8006d68:	f8c9 5000 	str.w	r5, [r9]
 8006d6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d70:	f8c8 0000 	str.w	r0, [r8]
 8006d74:	4620      	mov	r0, r4
 8006d76:	b003      	add	sp, #12
 8006d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d80:	e7d5      	b.n	8006d2e <__d2b+0x2e>
 8006d82:	6161      	str	r1, [r4, #20]
 8006d84:	e7e5      	b.n	8006d52 <__d2b+0x52>
 8006d86:	a801      	add	r0, sp, #4
 8006d88:	f7ff fcde 	bl	8006748 <__lo0bits>
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	6163      	str	r3, [r4, #20]
 8006d90:	2201      	movs	r2, #1
 8006d92:	6122      	str	r2, [r4, #16]
 8006d94:	3020      	adds	r0, #32
 8006d96:	e7e3      	b.n	8006d60 <__d2b+0x60>
 8006d98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006da0:	f8c9 0000 	str.w	r0, [r9]
 8006da4:	6918      	ldr	r0, [r3, #16]
 8006da6:	f7ff fcaf 	bl	8006708 <__hi0bits>
 8006daa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006dae:	e7df      	b.n	8006d70 <__d2b+0x70>
 8006db0:	080080cf 	.word	0x080080cf
 8006db4:	0800815c 	.word	0x0800815c

08006db8 <__ratio>:
 8006db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbc:	4688      	mov	r8, r1
 8006dbe:	4669      	mov	r1, sp
 8006dc0:	4681      	mov	r9, r0
 8006dc2:	f7ff ff4d 	bl	8006c60 <__b2d>
 8006dc6:	a901      	add	r1, sp, #4
 8006dc8:	4640      	mov	r0, r8
 8006dca:	ec55 4b10 	vmov	r4, r5, d0
 8006dce:	f7ff ff47 	bl	8006c60 <__b2d>
 8006dd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006dda:	eba3 0c02 	sub.w	ip, r3, r2
 8006dde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006de8:	ec51 0b10 	vmov	r0, r1, d0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	bfd6      	itet	le
 8006df0:	460a      	movle	r2, r1
 8006df2:	462a      	movgt	r2, r5
 8006df4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006df8:	468b      	mov	fp, r1
 8006dfa:	462f      	mov	r7, r5
 8006dfc:	bfd4      	ite	le
 8006dfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e06:	4620      	mov	r0, r4
 8006e08:	ee10 2a10 	vmov	r2, s0
 8006e0c:	465b      	mov	r3, fp
 8006e0e:	4639      	mov	r1, r7
 8006e10:	f7f9 fd3c 	bl	800088c <__aeabi_ddiv>
 8006e14:	ec41 0b10 	vmov	d0, r0, r1
 8006e18:	b003      	add	sp, #12
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e1e <__copybits>:
 8006e1e:	3901      	subs	r1, #1
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	1149      	asrs	r1, r1, #5
 8006e24:	6914      	ldr	r4, [r2, #16]
 8006e26:	3101      	adds	r1, #1
 8006e28:	f102 0314 	add.w	r3, r2, #20
 8006e2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e34:	1f05      	subs	r5, r0, #4
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	d30c      	bcc.n	8006e54 <__copybits+0x36>
 8006e3a:	1aa3      	subs	r3, r4, r2
 8006e3c:	3b11      	subs	r3, #17
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	3211      	adds	r2, #17
 8006e44:	42a2      	cmp	r2, r4
 8006e46:	bf88      	it	hi
 8006e48:	2300      	movhi	r3, #0
 8006e4a:	4418      	add	r0, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4288      	cmp	r0, r1
 8006e50:	d305      	bcc.n	8006e5e <__copybits+0x40>
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e58:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e5c:	e7eb      	b.n	8006e36 <__copybits+0x18>
 8006e5e:	f840 3b04 	str.w	r3, [r0], #4
 8006e62:	e7f4      	b.n	8006e4e <__copybits+0x30>

08006e64 <__any_on>:
 8006e64:	f100 0214 	add.w	r2, r0, #20
 8006e68:	6900      	ldr	r0, [r0, #16]
 8006e6a:	114b      	asrs	r3, r1, #5
 8006e6c:	4298      	cmp	r0, r3
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	db11      	blt.n	8006e96 <__any_on+0x32>
 8006e72:	dd0a      	ble.n	8006e8a <__any_on+0x26>
 8006e74:	f011 011f 	ands.w	r1, r1, #31
 8006e78:	d007      	beq.n	8006e8a <__any_on+0x26>
 8006e7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e7e:	fa24 f001 	lsr.w	r0, r4, r1
 8006e82:	fa00 f101 	lsl.w	r1, r0, r1
 8006e86:	428c      	cmp	r4, r1
 8006e88:	d10b      	bne.n	8006ea2 <__any_on+0x3e>
 8006e8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d803      	bhi.n	8006e9a <__any_on+0x36>
 8006e92:	2000      	movs	r0, #0
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	4603      	mov	r3, r0
 8006e98:	e7f7      	b.n	8006e8a <__any_on+0x26>
 8006e9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e9e:	2900      	cmp	r1, #0
 8006ea0:	d0f5      	beq.n	8006e8e <__any_on+0x2a>
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	e7f6      	b.n	8006e94 <__any_on+0x30>

08006ea6 <_calloc_r>:
 8006ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ea8:	fba1 2402 	umull	r2, r4, r1, r2
 8006eac:	b94c      	cbnz	r4, 8006ec2 <_calloc_r+0x1c>
 8006eae:	4611      	mov	r1, r2
 8006eb0:	9201      	str	r2, [sp, #4]
 8006eb2:	f000 f87b 	bl	8006fac <_malloc_r>
 8006eb6:	9a01      	ldr	r2, [sp, #4]
 8006eb8:	4605      	mov	r5, r0
 8006eba:	b930      	cbnz	r0, 8006eca <_calloc_r+0x24>
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	b003      	add	sp, #12
 8006ec0:	bd30      	pop	{r4, r5, pc}
 8006ec2:	220c      	movs	r2, #12
 8006ec4:	6002      	str	r2, [r0, #0]
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	e7f8      	b.n	8006ebc <_calloc_r+0x16>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	f7fc fe3c 	bl	8003b48 <memset>
 8006ed0:	e7f4      	b.n	8006ebc <_calloc_r+0x16>
	...

08006ed4 <_free_r>:
 8006ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	d044      	beq.n	8006f64 <_free_r+0x90>
 8006eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ede:	9001      	str	r0, [sp, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ee6:	bfb8      	it	lt
 8006ee8:	18e4      	addlt	r4, r4, r3
 8006eea:	f000 faa1 	bl	8007430 <__malloc_lock>
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <_free_r+0x94>)
 8006ef0:	9801      	ldr	r0, [sp, #4]
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	b933      	cbnz	r3, 8006f04 <_free_r+0x30>
 8006ef6:	6063      	str	r3, [r4, #4]
 8006ef8:	6014      	str	r4, [r2, #0]
 8006efa:	b003      	add	sp, #12
 8006efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f00:	f000 ba9c 	b.w	800743c <__malloc_unlock>
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	d908      	bls.n	8006f1a <_free_r+0x46>
 8006f08:	6825      	ldr	r5, [r4, #0]
 8006f0a:	1961      	adds	r1, r4, r5
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	bf01      	itttt	eq
 8006f10:	6819      	ldreq	r1, [r3, #0]
 8006f12:	685b      	ldreq	r3, [r3, #4]
 8006f14:	1949      	addeq	r1, r1, r5
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	e7ed      	b.n	8006ef6 <_free_r+0x22>
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	b10b      	cbz	r3, 8006f24 <_free_r+0x50>
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	d9fa      	bls.n	8006f1a <_free_r+0x46>
 8006f24:	6811      	ldr	r1, [r2, #0]
 8006f26:	1855      	adds	r5, r2, r1
 8006f28:	42a5      	cmp	r5, r4
 8006f2a:	d10b      	bne.n	8006f44 <_free_r+0x70>
 8006f2c:	6824      	ldr	r4, [r4, #0]
 8006f2e:	4421      	add	r1, r4
 8006f30:	1854      	adds	r4, r2, r1
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	6011      	str	r1, [r2, #0]
 8006f36:	d1e0      	bne.n	8006efa <_free_r+0x26>
 8006f38:	681c      	ldr	r4, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	6053      	str	r3, [r2, #4]
 8006f3e:	4421      	add	r1, r4
 8006f40:	6011      	str	r1, [r2, #0]
 8006f42:	e7da      	b.n	8006efa <_free_r+0x26>
 8006f44:	d902      	bls.n	8006f4c <_free_r+0x78>
 8006f46:	230c      	movs	r3, #12
 8006f48:	6003      	str	r3, [r0, #0]
 8006f4a:	e7d6      	b.n	8006efa <_free_r+0x26>
 8006f4c:	6825      	ldr	r5, [r4, #0]
 8006f4e:	1961      	adds	r1, r4, r5
 8006f50:	428b      	cmp	r3, r1
 8006f52:	bf04      	itt	eq
 8006f54:	6819      	ldreq	r1, [r3, #0]
 8006f56:	685b      	ldreq	r3, [r3, #4]
 8006f58:	6063      	str	r3, [r4, #4]
 8006f5a:	bf04      	itt	eq
 8006f5c:	1949      	addeq	r1, r1, r5
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	6054      	str	r4, [r2, #4]
 8006f62:	e7ca      	b.n	8006efa <_free_r+0x26>
 8006f64:	b003      	add	sp, #12
 8006f66:	bd30      	pop	{r4, r5, pc}
 8006f68:	20000780 	.word	0x20000780

08006f6c <sbrk_aligned>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4e0e      	ldr	r6, [pc, #56]	; (8006fa8 <sbrk_aligned+0x3c>)
 8006f70:	460c      	mov	r4, r1
 8006f72:	6831      	ldr	r1, [r6, #0]
 8006f74:	4605      	mov	r5, r0
 8006f76:	b911      	cbnz	r1, 8006f7e <sbrk_aligned+0x12>
 8006f78:	f000 f9f2 	bl	8007360 <_sbrk_r>
 8006f7c:	6030      	str	r0, [r6, #0]
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4628      	mov	r0, r5
 8006f82:	f000 f9ed 	bl	8007360 <_sbrk_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d00a      	beq.n	8006fa0 <sbrk_aligned+0x34>
 8006f8a:	1cc4      	adds	r4, r0, #3
 8006f8c:	f024 0403 	bic.w	r4, r4, #3
 8006f90:	42a0      	cmp	r0, r4
 8006f92:	d007      	beq.n	8006fa4 <sbrk_aligned+0x38>
 8006f94:	1a21      	subs	r1, r4, r0
 8006f96:	4628      	mov	r0, r5
 8006f98:	f000 f9e2 	bl	8007360 <_sbrk_r>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d101      	bne.n	8006fa4 <sbrk_aligned+0x38>
 8006fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	20000784 	.word	0x20000784

08006fac <_malloc_r>:
 8006fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb0:	1ccd      	adds	r5, r1, #3
 8006fb2:	f025 0503 	bic.w	r5, r5, #3
 8006fb6:	3508      	adds	r5, #8
 8006fb8:	2d0c      	cmp	r5, #12
 8006fba:	bf38      	it	cc
 8006fbc:	250c      	movcc	r5, #12
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	db01      	blt.n	8006fc8 <_malloc_r+0x1c>
 8006fc4:	42a9      	cmp	r1, r5
 8006fc6:	d905      	bls.n	8006fd4 <_malloc_r+0x28>
 8006fc8:	230c      	movs	r3, #12
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	2600      	movs	r6, #0
 8006fce:	4630      	mov	r0, r6
 8006fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd4:	4e2e      	ldr	r6, [pc, #184]	; (8007090 <_malloc_r+0xe4>)
 8006fd6:	f000 fa2b 	bl	8007430 <__malloc_lock>
 8006fda:	6833      	ldr	r3, [r6, #0]
 8006fdc:	461c      	mov	r4, r3
 8006fde:	bb34      	cbnz	r4, 800702e <_malloc_r+0x82>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff ffc2 	bl	8006f6c <sbrk_aligned>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	4604      	mov	r4, r0
 8006fec:	d14d      	bne.n	800708a <_malloc_r+0xde>
 8006fee:	6834      	ldr	r4, [r6, #0]
 8006ff0:	4626      	mov	r6, r4
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	d140      	bne.n	8007078 <_malloc_r+0xcc>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	eb04 0803 	add.w	r8, r4, r3
 8007000:	f000 f9ae 	bl	8007360 <_sbrk_r>
 8007004:	4580      	cmp	r8, r0
 8007006:	d13a      	bne.n	800707e <_malloc_r+0xd2>
 8007008:	6821      	ldr	r1, [r4, #0]
 800700a:	3503      	adds	r5, #3
 800700c:	1a6d      	subs	r5, r5, r1
 800700e:	f025 0503 	bic.w	r5, r5, #3
 8007012:	3508      	adds	r5, #8
 8007014:	2d0c      	cmp	r5, #12
 8007016:	bf38      	it	cc
 8007018:	250c      	movcc	r5, #12
 800701a:	4629      	mov	r1, r5
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff ffa5 	bl	8006f6c <sbrk_aligned>
 8007022:	3001      	adds	r0, #1
 8007024:	d02b      	beq.n	800707e <_malloc_r+0xd2>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	442b      	add	r3, r5
 800702a:	6023      	str	r3, [r4, #0]
 800702c:	e00e      	b.n	800704c <_malloc_r+0xa0>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	1b52      	subs	r2, r2, r5
 8007032:	d41e      	bmi.n	8007072 <_malloc_r+0xc6>
 8007034:	2a0b      	cmp	r2, #11
 8007036:	d916      	bls.n	8007066 <_malloc_r+0xba>
 8007038:	1961      	adds	r1, r4, r5
 800703a:	42a3      	cmp	r3, r4
 800703c:	6025      	str	r5, [r4, #0]
 800703e:	bf18      	it	ne
 8007040:	6059      	strne	r1, [r3, #4]
 8007042:	6863      	ldr	r3, [r4, #4]
 8007044:	bf08      	it	eq
 8007046:	6031      	streq	r1, [r6, #0]
 8007048:	5162      	str	r2, [r4, r5]
 800704a:	604b      	str	r3, [r1, #4]
 800704c:	4638      	mov	r0, r7
 800704e:	f104 060b 	add.w	r6, r4, #11
 8007052:	f000 f9f3 	bl	800743c <__malloc_unlock>
 8007056:	f026 0607 	bic.w	r6, r6, #7
 800705a:	1d23      	adds	r3, r4, #4
 800705c:	1af2      	subs	r2, r6, r3
 800705e:	d0b6      	beq.n	8006fce <_malloc_r+0x22>
 8007060:	1b9b      	subs	r3, r3, r6
 8007062:	50a3      	str	r3, [r4, r2]
 8007064:	e7b3      	b.n	8006fce <_malloc_r+0x22>
 8007066:	6862      	ldr	r2, [r4, #4]
 8007068:	42a3      	cmp	r3, r4
 800706a:	bf0c      	ite	eq
 800706c:	6032      	streq	r2, [r6, #0]
 800706e:	605a      	strne	r2, [r3, #4]
 8007070:	e7ec      	b.n	800704c <_malloc_r+0xa0>
 8007072:	4623      	mov	r3, r4
 8007074:	6864      	ldr	r4, [r4, #4]
 8007076:	e7b2      	b.n	8006fde <_malloc_r+0x32>
 8007078:	4634      	mov	r4, r6
 800707a:	6876      	ldr	r6, [r6, #4]
 800707c:	e7b9      	b.n	8006ff2 <_malloc_r+0x46>
 800707e:	230c      	movs	r3, #12
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	4638      	mov	r0, r7
 8007084:	f000 f9da 	bl	800743c <__malloc_unlock>
 8007088:	e7a1      	b.n	8006fce <_malloc_r+0x22>
 800708a:	6025      	str	r5, [r4, #0]
 800708c:	e7de      	b.n	800704c <_malloc_r+0xa0>
 800708e:	bf00      	nop
 8007090:	20000780 	.word	0x20000780

08007094 <__ssputs_r>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	688e      	ldr	r6, [r1, #8]
 800709a:	429e      	cmp	r6, r3
 800709c:	4682      	mov	sl, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	4690      	mov	r8, r2
 80070a2:	461f      	mov	r7, r3
 80070a4:	d838      	bhi.n	8007118 <__ssputs_r+0x84>
 80070a6:	898a      	ldrh	r2, [r1, #12]
 80070a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070ac:	d032      	beq.n	8007114 <__ssputs_r+0x80>
 80070ae:	6825      	ldr	r5, [r4, #0]
 80070b0:	6909      	ldr	r1, [r1, #16]
 80070b2:	eba5 0901 	sub.w	r9, r5, r1
 80070b6:	6965      	ldr	r5, [r4, #20]
 80070b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070c0:	3301      	adds	r3, #1
 80070c2:	444b      	add	r3, r9
 80070c4:	106d      	asrs	r5, r5, #1
 80070c6:	429d      	cmp	r5, r3
 80070c8:	bf38      	it	cc
 80070ca:	461d      	movcc	r5, r3
 80070cc:	0553      	lsls	r3, r2, #21
 80070ce:	d531      	bpl.n	8007134 <__ssputs_r+0xa0>
 80070d0:	4629      	mov	r1, r5
 80070d2:	f7ff ff6b 	bl	8006fac <_malloc_r>
 80070d6:	4606      	mov	r6, r0
 80070d8:	b950      	cbnz	r0, 80070f0 <__ssputs_r+0x5c>
 80070da:	230c      	movs	r3, #12
 80070dc:	f8ca 3000 	str.w	r3, [sl]
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f0:	6921      	ldr	r1, [r4, #16]
 80070f2:	464a      	mov	r2, r9
 80070f4:	f7ff fa08 	bl	8006508 <memcpy>
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007102:	81a3      	strh	r3, [r4, #12]
 8007104:	6126      	str	r6, [r4, #16]
 8007106:	6165      	str	r5, [r4, #20]
 8007108:	444e      	add	r6, r9
 800710a:	eba5 0509 	sub.w	r5, r5, r9
 800710e:	6026      	str	r6, [r4, #0]
 8007110:	60a5      	str	r5, [r4, #8]
 8007112:	463e      	mov	r6, r7
 8007114:	42be      	cmp	r6, r7
 8007116:	d900      	bls.n	800711a <__ssputs_r+0x86>
 8007118:	463e      	mov	r6, r7
 800711a:	6820      	ldr	r0, [r4, #0]
 800711c:	4632      	mov	r2, r6
 800711e:	4641      	mov	r1, r8
 8007120:	f000 f96c 	bl	80073fc <memmove>
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	1b9b      	subs	r3, r3, r6
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	4433      	add	r3, r6
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	2000      	movs	r0, #0
 8007132:	e7db      	b.n	80070ec <__ssputs_r+0x58>
 8007134:	462a      	mov	r2, r5
 8007136:	f000 f987 	bl	8007448 <_realloc_r>
 800713a:	4606      	mov	r6, r0
 800713c:	2800      	cmp	r0, #0
 800713e:	d1e1      	bne.n	8007104 <__ssputs_r+0x70>
 8007140:	6921      	ldr	r1, [r4, #16]
 8007142:	4650      	mov	r0, sl
 8007144:	f7ff fec6 	bl	8006ed4 <_free_r>
 8007148:	e7c7      	b.n	80070da <__ssputs_r+0x46>
	...

0800714c <_svfiprintf_r>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	4698      	mov	r8, r3
 8007152:	898b      	ldrh	r3, [r1, #12]
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	b09d      	sub	sp, #116	; 0x74
 8007158:	4607      	mov	r7, r0
 800715a:	460d      	mov	r5, r1
 800715c:	4614      	mov	r4, r2
 800715e:	d50e      	bpl.n	800717e <_svfiprintf_r+0x32>
 8007160:	690b      	ldr	r3, [r1, #16]
 8007162:	b963      	cbnz	r3, 800717e <_svfiprintf_r+0x32>
 8007164:	2140      	movs	r1, #64	; 0x40
 8007166:	f7ff ff21 	bl	8006fac <_malloc_r>
 800716a:	6028      	str	r0, [r5, #0]
 800716c:	6128      	str	r0, [r5, #16]
 800716e:	b920      	cbnz	r0, 800717a <_svfiprintf_r+0x2e>
 8007170:	230c      	movs	r3, #12
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e0d1      	b.n	800731e <_svfiprintf_r+0x1d2>
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	616b      	str	r3, [r5, #20]
 800717e:	2300      	movs	r3, #0
 8007180:	9309      	str	r3, [sp, #36]	; 0x24
 8007182:	2320      	movs	r3, #32
 8007184:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007188:	f8cd 800c 	str.w	r8, [sp, #12]
 800718c:	2330      	movs	r3, #48	; 0x30
 800718e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007338 <_svfiprintf_r+0x1ec>
 8007192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007196:	f04f 0901 	mov.w	r9, #1
 800719a:	4623      	mov	r3, r4
 800719c:	469a      	mov	sl, r3
 800719e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a2:	b10a      	cbz	r2, 80071a8 <_svfiprintf_r+0x5c>
 80071a4:	2a25      	cmp	r2, #37	; 0x25
 80071a6:	d1f9      	bne.n	800719c <_svfiprintf_r+0x50>
 80071a8:	ebba 0b04 	subs.w	fp, sl, r4
 80071ac:	d00b      	beq.n	80071c6 <_svfiprintf_r+0x7a>
 80071ae:	465b      	mov	r3, fp
 80071b0:	4622      	mov	r2, r4
 80071b2:	4629      	mov	r1, r5
 80071b4:	4638      	mov	r0, r7
 80071b6:	f7ff ff6d 	bl	8007094 <__ssputs_r>
 80071ba:	3001      	adds	r0, #1
 80071bc:	f000 80aa 	beq.w	8007314 <_svfiprintf_r+0x1c8>
 80071c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c2:	445a      	add	r2, fp
 80071c4:	9209      	str	r2, [sp, #36]	; 0x24
 80071c6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80a2 	beq.w	8007314 <_svfiprintf_r+0x1c8>
 80071d0:	2300      	movs	r3, #0
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295
 80071d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071da:	f10a 0a01 	add.w	sl, sl, #1
 80071de:	9304      	str	r3, [sp, #16]
 80071e0:	9307      	str	r3, [sp, #28]
 80071e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e6:	931a      	str	r3, [sp, #104]	; 0x68
 80071e8:	4654      	mov	r4, sl
 80071ea:	2205      	movs	r2, #5
 80071ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f0:	4851      	ldr	r0, [pc, #324]	; (8007338 <_svfiprintf_r+0x1ec>)
 80071f2:	f7f9 f815 	bl	8000220 <memchr>
 80071f6:	9a04      	ldr	r2, [sp, #16]
 80071f8:	b9d8      	cbnz	r0, 8007232 <_svfiprintf_r+0xe6>
 80071fa:	06d0      	lsls	r0, r2, #27
 80071fc:	bf44      	itt	mi
 80071fe:	2320      	movmi	r3, #32
 8007200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007204:	0711      	lsls	r1, r2, #28
 8007206:	bf44      	itt	mi
 8007208:	232b      	movmi	r3, #43	; 0x2b
 800720a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720e:	f89a 3000 	ldrb.w	r3, [sl]
 8007212:	2b2a      	cmp	r3, #42	; 0x2a
 8007214:	d015      	beq.n	8007242 <_svfiprintf_r+0xf6>
 8007216:	9a07      	ldr	r2, [sp, #28]
 8007218:	4654      	mov	r4, sl
 800721a:	2000      	movs	r0, #0
 800721c:	f04f 0c0a 	mov.w	ip, #10
 8007220:	4621      	mov	r1, r4
 8007222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007226:	3b30      	subs	r3, #48	; 0x30
 8007228:	2b09      	cmp	r3, #9
 800722a:	d94e      	bls.n	80072ca <_svfiprintf_r+0x17e>
 800722c:	b1b0      	cbz	r0, 800725c <_svfiprintf_r+0x110>
 800722e:	9207      	str	r2, [sp, #28]
 8007230:	e014      	b.n	800725c <_svfiprintf_r+0x110>
 8007232:	eba0 0308 	sub.w	r3, r0, r8
 8007236:	fa09 f303 	lsl.w	r3, r9, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	46a2      	mov	sl, r4
 8007240:	e7d2      	b.n	80071e8 <_svfiprintf_r+0x9c>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	1d19      	adds	r1, r3, #4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	9103      	str	r1, [sp, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfbb      	ittet	lt
 800724e:	425b      	neglt	r3, r3
 8007250:	f042 0202 	orrlt.w	r2, r2, #2
 8007254:	9307      	strge	r3, [sp, #28]
 8007256:	9307      	strlt	r3, [sp, #28]
 8007258:	bfb8      	it	lt
 800725a:	9204      	strlt	r2, [sp, #16]
 800725c:	7823      	ldrb	r3, [r4, #0]
 800725e:	2b2e      	cmp	r3, #46	; 0x2e
 8007260:	d10c      	bne.n	800727c <_svfiprintf_r+0x130>
 8007262:	7863      	ldrb	r3, [r4, #1]
 8007264:	2b2a      	cmp	r3, #42	; 0x2a
 8007266:	d135      	bne.n	80072d4 <_svfiprintf_r+0x188>
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	9203      	str	r2, [sp, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	bfb8      	it	lt
 8007274:	f04f 33ff 	movlt.w	r3, #4294967295
 8007278:	3402      	adds	r4, #2
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007348 <_svfiprintf_r+0x1fc>
 8007280:	7821      	ldrb	r1, [r4, #0]
 8007282:	2203      	movs	r2, #3
 8007284:	4650      	mov	r0, sl
 8007286:	f7f8 ffcb 	bl	8000220 <memchr>
 800728a:	b140      	cbz	r0, 800729e <_svfiprintf_r+0x152>
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	eba0 000a 	sub.w	r0, r0, sl
 8007292:	fa03 f000 	lsl.w	r0, r3, r0
 8007296:	9b04      	ldr	r3, [sp, #16]
 8007298:	4303      	orrs	r3, r0
 800729a:	3401      	adds	r4, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	4826      	ldr	r0, [pc, #152]	; (800733c <_svfiprintf_r+0x1f0>)
 80072a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072a8:	2206      	movs	r2, #6
 80072aa:	f7f8 ffb9 	bl	8000220 <memchr>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d038      	beq.n	8007324 <_svfiprintf_r+0x1d8>
 80072b2:	4b23      	ldr	r3, [pc, #140]	; (8007340 <_svfiprintf_r+0x1f4>)
 80072b4:	bb1b      	cbnz	r3, 80072fe <_svfiprintf_r+0x1b2>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	3307      	adds	r3, #7
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	3308      	adds	r3, #8
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c4:	4433      	add	r3, r6
 80072c6:	9309      	str	r3, [sp, #36]	; 0x24
 80072c8:	e767      	b.n	800719a <_svfiprintf_r+0x4e>
 80072ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ce:	460c      	mov	r4, r1
 80072d0:	2001      	movs	r0, #1
 80072d2:	e7a5      	b.n	8007220 <_svfiprintf_r+0xd4>
 80072d4:	2300      	movs	r3, #0
 80072d6:	3401      	adds	r4, #1
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	4619      	mov	r1, r3
 80072dc:	f04f 0c0a 	mov.w	ip, #10
 80072e0:	4620      	mov	r0, r4
 80072e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e6:	3a30      	subs	r2, #48	; 0x30
 80072e8:	2a09      	cmp	r2, #9
 80072ea:	d903      	bls.n	80072f4 <_svfiprintf_r+0x1a8>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0c5      	beq.n	800727c <_svfiprintf_r+0x130>
 80072f0:	9105      	str	r1, [sp, #20]
 80072f2:	e7c3      	b.n	800727c <_svfiprintf_r+0x130>
 80072f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f8:	4604      	mov	r4, r0
 80072fa:	2301      	movs	r3, #1
 80072fc:	e7f0      	b.n	80072e0 <_svfiprintf_r+0x194>
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	462a      	mov	r2, r5
 8007304:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <_svfiprintf_r+0x1f8>)
 8007306:	a904      	add	r1, sp, #16
 8007308:	4638      	mov	r0, r7
 800730a:	f7fc fcc5 	bl	8003c98 <_printf_float>
 800730e:	1c42      	adds	r2, r0, #1
 8007310:	4606      	mov	r6, r0
 8007312:	d1d6      	bne.n	80072c2 <_svfiprintf_r+0x176>
 8007314:	89ab      	ldrh	r3, [r5, #12]
 8007316:	065b      	lsls	r3, r3, #25
 8007318:	f53f af2c 	bmi.w	8007174 <_svfiprintf_r+0x28>
 800731c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800731e:	b01d      	add	sp, #116	; 0x74
 8007320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007324:	ab03      	add	r3, sp, #12
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	462a      	mov	r2, r5
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <_svfiprintf_r+0x1f8>)
 800732c:	a904      	add	r1, sp, #16
 800732e:	4638      	mov	r0, r7
 8007330:	f7fc ff56 	bl	80041e0 <_printf_i>
 8007334:	e7eb      	b.n	800730e <_svfiprintf_r+0x1c2>
 8007336:	bf00      	nop
 8007338:	080082b4 	.word	0x080082b4
 800733c:	080082be 	.word	0x080082be
 8007340:	08003c99 	.word	0x08003c99
 8007344:	08007095 	.word	0x08007095
 8007348:	080082ba 	.word	0x080082ba
 800734c:	00000000 	.word	0x00000000

08007350 <nan>:
 8007350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007358 <nan+0x8>
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	00000000 	.word	0x00000000
 800735c:	7ff80000 	.word	0x7ff80000

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	; (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fa fae6 	bl	800193c <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	20000788 	.word	0x20000788

08007380 <__ascii_wctomb>:
 8007380:	b149      	cbz	r1, 8007396 <__ascii_wctomb+0x16>
 8007382:	2aff      	cmp	r2, #255	; 0xff
 8007384:	bf85      	ittet	hi
 8007386:	238a      	movhi	r3, #138	; 0x8a
 8007388:	6003      	strhi	r3, [r0, #0]
 800738a:	700a      	strbls	r2, [r1, #0]
 800738c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007390:	bf98      	it	ls
 8007392:	2001      	movls	r0, #1
 8007394:	4770      	bx	lr
 8007396:	4608      	mov	r0, r1
 8007398:	4770      	bx	lr
	...

0800739c <__assert_func>:
 800739c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800739e:	4614      	mov	r4, r2
 80073a0:	461a      	mov	r2, r3
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <__assert_func+0x2c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4605      	mov	r5, r0
 80073a8:	68d8      	ldr	r0, [r3, #12]
 80073aa:	b14c      	cbz	r4, 80073c0 <__assert_func+0x24>
 80073ac:	4b07      	ldr	r3, [pc, #28]	; (80073cc <__assert_func+0x30>)
 80073ae:	9100      	str	r1, [sp, #0]
 80073b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073b4:	4906      	ldr	r1, [pc, #24]	; (80073d0 <__assert_func+0x34>)
 80073b6:	462b      	mov	r3, r5
 80073b8:	f000 f80e 	bl	80073d8 <fiprintf>
 80073bc:	f000 fa8c 	bl	80078d8 <abort>
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <__assert_func+0x38>)
 80073c2:	461c      	mov	r4, r3
 80073c4:	e7f3      	b.n	80073ae <__assert_func+0x12>
 80073c6:	bf00      	nop
 80073c8:	2000001c 	.word	0x2000001c
 80073cc:	080082c5 	.word	0x080082c5
 80073d0:	080082d2 	.word	0x080082d2
 80073d4:	08008300 	.word	0x08008300

080073d8 <fiprintf>:
 80073d8:	b40e      	push	{r1, r2, r3}
 80073da:	b503      	push	{r0, r1, lr}
 80073dc:	4601      	mov	r1, r0
 80073de:	ab03      	add	r3, sp, #12
 80073e0:	4805      	ldr	r0, [pc, #20]	; (80073f8 <fiprintf+0x20>)
 80073e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	f000 f885 	bl	80074f8 <_vfiprintf_r>
 80073ee:	b002      	add	sp, #8
 80073f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f4:	b003      	add	sp, #12
 80073f6:	4770      	bx	lr
 80073f8:	2000001c 	.word	0x2000001c

080073fc <memmove>:
 80073fc:	4288      	cmp	r0, r1
 80073fe:	b510      	push	{r4, lr}
 8007400:	eb01 0402 	add.w	r4, r1, r2
 8007404:	d902      	bls.n	800740c <memmove+0x10>
 8007406:	4284      	cmp	r4, r0
 8007408:	4623      	mov	r3, r4
 800740a:	d807      	bhi.n	800741c <memmove+0x20>
 800740c:	1e43      	subs	r3, r0, #1
 800740e:	42a1      	cmp	r1, r4
 8007410:	d008      	beq.n	8007424 <memmove+0x28>
 8007412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800741a:	e7f8      	b.n	800740e <memmove+0x12>
 800741c:	4402      	add	r2, r0
 800741e:	4601      	mov	r1, r0
 8007420:	428a      	cmp	r2, r1
 8007422:	d100      	bne.n	8007426 <memmove+0x2a>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800742a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800742e:	e7f7      	b.n	8007420 <memmove+0x24>

08007430 <__malloc_lock>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__malloc_lock+0x8>)
 8007432:	f000 bc11 	b.w	8007c58 <__retarget_lock_acquire_recursive>
 8007436:	bf00      	nop
 8007438:	2000078c 	.word	0x2000078c

0800743c <__malloc_unlock>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__malloc_unlock+0x8>)
 800743e:	f000 bc0c 	b.w	8007c5a <__retarget_lock_release_recursive>
 8007442:	bf00      	nop
 8007444:	2000078c 	.word	0x2000078c

08007448 <_realloc_r>:
 8007448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744c:	4680      	mov	r8, r0
 800744e:	4614      	mov	r4, r2
 8007450:	460e      	mov	r6, r1
 8007452:	b921      	cbnz	r1, 800745e <_realloc_r+0x16>
 8007454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	4611      	mov	r1, r2
 800745a:	f7ff bda7 	b.w	8006fac <_malloc_r>
 800745e:	b92a      	cbnz	r2, 800746c <_realloc_r+0x24>
 8007460:	f7ff fd38 	bl	8006ed4 <_free_r>
 8007464:	4625      	mov	r5, r4
 8007466:	4628      	mov	r0, r5
 8007468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746c:	f000 fc5c 	bl	8007d28 <_malloc_usable_size_r>
 8007470:	4284      	cmp	r4, r0
 8007472:	4607      	mov	r7, r0
 8007474:	d802      	bhi.n	800747c <_realloc_r+0x34>
 8007476:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800747a:	d812      	bhi.n	80074a2 <_realloc_r+0x5a>
 800747c:	4621      	mov	r1, r4
 800747e:	4640      	mov	r0, r8
 8007480:	f7ff fd94 	bl	8006fac <_malloc_r>
 8007484:	4605      	mov	r5, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	d0ed      	beq.n	8007466 <_realloc_r+0x1e>
 800748a:	42bc      	cmp	r4, r7
 800748c:	4622      	mov	r2, r4
 800748e:	4631      	mov	r1, r6
 8007490:	bf28      	it	cs
 8007492:	463a      	movcs	r2, r7
 8007494:	f7ff f838 	bl	8006508 <memcpy>
 8007498:	4631      	mov	r1, r6
 800749a:	4640      	mov	r0, r8
 800749c:	f7ff fd1a 	bl	8006ed4 <_free_r>
 80074a0:	e7e1      	b.n	8007466 <_realloc_r+0x1e>
 80074a2:	4635      	mov	r5, r6
 80074a4:	e7df      	b.n	8007466 <_realloc_r+0x1e>

080074a6 <__sfputc_r>:
 80074a6:	6893      	ldr	r3, [r2, #8]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	b410      	push	{r4}
 80074ae:	6093      	str	r3, [r2, #8]
 80074b0:	da08      	bge.n	80074c4 <__sfputc_r+0x1e>
 80074b2:	6994      	ldr	r4, [r2, #24]
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	db01      	blt.n	80074bc <__sfputc_r+0x16>
 80074b8:	290a      	cmp	r1, #10
 80074ba:	d103      	bne.n	80074c4 <__sfputc_r+0x1e>
 80074bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c0:	f000 b94a 	b.w	8007758 <__swbuf_r>
 80074c4:	6813      	ldr	r3, [r2, #0]
 80074c6:	1c58      	adds	r0, r3, #1
 80074c8:	6010      	str	r0, [r2, #0]
 80074ca:	7019      	strb	r1, [r3, #0]
 80074cc:	4608      	mov	r0, r1
 80074ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <__sfputs_r>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	4614      	mov	r4, r2
 80074dc:	18d5      	adds	r5, r2, r3
 80074de:	42ac      	cmp	r4, r5
 80074e0:	d101      	bne.n	80074e6 <__sfputs_r+0x12>
 80074e2:	2000      	movs	r0, #0
 80074e4:	e007      	b.n	80074f6 <__sfputs_r+0x22>
 80074e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ea:	463a      	mov	r2, r7
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ffda 	bl	80074a6 <__sfputc_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	d1f3      	bne.n	80074de <__sfputs_r+0xa>
 80074f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074f8 <_vfiprintf_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	460d      	mov	r5, r1
 80074fe:	b09d      	sub	sp, #116	; 0x74
 8007500:	4614      	mov	r4, r2
 8007502:	4698      	mov	r8, r3
 8007504:	4606      	mov	r6, r0
 8007506:	b118      	cbz	r0, 8007510 <_vfiprintf_r+0x18>
 8007508:	6983      	ldr	r3, [r0, #24]
 800750a:	b90b      	cbnz	r3, 8007510 <_vfiprintf_r+0x18>
 800750c:	f000 fb06 	bl	8007b1c <__sinit>
 8007510:	4b89      	ldr	r3, [pc, #548]	; (8007738 <_vfiprintf_r+0x240>)
 8007512:	429d      	cmp	r5, r3
 8007514:	d11b      	bne.n	800754e <_vfiprintf_r+0x56>
 8007516:	6875      	ldr	r5, [r6, #4]
 8007518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800751a:	07d9      	lsls	r1, r3, #31
 800751c:	d405      	bmi.n	800752a <_vfiprintf_r+0x32>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d402      	bmi.n	800752a <_vfiprintf_r+0x32>
 8007524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007526:	f000 fb97 	bl	8007c58 <__retarget_lock_acquire_recursive>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	071b      	lsls	r3, r3, #28
 800752e:	d501      	bpl.n	8007534 <_vfiprintf_r+0x3c>
 8007530:	692b      	ldr	r3, [r5, #16]
 8007532:	b9eb      	cbnz	r3, 8007570 <_vfiprintf_r+0x78>
 8007534:	4629      	mov	r1, r5
 8007536:	4630      	mov	r0, r6
 8007538:	f000 f960 	bl	80077fc <__swsetup_r>
 800753c:	b1c0      	cbz	r0, 8007570 <_vfiprintf_r+0x78>
 800753e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007540:	07dc      	lsls	r4, r3, #31
 8007542:	d50e      	bpl.n	8007562 <_vfiprintf_r+0x6a>
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	b01d      	add	sp, #116	; 0x74
 800754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	4b7b      	ldr	r3, [pc, #492]	; (800773c <_vfiprintf_r+0x244>)
 8007550:	429d      	cmp	r5, r3
 8007552:	d101      	bne.n	8007558 <_vfiprintf_r+0x60>
 8007554:	68b5      	ldr	r5, [r6, #8]
 8007556:	e7df      	b.n	8007518 <_vfiprintf_r+0x20>
 8007558:	4b79      	ldr	r3, [pc, #484]	; (8007740 <_vfiprintf_r+0x248>)
 800755a:	429d      	cmp	r5, r3
 800755c:	bf08      	it	eq
 800755e:	68f5      	ldreq	r5, [r6, #12]
 8007560:	e7da      	b.n	8007518 <_vfiprintf_r+0x20>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	0598      	lsls	r0, r3, #22
 8007566:	d4ed      	bmi.n	8007544 <_vfiprintf_r+0x4c>
 8007568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800756a:	f000 fb76 	bl	8007c5a <__retarget_lock_release_recursive>
 800756e:	e7e9      	b.n	8007544 <_vfiprintf_r+0x4c>
 8007570:	2300      	movs	r3, #0
 8007572:	9309      	str	r3, [sp, #36]	; 0x24
 8007574:	2320      	movs	r3, #32
 8007576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800757a:	f8cd 800c 	str.w	r8, [sp, #12]
 800757e:	2330      	movs	r3, #48	; 0x30
 8007580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007744 <_vfiprintf_r+0x24c>
 8007584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007588:	f04f 0901 	mov.w	r9, #1
 800758c:	4623      	mov	r3, r4
 800758e:	469a      	mov	sl, r3
 8007590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007594:	b10a      	cbz	r2, 800759a <_vfiprintf_r+0xa2>
 8007596:	2a25      	cmp	r2, #37	; 0x25
 8007598:	d1f9      	bne.n	800758e <_vfiprintf_r+0x96>
 800759a:	ebba 0b04 	subs.w	fp, sl, r4
 800759e:	d00b      	beq.n	80075b8 <_vfiprintf_r+0xc0>
 80075a0:	465b      	mov	r3, fp
 80075a2:	4622      	mov	r2, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ff94 	bl	80074d4 <__sfputs_r>
 80075ac:	3001      	adds	r0, #1
 80075ae:	f000 80aa 	beq.w	8007706 <_vfiprintf_r+0x20e>
 80075b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075b4:	445a      	add	r2, fp
 80075b6:	9209      	str	r2, [sp, #36]	; 0x24
 80075b8:	f89a 3000 	ldrb.w	r3, [sl]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 80a2 	beq.w	8007706 <_vfiprintf_r+0x20e>
 80075c2:	2300      	movs	r3, #0
 80075c4:	f04f 32ff 	mov.w	r2, #4294967295
 80075c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075cc:	f10a 0a01 	add.w	sl, sl, #1
 80075d0:	9304      	str	r3, [sp, #16]
 80075d2:	9307      	str	r3, [sp, #28]
 80075d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075d8:	931a      	str	r3, [sp, #104]	; 0x68
 80075da:	4654      	mov	r4, sl
 80075dc:	2205      	movs	r2, #5
 80075de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e2:	4858      	ldr	r0, [pc, #352]	; (8007744 <_vfiprintf_r+0x24c>)
 80075e4:	f7f8 fe1c 	bl	8000220 <memchr>
 80075e8:	9a04      	ldr	r2, [sp, #16]
 80075ea:	b9d8      	cbnz	r0, 8007624 <_vfiprintf_r+0x12c>
 80075ec:	06d1      	lsls	r1, r2, #27
 80075ee:	bf44      	itt	mi
 80075f0:	2320      	movmi	r3, #32
 80075f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f6:	0713      	lsls	r3, r2, #28
 80075f8:	bf44      	itt	mi
 80075fa:	232b      	movmi	r3, #43	; 0x2b
 80075fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007600:	f89a 3000 	ldrb.w	r3, [sl]
 8007604:	2b2a      	cmp	r3, #42	; 0x2a
 8007606:	d015      	beq.n	8007634 <_vfiprintf_r+0x13c>
 8007608:	9a07      	ldr	r2, [sp, #28]
 800760a:	4654      	mov	r4, sl
 800760c:	2000      	movs	r0, #0
 800760e:	f04f 0c0a 	mov.w	ip, #10
 8007612:	4621      	mov	r1, r4
 8007614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007618:	3b30      	subs	r3, #48	; 0x30
 800761a:	2b09      	cmp	r3, #9
 800761c:	d94e      	bls.n	80076bc <_vfiprintf_r+0x1c4>
 800761e:	b1b0      	cbz	r0, 800764e <_vfiprintf_r+0x156>
 8007620:	9207      	str	r2, [sp, #28]
 8007622:	e014      	b.n	800764e <_vfiprintf_r+0x156>
 8007624:	eba0 0308 	sub.w	r3, r0, r8
 8007628:	fa09 f303 	lsl.w	r3, r9, r3
 800762c:	4313      	orrs	r3, r2
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	46a2      	mov	sl, r4
 8007632:	e7d2      	b.n	80075da <_vfiprintf_r+0xe2>
 8007634:	9b03      	ldr	r3, [sp, #12]
 8007636:	1d19      	adds	r1, r3, #4
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	9103      	str	r1, [sp, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	bfbb      	ittet	lt
 8007640:	425b      	neglt	r3, r3
 8007642:	f042 0202 	orrlt.w	r2, r2, #2
 8007646:	9307      	strge	r3, [sp, #28]
 8007648:	9307      	strlt	r3, [sp, #28]
 800764a:	bfb8      	it	lt
 800764c:	9204      	strlt	r2, [sp, #16]
 800764e:	7823      	ldrb	r3, [r4, #0]
 8007650:	2b2e      	cmp	r3, #46	; 0x2e
 8007652:	d10c      	bne.n	800766e <_vfiprintf_r+0x176>
 8007654:	7863      	ldrb	r3, [r4, #1]
 8007656:	2b2a      	cmp	r3, #42	; 0x2a
 8007658:	d135      	bne.n	80076c6 <_vfiprintf_r+0x1ce>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	1d1a      	adds	r2, r3, #4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	9203      	str	r2, [sp, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	bfb8      	it	lt
 8007666:	f04f 33ff 	movlt.w	r3, #4294967295
 800766a:	3402      	adds	r4, #2
 800766c:	9305      	str	r3, [sp, #20]
 800766e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007754 <_vfiprintf_r+0x25c>
 8007672:	7821      	ldrb	r1, [r4, #0]
 8007674:	2203      	movs	r2, #3
 8007676:	4650      	mov	r0, sl
 8007678:	f7f8 fdd2 	bl	8000220 <memchr>
 800767c:	b140      	cbz	r0, 8007690 <_vfiprintf_r+0x198>
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	eba0 000a 	sub.w	r0, r0, sl
 8007684:	fa03 f000 	lsl.w	r0, r3, r0
 8007688:	9b04      	ldr	r3, [sp, #16]
 800768a:	4303      	orrs	r3, r0
 800768c:	3401      	adds	r4, #1
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007694:	482c      	ldr	r0, [pc, #176]	; (8007748 <_vfiprintf_r+0x250>)
 8007696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800769a:	2206      	movs	r2, #6
 800769c:	f7f8 fdc0 	bl	8000220 <memchr>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d03f      	beq.n	8007724 <_vfiprintf_r+0x22c>
 80076a4:	4b29      	ldr	r3, [pc, #164]	; (800774c <_vfiprintf_r+0x254>)
 80076a6:	bb1b      	cbnz	r3, 80076f0 <_vfiprintf_r+0x1f8>
 80076a8:	9b03      	ldr	r3, [sp, #12]
 80076aa:	3307      	adds	r3, #7
 80076ac:	f023 0307 	bic.w	r3, r3, #7
 80076b0:	3308      	adds	r3, #8
 80076b2:	9303      	str	r3, [sp, #12]
 80076b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b6:	443b      	add	r3, r7
 80076b8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ba:	e767      	b.n	800758c <_vfiprintf_r+0x94>
 80076bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80076c0:	460c      	mov	r4, r1
 80076c2:	2001      	movs	r0, #1
 80076c4:	e7a5      	b.n	8007612 <_vfiprintf_r+0x11a>
 80076c6:	2300      	movs	r3, #0
 80076c8:	3401      	adds	r4, #1
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	4619      	mov	r1, r3
 80076ce:	f04f 0c0a 	mov.w	ip, #10
 80076d2:	4620      	mov	r0, r4
 80076d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d8:	3a30      	subs	r2, #48	; 0x30
 80076da:	2a09      	cmp	r2, #9
 80076dc:	d903      	bls.n	80076e6 <_vfiprintf_r+0x1ee>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0c5      	beq.n	800766e <_vfiprintf_r+0x176>
 80076e2:	9105      	str	r1, [sp, #20]
 80076e4:	e7c3      	b.n	800766e <_vfiprintf_r+0x176>
 80076e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ea:	4604      	mov	r4, r0
 80076ec:	2301      	movs	r3, #1
 80076ee:	e7f0      	b.n	80076d2 <_vfiprintf_r+0x1da>
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	462a      	mov	r2, r5
 80076f6:	4b16      	ldr	r3, [pc, #88]	; (8007750 <_vfiprintf_r+0x258>)
 80076f8:	a904      	add	r1, sp, #16
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7fc facc 	bl	8003c98 <_printf_float>
 8007700:	4607      	mov	r7, r0
 8007702:	1c78      	adds	r0, r7, #1
 8007704:	d1d6      	bne.n	80076b4 <_vfiprintf_r+0x1bc>
 8007706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007708:	07d9      	lsls	r1, r3, #31
 800770a:	d405      	bmi.n	8007718 <_vfiprintf_r+0x220>
 800770c:	89ab      	ldrh	r3, [r5, #12]
 800770e:	059a      	lsls	r2, r3, #22
 8007710:	d402      	bmi.n	8007718 <_vfiprintf_r+0x220>
 8007712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007714:	f000 faa1 	bl	8007c5a <__retarget_lock_release_recursive>
 8007718:	89ab      	ldrh	r3, [r5, #12]
 800771a:	065b      	lsls	r3, r3, #25
 800771c:	f53f af12 	bmi.w	8007544 <_vfiprintf_r+0x4c>
 8007720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007722:	e711      	b.n	8007548 <_vfiprintf_r+0x50>
 8007724:	ab03      	add	r3, sp, #12
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	462a      	mov	r2, r5
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <_vfiprintf_r+0x258>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	4630      	mov	r0, r6
 8007730:	f7fc fd56 	bl	80041e0 <_printf_i>
 8007734:	e7e4      	b.n	8007700 <_vfiprintf_r+0x208>
 8007736:	bf00      	nop
 8007738:	08008424 	.word	0x08008424
 800773c:	08008444 	.word	0x08008444
 8007740:	08008404 	.word	0x08008404
 8007744:	080082b4 	.word	0x080082b4
 8007748:	080082be 	.word	0x080082be
 800774c:	08003c99 	.word	0x08003c99
 8007750:	080074d5 	.word	0x080074d5
 8007754:	080082ba 	.word	0x080082ba

08007758 <__swbuf_r>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	460e      	mov	r6, r1
 800775c:	4614      	mov	r4, r2
 800775e:	4605      	mov	r5, r0
 8007760:	b118      	cbz	r0, 800776a <__swbuf_r+0x12>
 8007762:	6983      	ldr	r3, [r0, #24]
 8007764:	b90b      	cbnz	r3, 800776a <__swbuf_r+0x12>
 8007766:	f000 f9d9 	bl	8007b1c <__sinit>
 800776a:	4b21      	ldr	r3, [pc, #132]	; (80077f0 <__swbuf_r+0x98>)
 800776c:	429c      	cmp	r4, r3
 800776e:	d12b      	bne.n	80077c8 <__swbuf_r+0x70>
 8007770:	686c      	ldr	r4, [r5, #4]
 8007772:	69a3      	ldr	r3, [r4, #24]
 8007774:	60a3      	str	r3, [r4, #8]
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	071a      	lsls	r2, r3, #28
 800777a:	d52f      	bpl.n	80077dc <__swbuf_r+0x84>
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	b36b      	cbz	r3, 80077dc <__swbuf_r+0x84>
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	1ac0      	subs	r0, r0, r3
 8007786:	6963      	ldr	r3, [r4, #20]
 8007788:	b2f6      	uxtb	r6, r6
 800778a:	4283      	cmp	r3, r0
 800778c:	4637      	mov	r7, r6
 800778e:	dc04      	bgt.n	800779a <__swbuf_r+0x42>
 8007790:	4621      	mov	r1, r4
 8007792:	4628      	mov	r0, r5
 8007794:	f000 f92e 	bl	80079f4 <_fflush_r>
 8007798:	bb30      	cbnz	r0, 80077e8 <__swbuf_r+0x90>
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	3b01      	subs	r3, #1
 800779e:	60a3      	str	r3, [r4, #8]
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	701e      	strb	r6, [r3, #0]
 80077a8:	6963      	ldr	r3, [r4, #20]
 80077aa:	3001      	adds	r0, #1
 80077ac:	4283      	cmp	r3, r0
 80077ae:	d004      	beq.n	80077ba <__swbuf_r+0x62>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	07db      	lsls	r3, r3, #31
 80077b4:	d506      	bpl.n	80077c4 <__swbuf_r+0x6c>
 80077b6:	2e0a      	cmp	r6, #10
 80077b8:	d104      	bne.n	80077c4 <__swbuf_r+0x6c>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f919 	bl	80079f4 <_fflush_r>
 80077c2:	b988      	cbnz	r0, 80077e8 <__swbuf_r+0x90>
 80077c4:	4638      	mov	r0, r7
 80077c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <__swbuf_r+0x9c>)
 80077ca:	429c      	cmp	r4, r3
 80077cc:	d101      	bne.n	80077d2 <__swbuf_r+0x7a>
 80077ce:	68ac      	ldr	r4, [r5, #8]
 80077d0:	e7cf      	b.n	8007772 <__swbuf_r+0x1a>
 80077d2:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <__swbuf_r+0xa0>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	bf08      	it	eq
 80077d8:	68ec      	ldreq	r4, [r5, #12]
 80077da:	e7ca      	b.n	8007772 <__swbuf_r+0x1a>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 f80c 	bl	80077fc <__swsetup_r>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d0cb      	beq.n	8007780 <__swbuf_r+0x28>
 80077e8:	f04f 37ff 	mov.w	r7, #4294967295
 80077ec:	e7ea      	b.n	80077c4 <__swbuf_r+0x6c>
 80077ee:	bf00      	nop
 80077f0:	08008424 	.word	0x08008424
 80077f4:	08008444 	.word	0x08008444
 80077f8:	08008404 	.word	0x08008404

080077fc <__swsetup_r>:
 80077fc:	4b32      	ldr	r3, [pc, #200]	; (80078c8 <__swsetup_r+0xcc>)
 80077fe:	b570      	push	{r4, r5, r6, lr}
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	4606      	mov	r6, r0
 8007804:	460c      	mov	r4, r1
 8007806:	b125      	cbz	r5, 8007812 <__swsetup_r+0x16>
 8007808:	69ab      	ldr	r3, [r5, #24]
 800780a:	b913      	cbnz	r3, 8007812 <__swsetup_r+0x16>
 800780c:	4628      	mov	r0, r5
 800780e:	f000 f985 	bl	8007b1c <__sinit>
 8007812:	4b2e      	ldr	r3, [pc, #184]	; (80078cc <__swsetup_r+0xd0>)
 8007814:	429c      	cmp	r4, r3
 8007816:	d10f      	bne.n	8007838 <__swsetup_r+0x3c>
 8007818:	686c      	ldr	r4, [r5, #4]
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007820:	0719      	lsls	r1, r3, #28
 8007822:	d42c      	bmi.n	800787e <__swsetup_r+0x82>
 8007824:	06dd      	lsls	r5, r3, #27
 8007826:	d411      	bmi.n	800784c <__swsetup_r+0x50>
 8007828:	2309      	movs	r3, #9
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	f04f 30ff 	mov.w	r0, #4294967295
 8007836:	e03e      	b.n	80078b6 <__swsetup_r+0xba>
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <__swsetup_r+0xd4>)
 800783a:	429c      	cmp	r4, r3
 800783c:	d101      	bne.n	8007842 <__swsetup_r+0x46>
 800783e:	68ac      	ldr	r4, [r5, #8]
 8007840:	e7eb      	b.n	800781a <__swsetup_r+0x1e>
 8007842:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <__swsetup_r+0xd8>)
 8007844:	429c      	cmp	r4, r3
 8007846:	bf08      	it	eq
 8007848:	68ec      	ldreq	r4, [r5, #12]
 800784a:	e7e6      	b.n	800781a <__swsetup_r+0x1e>
 800784c:	0758      	lsls	r0, r3, #29
 800784e:	d512      	bpl.n	8007876 <__swsetup_r+0x7a>
 8007850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007852:	b141      	cbz	r1, 8007866 <__swsetup_r+0x6a>
 8007854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007858:	4299      	cmp	r1, r3
 800785a:	d002      	beq.n	8007862 <__swsetup_r+0x66>
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff fb39 	bl	8006ed4 <_free_r>
 8007862:	2300      	movs	r3, #0
 8007864:	6363      	str	r3, [r4, #52]	; 0x34
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	2300      	movs	r3, #0
 8007870:	6063      	str	r3, [r4, #4]
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	f043 0308 	orr.w	r3, r3, #8
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	b94b      	cbnz	r3, 8007896 <__swsetup_r+0x9a>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788c:	d003      	beq.n	8007896 <__swsetup_r+0x9a>
 800788e:	4621      	mov	r1, r4
 8007890:	4630      	mov	r0, r6
 8007892:	f000 fa09 	bl	8007ca8 <__smakebuf_r>
 8007896:	89a0      	ldrh	r0, [r4, #12]
 8007898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800789c:	f010 0301 	ands.w	r3, r0, #1
 80078a0:	d00a      	beq.n	80078b8 <__swsetup_r+0xbc>
 80078a2:	2300      	movs	r3, #0
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	6963      	ldr	r3, [r4, #20]
 80078a8:	425b      	negs	r3, r3
 80078aa:	61a3      	str	r3, [r4, #24]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	b943      	cbnz	r3, 80078c2 <__swsetup_r+0xc6>
 80078b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078b4:	d1ba      	bne.n	800782c <__swsetup_r+0x30>
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	0781      	lsls	r1, r0, #30
 80078ba:	bf58      	it	pl
 80078bc:	6963      	ldrpl	r3, [r4, #20]
 80078be:	60a3      	str	r3, [r4, #8]
 80078c0:	e7f4      	b.n	80078ac <__swsetup_r+0xb0>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e7f7      	b.n	80078b6 <__swsetup_r+0xba>
 80078c6:	bf00      	nop
 80078c8:	2000001c 	.word	0x2000001c
 80078cc:	08008424 	.word	0x08008424
 80078d0:	08008444 	.word	0x08008444
 80078d4:	08008404 	.word	0x08008404

080078d8 <abort>:
 80078d8:	b508      	push	{r3, lr}
 80078da:	2006      	movs	r0, #6
 80078dc:	f000 fa54 	bl	8007d88 <raise>
 80078e0:	2001      	movs	r0, #1
 80078e2:	f7f9 ffb3 	bl	800184c <_exit>
	...

080078e8 <__sflush_r>:
 80078e8:	898a      	ldrh	r2, [r1, #12]
 80078ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ee:	4605      	mov	r5, r0
 80078f0:	0710      	lsls	r0, r2, #28
 80078f2:	460c      	mov	r4, r1
 80078f4:	d458      	bmi.n	80079a8 <__sflush_r+0xc0>
 80078f6:	684b      	ldr	r3, [r1, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dc05      	bgt.n	8007908 <__sflush_r+0x20>
 80078fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dc02      	bgt.n	8007908 <__sflush_r+0x20>
 8007902:	2000      	movs	r0, #0
 8007904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800790a:	2e00      	cmp	r6, #0
 800790c:	d0f9      	beq.n	8007902 <__sflush_r+0x1a>
 800790e:	2300      	movs	r3, #0
 8007910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007914:	682f      	ldr	r7, [r5, #0]
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	d032      	beq.n	8007980 <__sflush_r+0x98>
 800791a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	075a      	lsls	r2, r3, #29
 8007920:	d505      	bpl.n	800792e <__sflush_r+0x46>
 8007922:	6863      	ldr	r3, [r4, #4]
 8007924:	1ac0      	subs	r0, r0, r3
 8007926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007928:	b10b      	cbz	r3, 800792e <__sflush_r+0x46>
 800792a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800792c:	1ac0      	subs	r0, r0, r3
 800792e:	2300      	movs	r3, #0
 8007930:	4602      	mov	r2, r0
 8007932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007934:	6a21      	ldr	r1, [r4, #32]
 8007936:	4628      	mov	r0, r5
 8007938:	47b0      	blx	r6
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	d106      	bne.n	800794e <__sflush_r+0x66>
 8007940:	6829      	ldr	r1, [r5, #0]
 8007942:	291d      	cmp	r1, #29
 8007944:	d82c      	bhi.n	80079a0 <__sflush_r+0xb8>
 8007946:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <__sflush_r+0x108>)
 8007948:	40ca      	lsrs	r2, r1
 800794a:	07d6      	lsls	r6, r2, #31
 800794c:	d528      	bpl.n	80079a0 <__sflush_r+0xb8>
 800794e:	2200      	movs	r2, #0
 8007950:	6062      	str	r2, [r4, #4]
 8007952:	04d9      	lsls	r1, r3, #19
 8007954:	6922      	ldr	r2, [r4, #16]
 8007956:	6022      	str	r2, [r4, #0]
 8007958:	d504      	bpl.n	8007964 <__sflush_r+0x7c>
 800795a:	1c42      	adds	r2, r0, #1
 800795c:	d101      	bne.n	8007962 <__sflush_r+0x7a>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	b903      	cbnz	r3, 8007964 <__sflush_r+0x7c>
 8007962:	6560      	str	r0, [r4, #84]	; 0x54
 8007964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007966:	602f      	str	r7, [r5, #0]
 8007968:	2900      	cmp	r1, #0
 800796a:	d0ca      	beq.n	8007902 <__sflush_r+0x1a>
 800796c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007970:	4299      	cmp	r1, r3
 8007972:	d002      	beq.n	800797a <__sflush_r+0x92>
 8007974:	4628      	mov	r0, r5
 8007976:	f7ff faad 	bl	8006ed4 <_free_r>
 800797a:	2000      	movs	r0, #0
 800797c:	6360      	str	r0, [r4, #52]	; 0x34
 800797e:	e7c1      	b.n	8007904 <__sflush_r+0x1c>
 8007980:	6a21      	ldr	r1, [r4, #32]
 8007982:	2301      	movs	r3, #1
 8007984:	4628      	mov	r0, r5
 8007986:	47b0      	blx	r6
 8007988:	1c41      	adds	r1, r0, #1
 800798a:	d1c7      	bne.n	800791c <__sflush_r+0x34>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0c4      	beq.n	800791c <__sflush_r+0x34>
 8007992:	2b1d      	cmp	r3, #29
 8007994:	d001      	beq.n	800799a <__sflush_r+0xb2>
 8007996:	2b16      	cmp	r3, #22
 8007998:	d101      	bne.n	800799e <__sflush_r+0xb6>
 800799a:	602f      	str	r7, [r5, #0]
 800799c:	e7b1      	b.n	8007902 <__sflush_r+0x1a>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	e7ad      	b.n	8007904 <__sflush_r+0x1c>
 80079a8:	690f      	ldr	r7, [r1, #16]
 80079aa:	2f00      	cmp	r7, #0
 80079ac:	d0a9      	beq.n	8007902 <__sflush_r+0x1a>
 80079ae:	0793      	lsls	r3, r2, #30
 80079b0:	680e      	ldr	r6, [r1, #0]
 80079b2:	bf08      	it	eq
 80079b4:	694b      	ldreq	r3, [r1, #20]
 80079b6:	600f      	str	r7, [r1, #0]
 80079b8:	bf18      	it	ne
 80079ba:	2300      	movne	r3, #0
 80079bc:	eba6 0807 	sub.w	r8, r6, r7
 80079c0:	608b      	str	r3, [r1, #8]
 80079c2:	f1b8 0f00 	cmp.w	r8, #0
 80079c6:	dd9c      	ble.n	8007902 <__sflush_r+0x1a>
 80079c8:	6a21      	ldr	r1, [r4, #32]
 80079ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079cc:	4643      	mov	r3, r8
 80079ce:	463a      	mov	r2, r7
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b0      	blx	r6
 80079d4:	2800      	cmp	r0, #0
 80079d6:	dc06      	bgt.n	80079e6 <__sflush_r+0xfe>
 80079d8:	89a3      	ldrh	r3, [r4, #12]
 80079da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295
 80079e4:	e78e      	b.n	8007904 <__sflush_r+0x1c>
 80079e6:	4407      	add	r7, r0
 80079e8:	eba8 0800 	sub.w	r8, r8, r0
 80079ec:	e7e9      	b.n	80079c2 <__sflush_r+0xda>
 80079ee:	bf00      	nop
 80079f0:	20400001 	.word	0x20400001

080079f4 <_fflush_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	690b      	ldr	r3, [r1, #16]
 80079f8:	4605      	mov	r5, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	b913      	cbnz	r3, 8007a04 <_fflush_r+0x10>
 80079fe:	2500      	movs	r5, #0
 8007a00:	4628      	mov	r0, r5
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	b118      	cbz	r0, 8007a0e <_fflush_r+0x1a>
 8007a06:	6983      	ldr	r3, [r0, #24]
 8007a08:	b90b      	cbnz	r3, 8007a0e <_fflush_r+0x1a>
 8007a0a:	f000 f887 	bl	8007b1c <__sinit>
 8007a0e:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <_fflush_r+0x6c>)
 8007a10:	429c      	cmp	r4, r3
 8007a12:	d11b      	bne.n	8007a4c <_fflush_r+0x58>
 8007a14:	686c      	ldr	r4, [r5, #4]
 8007a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0ef      	beq.n	80079fe <_fflush_r+0xa>
 8007a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a20:	07d0      	lsls	r0, r2, #31
 8007a22:	d404      	bmi.n	8007a2e <_fflush_r+0x3a>
 8007a24:	0599      	lsls	r1, r3, #22
 8007a26:	d402      	bmi.n	8007a2e <_fflush_r+0x3a>
 8007a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a2a:	f000 f915 	bl	8007c58 <__retarget_lock_acquire_recursive>
 8007a2e:	4628      	mov	r0, r5
 8007a30:	4621      	mov	r1, r4
 8007a32:	f7ff ff59 	bl	80078e8 <__sflush_r>
 8007a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a38:	07da      	lsls	r2, r3, #31
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	d4e0      	bmi.n	8007a00 <_fflush_r+0xc>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	059b      	lsls	r3, r3, #22
 8007a42:	d4dd      	bmi.n	8007a00 <_fflush_r+0xc>
 8007a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a46:	f000 f908 	bl	8007c5a <__retarget_lock_release_recursive>
 8007a4a:	e7d9      	b.n	8007a00 <_fflush_r+0xc>
 8007a4c:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <_fflush_r+0x70>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <_fflush_r+0x62>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7df      	b.n	8007a16 <_fflush_r+0x22>
 8007a56:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <_fflush_r+0x74>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7da      	b.n	8007a16 <_fflush_r+0x22>
 8007a60:	08008424 	.word	0x08008424
 8007a64:	08008444 	.word	0x08008444
 8007a68:	08008404 	.word	0x08008404

08007a6c <std>:
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	b510      	push	{r4, lr}
 8007a70:	4604      	mov	r4, r0
 8007a72:	e9c0 3300 	strd	r3, r3, [r0]
 8007a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a7a:	6083      	str	r3, [r0, #8]
 8007a7c:	8181      	strh	r1, [r0, #12]
 8007a7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a80:	81c2      	strh	r2, [r0, #14]
 8007a82:	6183      	str	r3, [r0, #24]
 8007a84:	4619      	mov	r1, r3
 8007a86:	2208      	movs	r2, #8
 8007a88:	305c      	adds	r0, #92	; 0x5c
 8007a8a:	f7fc f85d 	bl	8003b48 <memset>
 8007a8e:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <std+0x38>)
 8007a90:	6263      	str	r3, [r4, #36]	; 0x24
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <std+0x3c>)
 8007a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <std+0x40>)
 8007a98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a9a:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <std+0x44>)
 8007a9c:	6224      	str	r4, [r4, #32]
 8007a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	08007dc1 	.word	0x08007dc1
 8007aa8:	08007de3 	.word	0x08007de3
 8007aac:	08007e1b 	.word	0x08007e1b
 8007ab0:	08007e3f 	.word	0x08007e3f

08007ab4 <_cleanup_r>:
 8007ab4:	4901      	ldr	r1, [pc, #4]	; (8007abc <_cleanup_r+0x8>)
 8007ab6:	f000 b8af 	b.w	8007c18 <_fwalk_reent>
 8007aba:	bf00      	nop
 8007abc:	080079f5 	.word	0x080079f5

08007ac0 <__sfmoreglue>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	2268      	movs	r2, #104	; 0x68
 8007ac4:	1e4d      	subs	r5, r1, #1
 8007ac6:	4355      	muls	r5, r2
 8007ac8:	460e      	mov	r6, r1
 8007aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ace:	f7ff fa6d 	bl	8006fac <_malloc_r>
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	b140      	cbz	r0, 8007ae8 <__sfmoreglue+0x28>
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8007adc:	300c      	adds	r0, #12
 8007ade:	60a0      	str	r0, [r4, #8]
 8007ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ae4:	f7fc f830 	bl	8003b48 <memset>
 8007ae8:	4620      	mov	r0, r4
 8007aea:	bd70      	pop	{r4, r5, r6, pc}

08007aec <__sfp_lock_acquire>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__sfp_lock_acquire+0x8>)
 8007aee:	f000 b8b3 	b.w	8007c58 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	2000078d 	.word	0x2000078d

08007af8 <__sfp_lock_release>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__sfp_lock_release+0x8>)
 8007afa:	f000 b8ae 	b.w	8007c5a <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	2000078d 	.word	0x2000078d

08007b04 <__sinit_lock_acquire>:
 8007b04:	4801      	ldr	r0, [pc, #4]	; (8007b0c <__sinit_lock_acquire+0x8>)
 8007b06:	f000 b8a7 	b.w	8007c58 <__retarget_lock_acquire_recursive>
 8007b0a:	bf00      	nop
 8007b0c:	2000078e 	.word	0x2000078e

08007b10 <__sinit_lock_release>:
 8007b10:	4801      	ldr	r0, [pc, #4]	; (8007b18 <__sinit_lock_release+0x8>)
 8007b12:	f000 b8a2 	b.w	8007c5a <__retarget_lock_release_recursive>
 8007b16:	bf00      	nop
 8007b18:	2000078e 	.word	0x2000078e

08007b1c <__sinit>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	4604      	mov	r4, r0
 8007b20:	f7ff fff0 	bl	8007b04 <__sinit_lock_acquire>
 8007b24:	69a3      	ldr	r3, [r4, #24]
 8007b26:	b11b      	cbz	r3, 8007b30 <__sinit+0x14>
 8007b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2c:	f7ff bff0 	b.w	8007b10 <__sinit_lock_release>
 8007b30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b34:	6523      	str	r3, [r4, #80]	; 0x50
 8007b36:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <__sinit+0x68>)
 8007b38:	4a13      	ldr	r2, [pc, #76]	; (8007b88 <__sinit+0x6c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	bf04      	itt	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	61a3      	streq	r3, [r4, #24]
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 f820 	bl	8007b8c <__sfp>
 8007b4c:	6060      	str	r0, [r4, #4]
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f000 f81c 	bl	8007b8c <__sfp>
 8007b54:	60a0      	str	r0, [r4, #8]
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 f818 	bl	8007b8c <__sfp>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	60e0      	str	r0, [r4, #12]
 8007b60:	2104      	movs	r1, #4
 8007b62:	6860      	ldr	r0, [r4, #4]
 8007b64:	f7ff ff82 	bl	8007a6c <std>
 8007b68:	68a0      	ldr	r0, [r4, #8]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	2109      	movs	r1, #9
 8007b6e:	f7ff ff7d 	bl	8007a6c <std>
 8007b72:	68e0      	ldr	r0, [r4, #12]
 8007b74:	2202      	movs	r2, #2
 8007b76:	2112      	movs	r1, #18
 8007b78:	f7ff ff78 	bl	8007a6c <std>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	61a3      	str	r3, [r4, #24]
 8007b80:	e7d2      	b.n	8007b28 <__sinit+0xc>
 8007b82:	bf00      	nop
 8007b84:	08007fc4 	.word	0x08007fc4
 8007b88:	08007ab5 	.word	0x08007ab5

08007b8c <__sfp>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	4607      	mov	r7, r0
 8007b90:	f7ff ffac 	bl	8007aec <__sfp_lock_acquire>
 8007b94:	4b1e      	ldr	r3, [pc, #120]	; (8007c10 <__sfp+0x84>)
 8007b96:	681e      	ldr	r6, [r3, #0]
 8007b98:	69b3      	ldr	r3, [r6, #24]
 8007b9a:	b913      	cbnz	r3, 8007ba2 <__sfp+0x16>
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7ff ffbd 	bl	8007b1c <__sinit>
 8007ba2:	3648      	adds	r6, #72	; 0x48
 8007ba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	d503      	bpl.n	8007bb4 <__sfp+0x28>
 8007bac:	6833      	ldr	r3, [r6, #0]
 8007bae:	b30b      	cbz	r3, 8007bf4 <__sfp+0x68>
 8007bb0:	6836      	ldr	r6, [r6, #0]
 8007bb2:	e7f7      	b.n	8007ba4 <__sfp+0x18>
 8007bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bb8:	b9d5      	cbnz	r5, 8007bf0 <__sfp+0x64>
 8007bba:	4b16      	ldr	r3, [pc, #88]	; (8007c14 <__sfp+0x88>)
 8007bbc:	60e3      	str	r3, [r4, #12]
 8007bbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bc2:	6665      	str	r5, [r4, #100]	; 0x64
 8007bc4:	f000 f847 	bl	8007c56 <__retarget_lock_init_recursive>
 8007bc8:	f7ff ff96 	bl	8007af8 <__sfp_lock_release>
 8007bcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bd4:	6025      	str	r5, [r4, #0]
 8007bd6:	61a5      	str	r5, [r4, #24]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007be0:	f7fb ffb2 	bl	8003b48 <memset>
 8007be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bec:	4620      	mov	r0, r4
 8007bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf0:	3468      	adds	r4, #104	; 0x68
 8007bf2:	e7d9      	b.n	8007ba8 <__sfp+0x1c>
 8007bf4:	2104      	movs	r1, #4
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f7ff ff62 	bl	8007ac0 <__sfmoreglue>
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	6030      	str	r0, [r6, #0]
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d1d5      	bne.n	8007bb0 <__sfp+0x24>
 8007c04:	f7ff ff78 	bl	8007af8 <__sfp_lock_release>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	e7ee      	b.n	8007bec <__sfp+0x60>
 8007c0e:	bf00      	nop
 8007c10:	08007fc4 	.word	0x08007fc4
 8007c14:	ffff0001 	.word	0xffff0001

08007c18 <_fwalk_reent>:
 8007c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	4688      	mov	r8, r1
 8007c20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c24:	2700      	movs	r7, #0
 8007c26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c2a:	f1b9 0901 	subs.w	r9, r9, #1
 8007c2e:	d505      	bpl.n	8007c3c <_fwalk_reent+0x24>
 8007c30:	6824      	ldr	r4, [r4, #0]
 8007c32:	2c00      	cmp	r4, #0
 8007c34:	d1f7      	bne.n	8007c26 <_fwalk_reent+0xe>
 8007c36:	4638      	mov	r0, r7
 8007c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c3c:	89ab      	ldrh	r3, [r5, #12]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d907      	bls.n	8007c52 <_fwalk_reent+0x3a>
 8007c42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c46:	3301      	adds	r3, #1
 8007c48:	d003      	beq.n	8007c52 <_fwalk_reent+0x3a>
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	47c0      	blx	r8
 8007c50:	4307      	orrs	r7, r0
 8007c52:	3568      	adds	r5, #104	; 0x68
 8007c54:	e7e9      	b.n	8007c2a <_fwalk_reent+0x12>

08007c56 <__retarget_lock_init_recursive>:
 8007c56:	4770      	bx	lr

08007c58 <__retarget_lock_acquire_recursive>:
 8007c58:	4770      	bx	lr

08007c5a <__retarget_lock_release_recursive>:
 8007c5a:	4770      	bx	lr

08007c5c <__swhatbuf_r>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	460e      	mov	r6, r1
 8007c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c64:	2900      	cmp	r1, #0
 8007c66:	b096      	sub	sp, #88	; 0x58
 8007c68:	4614      	mov	r4, r2
 8007c6a:	461d      	mov	r5, r3
 8007c6c:	da08      	bge.n	8007c80 <__swhatbuf_r+0x24>
 8007c6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	602a      	str	r2, [r5, #0]
 8007c76:	061a      	lsls	r2, r3, #24
 8007c78:	d410      	bmi.n	8007c9c <__swhatbuf_r+0x40>
 8007c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c7e:	e00e      	b.n	8007c9e <__swhatbuf_r+0x42>
 8007c80:	466a      	mov	r2, sp
 8007c82:	f000 f903 	bl	8007e8c <_fstat_r>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	dbf1      	blt.n	8007c6e <__swhatbuf_r+0x12>
 8007c8a:	9a01      	ldr	r2, [sp, #4]
 8007c8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c94:	425a      	negs	r2, r3
 8007c96:	415a      	adcs	r2, r3
 8007c98:	602a      	str	r2, [r5, #0]
 8007c9a:	e7ee      	b.n	8007c7a <__swhatbuf_r+0x1e>
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	b016      	add	sp, #88	; 0x58
 8007ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ca8 <__smakebuf_r>:
 8007ca8:	898b      	ldrh	r3, [r1, #12]
 8007caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cac:	079d      	lsls	r5, r3, #30
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	d507      	bpl.n	8007cc4 <__smakebuf_r+0x1c>
 8007cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	6163      	str	r3, [r4, #20]
 8007cc0:	b002      	add	sp, #8
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	ab01      	add	r3, sp, #4
 8007cc6:	466a      	mov	r2, sp
 8007cc8:	f7ff ffc8 	bl	8007c5c <__swhatbuf_r>
 8007ccc:	9900      	ldr	r1, [sp, #0]
 8007cce:	4605      	mov	r5, r0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff f96b 	bl	8006fac <_malloc_r>
 8007cd6:	b948      	cbnz	r0, 8007cec <__smakebuf_r+0x44>
 8007cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cdc:	059a      	lsls	r2, r3, #22
 8007cde:	d4ef      	bmi.n	8007cc0 <__smakebuf_r+0x18>
 8007ce0:	f023 0303 	bic.w	r3, r3, #3
 8007ce4:	f043 0302 	orr.w	r3, r3, #2
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	e7e3      	b.n	8007cb4 <__smakebuf_r+0xc>
 8007cec:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <__smakebuf_r+0x7c>)
 8007cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	6020      	str	r0, [r4, #0]
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	9b00      	ldr	r3, [sp, #0]
 8007cfc:	6163      	str	r3, [r4, #20]
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	6120      	str	r0, [r4, #16]
 8007d02:	b15b      	cbz	r3, 8007d1c <__smakebuf_r+0x74>
 8007d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 f8d1 	bl	8007eb0 <_isatty_r>
 8007d0e:	b128      	cbz	r0, 8007d1c <__smakebuf_r+0x74>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	89a0      	ldrh	r0, [r4, #12]
 8007d1e:	4305      	orrs	r5, r0
 8007d20:	81a5      	strh	r5, [r4, #12]
 8007d22:	e7cd      	b.n	8007cc0 <__smakebuf_r+0x18>
 8007d24:	08007ab5 	.word	0x08007ab5

08007d28 <_malloc_usable_size_r>:
 8007d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d2c:	1f18      	subs	r0, r3, #4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bfbc      	itt	lt
 8007d32:	580b      	ldrlt	r3, [r1, r0]
 8007d34:	18c0      	addlt	r0, r0, r3
 8007d36:	4770      	bx	lr

08007d38 <_raise_r>:
 8007d38:	291f      	cmp	r1, #31
 8007d3a:	b538      	push	{r3, r4, r5, lr}
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	460d      	mov	r5, r1
 8007d40:	d904      	bls.n	8007d4c <_raise_r+0x14>
 8007d42:	2316      	movs	r3, #22
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d4e:	b112      	cbz	r2, 8007d56 <_raise_r+0x1e>
 8007d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d54:	b94b      	cbnz	r3, 8007d6a <_raise_r+0x32>
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 f830 	bl	8007dbc <_getpid_r>
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4601      	mov	r1, r0
 8007d60:	4620      	mov	r0, r4
 8007d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d66:	f000 b817 	b.w	8007d98 <_kill_r>
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d00a      	beq.n	8007d84 <_raise_r+0x4c>
 8007d6e:	1c59      	adds	r1, r3, #1
 8007d70:	d103      	bne.n	8007d7a <_raise_r+0x42>
 8007d72:	2316      	movs	r3, #22
 8007d74:	6003      	str	r3, [r0, #0]
 8007d76:	2001      	movs	r0, #1
 8007d78:	e7e7      	b.n	8007d4a <_raise_r+0x12>
 8007d7a:	2400      	movs	r4, #0
 8007d7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d80:	4628      	mov	r0, r5
 8007d82:	4798      	blx	r3
 8007d84:	2000      	movs	r0, #0
 8007d86:	e7e0      	b.n	8007d4a <_raise_r+0x12>

08007d88 <raise>:
 8007d88:	4b02      	ldr	r3, [pc, #8]	; (8007d94 <raise+0xc>)
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f7ff bfd3 	b.w	8007d38 <_raise_r>
 8007d92:	bf00      	nop
 8007d94:	2000001c 	.word	0x2000001c

08007d98 <_kill_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d07      	ldr	r5, [pc, #28]	; (8007db8 <_kill_r+0x20>)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4608      	mov	r0, r1
 8007da2:	4611      	mov	r1, r2
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	f7f9 fd41 	bl	800182c <_kill>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d102      	bne.n	8007db4 <_kill_r+0x1c>
 8007dae:	682b      	ldr	r3, [r5, #0]
 8007db0:	b103      	cbz	r3, 8007db4 <_kill_r+0x1c>
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	bf00      	nop
 8007db8:	20000788 	.word	0x20000788

08007dbc <_getpid_r>:
 8007dbc:	f7f9 bd2e 	b.w	800181c <_getpid>

08007dc0 <__sread>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc8:	f000 f894 	bl	8007ef4 <_read_r>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	bfab      	itete	ge
 8007dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8007dd4:	181b      	addge	r3, r3, r0
 8007dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dda:	bfac      	ite	ge
 8007ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dde:	81a3      	strhlt	r3, [r4, #12]
 8007de0:	bd10      	pop	{r4, pc}

08007de2 <__swrite>:
 8007de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de6:	461f      	mov	r7, r3
 8007de8:	898b      	ldrh	r3, [r1, #12]
 8007dea:	05db      	lsls	r3, r3, #23
 8007dec:	4605      	mov	r5, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	4616      	mov	r6, r2
 8007df2:	d505      	bpl.n	8007e00 <__swrite+0x1e>
 8007df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df8:	2302      	movs	r3, #2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f000 f868 	bl	8007ed0 <_lseek_r>
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	463b      	mov	r3, r7
 8007e10:	4628      	mov	r0, r5
 8007e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e16:	f000 b817 	b.w	8007e48 <_write_r>

08007e1a <__sseek>:
 8007e1a:	b510      	push	{r4, lr}
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e22:	f000 f855 	bl	8007ed0 <_lseek_r>
 8007e26:	1c43      	adds	r3, r0, #1
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	bf15      	itete	ne
 8007e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e36:	81a3      	strheq	r3, [r4, #12]
 8007e38:	bf18      	it	ne
 8007e3a:	81a3      	strhne	r3, [r4, #12]
 8007e3c:	bd10      	pop	{r4, pc}

08007e3e <__sclose>:
 8007e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e42:	f000 b813 	b.w	8007e6c <_close_r>
	...

08007e48 <_write_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d07      	ldr	r5, [pc, #28]	; (8007e68 <_write_r+0x20>)
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	4608      	mov	r0, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f7f9 fd1f 	bl	800189a <_write>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_write_r+0x1e>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_write_r+0x1e>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000788 	.word	0x20000788

08007e6c <_close_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d06      	ldr	r5, [pc, #24]	; (8007e88 <_close_r+0x1c>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	f7f9 fd2b 	bl	80018d2 <_close>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_close_r+0x1a>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_close_r+0x1a>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	20000788 	.word	0x20000788

08007e8c <_fstat_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d07      	ldr	r5, [pc, #28]	; (8007eac <_fstat_r+0x20>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f7f9 fd26 	bl	80018ea <_fstat>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d102      	bne.n	8007ea8 <_fstat_r+0x1c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b103      	cbz	r3, 8007ea8 <_fstat_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000788 	.word	0x20000788

08007eb0 <_isatty_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d06      	ldr	r5, [pc, #24]	; (8007ecc <_isatty_r+0x1c>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	602b      	str	r3, [r5, #0]
 8007ebc:	f7f9 fd25 	bl	800190a <_isatty>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_isatty_r+0x1a>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_isatty_r+0x1a>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	20000788 	.word	0x20000788

08007ed0 <_lseek_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	; (8007ef0 <_lseek_r+0x20>)
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4611      	mov	r1, r2
 8007eda:	2200      	movs	r2, #0
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f7f9 fd1e 	bl	8001920 <_lseek>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d102      	bne.n	8007eee <_lseek_r+0x1e>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	b103      	cbz	r3, 8007eee <_lseek_r+0x1e>
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	20000788 	.word	0x20000788

08007ef4 <_read_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d07      	ldr	r5, [pc, #28]	; (8007f14 <_read_r+0x20>)
 8007ef8:	4604      	mov	r4, r0
 8007efa:	4608      	mov	r0, r1
 8007efc:	4611      	mov	r1, r2
 8007efe:	2200      	movs	r2, #0
 8007f00:	602a      	str	r2, [r5, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f7f9 fcac 	bl	8001860 <_read>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_read_r+0x1e>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_read_r+0x1e>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20000788 	.word	0x20000788

08007f18 <_init>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr

08007f24 <_fini>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr
